2020-03-27  David Anderson 
    * print_die.c: Cleaned trailing whitespace and an
      indent error.
2020-03-27  David Anderson 
    * print_die.c: Now does a better job of cleaning
      up libdwarf data it requested when there is
      a serious DWARF error.
2020-03-26  David Anderson 
    * print_ranges.c: For a particular serious error/corruption
      print a detailed error message,
      dwarf_dealloc() the Dwarf_Error instance
      and skip to the next
      section to continue. 
2020-03-26  David Anderson 
    * dwarfdump.c: Now calls the new free_all_dwconf()
      to avoid leaking memory. should_skip_this_cu()
      ensures it does not leak.
    * dwconf.c: Use struct esb to build a string, avoid
      leaving a static string pointer around.
      Add free_all_dwconf() so the dwconf malloc
      space can be cleaned up at end of run.
    * dwconf.h: Declare free_all_dwconf().
    * print_frames.c(get_proc_name): Add loopok variable so the loop
      on cu contexts can stop early when a serious
      error is encountered. The procedure name is not
      very critical, just nice to have.
      Ensured no leaks in dwarfdump here.
    * print_lines.c: When an error but we wish to continue
      ensure the Dwarf_Error is dealloc-d.
    * print_pubnames.c: Ensure no leaks on error from libdwarf.
2020-03-25  David Anderson 
    * print_die.c,print_lines.c,print_pubnames.c:
      Fix indents and remove trailing whitespace.
    * print_frames.c : Fix whitespace and ensure
      a return of DW_DLV_ERROR (which will
      basically be ignored anyway) gets a dwarf_dealloc
      applied to the Dwarf_Error argument.
2020-03-24  David Anderson 
    * print_lines.c: Added a dwarf_dealloc DW DLA STRING
      that had been overlooked.
2020-03-24  David Anderson
    * print_die.c: Ensuring that when an error is
      created it gets dealloc-d.
    * print_gdbindex.c(print_gdb_index): It was failing to dealloc
      the data it requested from libdwarf.
2020-03-23  David Anderson
    * print_die.c: More cases trying to continue after error.
      And ensuring no dwarf leakages.
    * print_frames.c: More accurate error report (one place).
    * print_pubnames.c: Fixing leaks and making some error
      message more precise (showing values).
2020-03-21  David Anderson
    * dwarfdump.c:Add flag_data_post_cleanup() in a few
      more places early termination situations.
    * print_abbrevs.c: Move some variables to the most
      local scope. Revise the while loop so we can
      ensure local alloc cleaned up in case of error.
      Remove pointless duplicate tests for zero abbrev_code.
    * print_die_stack: Refactor, adding dealloc_die_stack()
      and calling it where needed to free up local malloc
      data.
    * print_frames.c: Add more dwarf_fde_cie_list_dealloc()
      where appropriate.
2020-03-20  David Anderson
    * print_aranges.c: In case of error was not cleaning
      up allocations immediately in all cases.
2020-03-20  David Anderson
    * print_frames.c,print_dgbindex.c,print_macros.c,
      print_pubnames.c,print_ranges.c,print_reloc.c,
      sanitized.c,tag_attr.c,testesb.c,
      uri.c: Remove use of esb_append_printf()
      and use esb_append_printf_i etc instead.
      Then null device will never be set up.
2020-03-19  David Anderson
    * globals.h: Using parens in the DROP_ERROR_INSTANCE
      macro to avoid accidental side effects.
    * print_die.c: Now uses more localized pointers
      where possible to make understanding the code simpler.
      Much more careful to dwarf_dealloc things in
      the face of errors in the DWARF and early
      termination of dwarfdump.
    * print_lines.c: Much more careful to dwarf_dealloc
      things in case of error.
2020-03-17:   David Anderson
    * dwarfdump.c: Report the number of major errors
      more accurately.
    * print_die.c: Report the number of major errors
      more accurately.
    * print_pubnames.c: Revise certain if/then/else
      to make the flow clearer.
2020-03-16:   David Anderson
    * print_ranges.c: Added a dealloc of rangeset,DW_DLA_RANGES.
2020-03-15:   David Anderson
    * glflags.c: Now defaults to not printing the global
      alloc sums. Use --print-alloc-sums option to dwarfdump
      to print them (ensure GLOBAL_ALLOC_SUMS defined
      in libdwarf/dwarf_alloc.c). 
2020-03-15:   David Anderson
    * print_pubnames.c: Reformat a too-long line.
2020-03-14:   David Anderson
    * dwarfdump.c: Changed an argument name in the print_error*
      group of functions to reflect the real meaning,
      dwarf_code -> dwarf_ret_val.
    * print_aranges.c (print_aranges): Only call dwarf_dealloc() in
      case pa_error is non-null.
    * print_die: Initialize no_of_elements at long last.
    * print_pubnames.c: A code line was ... long. 2 lines now.
2020-03-12:   David Anderson
    * print_abbrevs.c: Add zero of dealloc'd pointer.
2020-03-12:   David Anderson
    * dwarfdump.c: Simplified check_for_major_errors().
      Deleted some #if 0 code.
    * print_die.c: Fiexed indent and trailing whitespace.
    * print_macro.c: Deleted a bogus 
      dwarf_dealloc_macro_context() call.
2020-03-12:   David Anderson
    * print_die.c: Small changes to cleanup DIE allocations
      so not relying on de_alloc_tree.
2020-03-12:   David Anderson
    * print_aranges.c:  Fixed trailing whitespace and indents.
2020-03-12:   David Anderson
    * esb.c, dwarfdump.c: Fixed trailing whitespace and indents.
2020-03-12:   David Anderson
    * print_str_offsets.c: Clean up by doing
      proper dealloc calls instead of relying
      on de_alloc_tree to clean up.
2020-03-12:   David Anderson
    * print_pubnames.c: Clean up by doing
      proper dealloc calls instead of relying
      on de_alloc_tree to clean up.
2020-03-12:   David Anderson
    * print_macro.c: Clean up by doing
      proper dealloc calls instead of relying
      on de_alloc_tree to clean up.
2020-03-12:   David Anderson
    * print_lines.c: Eliminate leaks that relied
      on de_alloc_tree to clean up.
2020-03-12:   David Anderson
    * makename.c: Correct some comments.
2020-03-12:   David Anderson
    * print_aranges.c: Eliminate leaks that relied
      on de_alloc_tree to clean up.
2020-03-12:   David Anderson
    * print_abbrevs.c: Eliminate leaks that relied
      on de_alloc_tree to clean up.
2020-03-12:   David Anderson
    * command_options.h, command_options.c: Adds
      uri_data_constructor() and uri_data_destructor()
      to avoid an old memory leak (called from dwarfdump.c).
2020-03-12:   David Anderson
    * dwarfdump.c: Cleans up old and small memory
      leaks and simplifies the code as well.
2020-03-09:   David Anderson
    * command_options.c: Implements two options primarily for
      dwarfdump developers: --suppress-de-alloc-tree 
      and --print-alloc-sums.
    * dwarf_names.c,dwarf_names.h,dwarfdump-ta-ext-table.h,
      dwarfdump-ta-table.h,dwarfdump-tt-ext-table.h,
      dwarfdump-tt-table.h: regenerated with latest
      version date string.
    * dwarfdump.c: Implements the two new options.
    * glflags.c,glflags.h: declares and instantiates
      a new global flag gf_print_alloc_sums for the new option
      --print-alloc-sums.
    * print_die.c: Arranged correct dwarf_dealloc of
      DW_DLA_ERROR errors when calling dwarf_formudata/sdata
      and discarding errors.
2020-02-25:   David Anderson
    * dwarf_names.c,dwarf_names.h,dwarfdump-ta-ext-table.h,
      dwarfdump-ta-table.h dwarfdump-tt-ext-table.h dwarfdump-tt-table.h:
      updated date string.
2020-02-25:   David Anderson
    * esb.c: Slight corrections so a %-12s will ignore the -12
      if the string to be inserted is more than 11 bytes long.
      Allowed use of UNUSEDARG.
    * runtests.sh: Restore the running of the testesb.c
      test program.
    * testesb.c: Added a new test case specifically for
      testing the change in esb.c. Eliminated the
      unneeded tests on allocation-size, that was not
      helpful, yet was tedious to make meaningful.
2020-02-20:   David Anderson
    * print_die.c: Removed the last snprintf the required
      fixed spaces and now use esb functions to do the
      message creation.
2020-02-19:   David Anderson
    * checkutil.c,common.c,naming.c,print_abbrevs.c,print_die.c,
      print_lines.c: Removed the ORIGINAL_SPRINTF
      versions in favor
      of esb_append_printf_[usi] versions. 
      We have not been using the s[n]printf
      versions for a while now. 
2020-02-16:   David Anderson
    * globals.h: Adds DWVERSION5 to use with testing for
      version number details (which matters when calling 
      dwarf_srcfiles())
    * print_die.c: Now recognizes that DWARF5 is different
      from earlier versions in the way dwarf_srcfiles()
      array of string pointers is to be used.
      Refactored the srcfiles checking to its own
      function to simplify reading the code.
2020-02-13:   David Anderson
    * dwarf_names.c dwarf_names.c,dwarfdump-ta-ext-table.h,
      dwarfdump-ta-table.h,dwarfdump-tt-ext-table.h,
      dwarfdump-tt-table.h: regenerated with new
      date string.
2020-01-27:   David Anderson
    * print_die.c: Now attributes the correct actual form
      in more places (meaning in error messages, here and
      in the previous commit)..
2020-01-25:   David Anderson
    * print_die.c: Now attributes the correct actual form
      name (as opposed to a vaguely generic FORM name)
2020-01-16:   David Anderson
    * print_die.c: Now ensures local Dwarf_Sig8
      variables are always initialized with zero bytes.
      This does not fix bugs, but it makes the code easier
      for the reader to reason about.
    * testobjLE32PE.test.c: Removed trailing whitespace
      and fixed indentation errors.
2020-01-14:
    * dwarf_names.c,dwarf_names.h,dwarfdump-ta-ext-table.h,
      dwarfdump-ta-table.h,dwarfdump-tt-ext-table.h,dwarfdump-tt-table.h:
      Updated version string.
2020-01-05:
    * dwconf.c: Fix CoveritySan CID 206594 resource leak
      if an error reading dwarfdump.conf.
    * sanitized.c(no_questionable_chars): Fixed CoverityScan
      CID 206595. The code was
      failing to sanitize % characters: the test for %
      has been moved up a few lines.
      do_sanity_insert() had the same problem with %. Fixed.
      And do_sanity_insert() had a final line of unreachable
      code; now fixed by simplifying the code (an ASSERT
      added in a comment). Coverity Scan CID 206596.
    * print_die.c(traverse_one_die): Was failing to check
      for the normal dwarf return int and letting 
      next code deal with the fallout (and leak an error
      record). Now we check and avoid any leak or surprise.      
      Coverity Scan CID 20659


