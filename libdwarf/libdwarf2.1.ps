%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Tue Oct 13 09:54:47 2015
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%+ font Courier
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 134
%%PageOrder: Ascend
%%DocumentMedia: Default 595 842 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 595 842 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 841.89 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron
/Zcaron/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Roman@0 ENC0/Times-Roman RE
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Bold@0 SF 3(AC)176.484 93.37 S
(onsumer Library Interface to D)-3 E -1.44(WA)-.48 G(RF)1.44 E/F1 11
/Times-Italic@0 SF(David Ander)249.492 112.37 Q(son)-.11 E F0 3(1. INTR)
69.336 188.37 R(ODUCTION)-.36 E/F2 10/Times-Roman@0 SF 1.921
(This document describes an interf)69.336 206.37 R 1.921(ace to)-.1 F/F3
10/Times-Italic@0 SF(libdwarf)4.421 E F2 4.421(,al)C 1.921
(ibrary of functions to pro)-4.421 F 1.92(vide access to D)-.15 F -1.2
(WA)-.3 G(RF)1.2 E(deb)69.336 218.37 Q 2.472
(ugging information records, D)-.2 F -1.2(WA)-.3 G 2.473
(RF line number information, D)1.2 F -1.2(WA)-.3 G 2.473
(RF address range and global)1.2 F 2.755
(names information, weak names information, D)69.336 230.37 R -1.2(WA)
-.3 G 2.755(RF frame description information, D)1.2 F -1.2(WA)-.3 G
2.755(RF static)1.2 F(function names, D)69.336 242.37 Q -1.2(WA)-.3 G
(RF static v)1.2 E(ariables, and D)-.25 E -1.2(WA)-.3 G
(RF type information.)1.2 E 2.821(The document has long mentioned the "\
Unix International Programming Languages Special Interest)69.336 260.37
R 3.584(Group" \(PLSIG\), under whose auspices the D)69.336 272.37 R
-1.2(WA)-.3 G 3.583(RF committee w)1.2 F 3.583(as formed around 1991.)
-.1 F("Unix)8.583 E(International" w)69.336 284.37 Q
(as disbanded in the 1990s and no longer e)-.1 E(xists.)-.15 E(The D)
69.336 302.37 Q -1.2(WA)-.3 G(RF committee published D)1.2 E -1.2(WA)-.3
G(RF2 July 27, 1993.)1.2 E .774(In the mid 1990s this document and the \
library it describes \(which the committee ne)69.336 320.37 R -.15(ve)
-.25 G 3.274(re).15 G .774(ndorsed, ha)-3.274 F(ving)-.2 E 1
(decided not to endorse or appro)69.336 332.37 R 1.3 -.15(ve a)-.15 H
1.299 -.15(ny p).15 H .999(articular library interf).15 F .999(ace\) w)
-.1 F .999(as made a)-.1 F -.25(va)-.2 G .999(ilable on the internet by)
.25 F(Silicon Graphics, Inc.)69.336 344.37 Q 1.306(In 2005 the D)69.336
362.37 R -1.2(WA)-.3 G 1.306(RF committee be)1.2 F -.05(ga)-.15 G 3.807
(na).05 G 3.807(na)-3.807 G -2.2 -.25(ff i)-3.807 H 1.307
(liation with FreeStandards.or).25 F 3.807(g. In)-.18 F 1.307
(2007 FreeStandards.or)3.807 F(g)-.18 E(mer)69.336 374.37 Q .028
(ged with The Linux F)-.18 F 2.528(oundation. The)-.15 F -.3(DW)2.528 G
.027(ARF committee dropped its af)-.9 F -.2(fi)-.25 G .027
(liation with FreeStandards.or).2 F(g)-.18 E 1.071
(in 2007 and established the dw)69.336 386.37 R(arfstd.or)-.1 E 3.571
(gw)-.18 G 3.571(ebsite. See)-3.571 F("http://www)3.571 E(.dw)-.65 E
(arfstd.or)-.1 E 1.071(g" for current information)-.18 F
(on standardization acti)69.336 398.37 Q(vities and a cop)-.25 E 2.5(yo)
-.1 G 2.5(ft)-2.5 G(he standard.)-2.5 E F0 3(1.1 Copyright)69.336 420.37
R F2(Cop)69.336 438.37 Q(yright 1993-2006 Silicon Graphics, Inc.)-.1 E
(Cop)69.336 462.37 Q(yright 2007-2014 Da)-.1 E(vid Anderson.)-.2 E 1.23
(Permission is hereby granted to cop)69.336 486.37 R 3.73(yo)-.1 G 3.73
(rr)-3.73 G 1.229(epublish or use an)-3.73 F 3.729(yo)-.15 G 3.729(ra)
-3.729 G 1.229(ll of this document without restriction)-3.729 F -.15(ex)
69.336 498.37 S 2.318(cept that when publishing more than a small amoun\
t of the document please ackno).15 F 2.318(wledge Silicon)-.25 F
(Graphics, Inc and Da)69.336 510.37 Q(vid Anderson.)-.2 E 1.829
(This document is distrib)69.336 534.37 R 1.829
(uted in the hope that it w)-.2 F 1.828(ould be useful, b)-.1 F 1.828
(ut WITHOUT ANY W)-.2 F(ARRANTY)-1.2 E(;)-.92 E 3.457(without e)69.336
546.37 R -.15(ve)-.25 G 5.957(nt).15 G 3.457(he implied w)-5.957 F 3.457
(arranty of MERCHANT)-.1 F 3.458(ABILITY or FITNESS FOR A P)-.93 F(AR)
-.92 E(TICULAR)-.6 E(PURPOSE.)69.336 558.37 Q F0 3(1.2 Pur)69.336 592.37
R(pose and Scope)-.12 E F2 2.972(The purpose of this document is to doc\
ument a library of functions to access D)69.336 610.37 R -1.2(WA)-.3 G
2.972(RF deb)1.2 F(ugging)-.2 E 1.444(information. There is no ef)69.336
622.37 R 1.444(fort made in this document to address the creation of th\
ese records as those)-.25 F
(issues are addressed separately \(see "A Producer Library Interf)69.336
634.37 Q(ace to D)-.1 E -1.2(WA)-.3 G(RF"\).)1.2 E(Additionally)69.336
664.37 Q 2.901(,t)-.65 G .401
(he focus of this document is the functional interf)-2.901 F .4
(ace, and as such, implementation as well as)-.1 F
(optimization issues are intentionally ignored.)69.336 676.37 Q F0 3
(1.3 Document)69.336 722.37 R(History)3 E F2 3.023(Ad)69.336 740.37 S
.523(ocument w)-3.023 F .524
(as written about 1991 which had similar layout and interf)-.1 F 3.024
(aces. Written)-.1 F .524(by people from Hal)3.024 F(re)69.336 768 Q 2.5
(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1-)123.21 G 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2-)277.006 48 S 2.329
(Corporation, That document described a library for reading D)69.336 96
R -1.2(WA)-.3 G 4.828(RF1. The)1.2 F 2.328(authors distrib)4.828 F 2.328
(uted paper)-.2 F .423(copies to the committee with the clearly e)69.336
108 R .423
(xpressed intent to propose the document as a supported interf)-.15 F
(ace)-.1 E(def)69.336 120 Q 2.5(inition. The)-.2 F
(committee decided not to pursue a library def)2.5 E(inition.)-.2 E .673
(SGI wrote the document you are no)69.336 138 R 3.172(wr)-.25 G .672
(eading in 1993 with a similar layout and content and or)-3.172 F -.05
(ga)-.18 G(nization,).05 E -.2(bu)69.336 150 S 4.525(ti).2 G 4.525(tw)
-4.525 G 2.025(as complete document re)-4.625 F 2.026
(write with the intent to read D)-.25 F -1.2(WA)-.3 G 2.026(RF2 \(the D)
1.2 F -1.2(WA)-.3 G 2.026(RF v)1.2 F 2.026(ersion then in)-.15 F -.15
(ex)69.336 162 S 3.455(istence\). The).15 F .955(intent w)3.455 F .955
(as \(and is\) to also co)-.1 F -.15(ve)-.15 G 3.455(rf).15 G .955
(uture re)-3.455 F .955(visions of D)-.25 F -1.2(WA)-.3 G(RF)1.2 E 5.955
(.A)-.8 G .955(ll the function interf)-5.955 F(aces)-.1 E .195
(were changed in 1994 to uniformly return a simple inte)69.336 174 R
.195(ger success-code \(see D)-.15 F(W_DL)-.3 E .195
(V_OK etc\), generally)-1 F(follo)69.336 186 Q .511
(wing the recommendations in the chapter titled "Candy Machine Interf)
-.25 F .51(aces" of "Writing Solid Code",)-.1 F 2.5(ab)69.336 198 S
(ook by Ste)-2.5 E .3 -.15(ve M)-.25 H
(aguire \(published by Microsoft Press\).).15 E/F1 12/Times-Bold@0 SF 3
(1.4 Def)69.336 220 R(initions)-.3 E F0 -.3(DW)69.336 238 S .817
(ARF deb)-.9 F .817(ugging information entries \(DIEs\) are the se)-.2 F
.818(gments of information placed in the)-.15 F/F2 10/Courier@0 SF
(.debug_*)3.318 E F0 1.297(sections by compilers, assemblers, and linka\
ge editors that, in conjunction with line number entries, are)69.336 250
R 2.691(necessary for symbolic source-le)69.336 262 R -.15(ve)-.25 G
5.192(ld).15 G(eb)-5.192 E 5.192(ugging. Refer)-.2 F 2.692
(to the latest ")5.192 F/F3 10/Times-Italic@0 SF -.4(DW)C 2.692(ARF Deb)
-.2 F(ug)-.2 E 2.692(ging Information)-.1 F -1.05(Fo)69.336 274 S(rmat)
1.05 E F0 2.5("f)C(rom www)-2.5 E(.dw)-.65 E(arfstd.or)-.1 E 2.5(gf)-.18
G(or a more complete description of these entries.)-2.5 E .911
(This document adopts all the terms and def)69.336 304 R .911
(initions in ")-.2 F F3 -.4(DW)C .911(ARF Deb)-.2 F(ug)-.2 E .91
(ging Information F)-.1 F(ormat)-1.05 E F0 3.41("v)C(ersions)-3.56 E
.521(2,3,4, and 5.)69.336 316 R .522(It originally focused on the imple\
mentation at Silicon Graphics, Inc., b)5.521 F .522(ut no)-.2 F 3.022
(wa)-.25 G .522(ttempts to be)-3.022 F(more generally useful.)69.336 328
Q F1 3(1.5 Ov)69.336 362 R(er)-.12 E(view)-.12 E F0 .252
(The remaining sections of this document describe the proposed interf)
69.336 380 R .252(ace to)-.1 F F2(libdwarf)2.752 E F0 2.752(,f)C .252
(irst by describing)-2.952 F 3.175(the purpose of additional types def)
69.336 392 R 3.176(ined by the interf)-.2 F 3.176(ace, follo)-.1 F 3.176
(wed by descriptions of the a)-.25 F -.25(va)-.2 G(ilable).25 E 4.31
(operations. This)69.336 404 R 1.81
(document assumes you are thoroughly f)4.31 F 1.81
(amiliar with the information contained in the)-.1 F F3 -.4(DW)69.336
416 S(ARF Deb)-.2 E(ug)-.2 E(ging Information F)-.1 E(ormat)-1.05 E F0
(document.)2.5 E 2.608 -.8(We s)69.336 434 T 1.008
(eparate the functions into se).8 F -.15(ve)-.25 G 1.008(ral cate).15 F
1.008(gories to emphasize that not all consumers w)-.15 F 1.009
(ant to use all the)-.1 F 3.034(functions. W)69.336 446 R 3.034(ec)-.8 G
.534(all the cate)-3.034 F .533(gories Deb)-.15 F(ugger)-.2 E 3.033(,I)
-.4 G(nternal-le)-3.033 E -.15(ve)-.25 G .533(l, High-le).15 F -.15(ve)
-.25 G .533(l, and Miscellaneous not because one).15 F 1.757
(is more important than another b)69.336 458 R 1.757(ut as a w)-.2 F
1.757(ay of making the rather lar)-.1 F 1.758
(ge set of function calls easier to)-.18 F(understand.)69.336 470 Q
1.236(Unless otherwise specif)69.336 488 R 1.236
(ied, all functions and structures should be tak)-.2 F 1.235
(en as being designed for Deb)-.1 F(ugger)-.2 E(consumers.)69.336 500 Q
1.598(The Deb)69.336 518 R 1.598(ugger Interf)-.2 F 1.598
(ace of this library is intended to be used by deb)-.1 F 4.098
(uggers. The)-.2 F(interf)4.098 E 1.599(ace is lo)-.1 F(w-le)-.25 E -.15
(ve)-.25 G(l).15 E 1.086(\(close to dw)69.336 530 R 1.086(arf\) b)-.1 F
1.086(ut suppresses irrele)-.2 F -.25(va)-.25 G 1.085(nt detail.).25 F
3.585(Ad)6.085 G(eb)-3.585 E 1.085(ugger will w)-.2 F 1.085
(ant to absorb all of some sections at)-.1 F .39(startup and will w)
69.336 542 R .39(ant to see little or nothing of some sections e)-.1 F
.391(xcept at need.)-.15 F .391(And e)5.391 F -.15(ve)-.25 G 2.891(nt)
.15 G .391(hen will probably)-2.891 F -.1(wa)69.336 554 S .284(nt to ab\
sorb only the information in a single compilation unit at a time.).1 F
2.784(Ad)5.284 G(eb)-2.784 E .284(ugger does not care about)-.2 F
(implementation details of the library)69.336 566 Q(.)-.65 E .505
(The Internal-le)69.336 584 R -.15(ve)-.25 G 3.005(lI).15 G(nterf)-3.005
E .505(ace is for a D)-.1 F -1.2(WA)-.3 G .506
(RF prettyprinter and check)1.2 F(er)-.1 E 5.506(.A)-.55 G .506
(thorough prettyprinter will w)-2.5 F(ant)-.1 E 1.444(to kno)69.336 596
R 3.944(wa)-.25 G 1.444(ll kinds of internal things \(lik)-3.944 F 3.944
(ea)-.1 G 1.444(ctual FORM numbers and actual of)-3.944 F 1.444
(fsets\) so it can check for)-.25 F 1.478
(appropriate structure in the D)69.336 608 R -1.2(WA)-.3 G 1.479(RF dat\
a and print \(on request\) all that internal information for human)1.2 F
.874(users and libdw)69.336 620 R .874(arf authors and compiler)-.1 F
3.374(-writers. Calls)-.2 F .874(in this interf)3.374 F .874(ace pro)-.1
F .874(vide data a deb)-.15 F .874(ugger does not)-.2 F(care about.)
69.336 632 Q .071(The High-le)69.336 650 R -.15(ve)-.25 G 2.571(lI).15 G
(nterf)-2.571 E .071(ace is for higher le)-.1 F -.15(ve)-.25 G 2.572(la)
.15 G .072(ccess \(it is not really a high le)-2.572 F -.15(ve)-.25 G
2.572(li).15 G(nterf)-2.572 E 2.572(ace!\). Programs)-.1 F .072(such as)
2.572 F .046(disassemblers will w)69.336 662 R .046
(ant to be able to display rele)-.1 F -.25(va)-.25 G .046
(nt information about functions and line numbers without).25 F(ha)69.336
674 Q(ving to in)-.2 E -.15(ve)-.4 G(st too much ef).15 E
(fort in looking at D)-.25 E -1.2(WA)-.3 G(RF)1.2 E(.)-.8 E
(The miscellaneous interf)69.336 692 Q(ace is just what is left o)-.1 E
-.15(ve)-.15 G(r: the error handler functions.).15 E .007(The follo)
69.336 710 R .007(wing is a brief mention of the changes in this libdw)
-.25 F .007(arf from the libdw)-.1 F .008(arf draft for D)-.1 F -1.2(WA)
-.3 G .008(RF V)1.2 F(ersion)-1.11 E 2.5(1a)69.336 722 S
(nd recent changes.)-2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-2-)123.21 G 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3-)277.006 48 S/F1 12/Times-Bold@0 SF 3
(1.6 Items)69.336 100 R(Changed)3 E F0 4.18
(Adding support for reading D)69.336 118 R -1.2(WA)-.3 G 4.179
(RF5 line tables and GNU tw)1.2 F(o-le)-.1 E -.15(ve)-.25 G 6.679(ll).15
G 4.179(ine tables.)-6.679 F 4.179(The function)9.179 F(dw)69.336 130 Q
5.183(arf_srclines\(\) still w)-.1 F 5.183(orks b)-.1 F 5.183
(ut those using D)-.2 F -1.2(WA)-.3 G 5.183(RF4 or D)1.2 F -1.2(WA)-.3 G
5.183(RF5 are advised to switch to)1.2 F(dw)69.336 142 Q 3.572
(arf_srclines_b\(\). dw)-.1 F 1.072(arf_srclines\(\) cannot handle sk)
-.1 F 1.072(eleton line tables sensibly and a ne)-.1 F 3.571(wi)-.25 G
(nterf)-3.571 E 1.071(ace w)-.1 F(as)-.1 E(needed for tw)69.336 154 Q
(o-le)-.1 E -.15(ve)-.25 G 2.5(ll).15 G(ine tables so the ne)-2.5 E 2.5
(wa)-.25 G(pproach satisf)-2.5 E(ies both.)-.2 E(\(October 5,2015\))5 E
.993(Adding support for P)69.336 172 R .993(ackage Files \(D)-.15 F -1.2
(WA)-.3 G .993(RF5\) to enable access of address data using D)1.2 F
(W_FORM_addrx.)-.3 E(See dw)69.336 184 Q 2.5
(arf_set_tied_dbg\(\). \(September)-.1 F(13, 2015\))2.5 E 10.899
(Adding some D)69.336 202 R -1.2(WA)-.3 G 10.899(RF5 support and impro)
1.2 F -.15(ve)-.15 G 13.399(dD).15 G 10.899(WP P)-13.699 F 10.899
(ackage File support, using)-.15 F(dw)69.336 214 Q(arf_ne)-.1 E
(xt_cu_header_d\(\).)-.15 E 1.684(Added a note about dw)69.336 232 R
1.684(arf_errmsg\(\): the string pointer returned should be considered \
ephemeral, not a)-.1 F .615(string which remains v)69.336 244 R .615
(alid permanently)-.25 F 5.615(.U)-.65 G .614
(ser code should print it or cop)-5.615 F 3.114(yi)-.1 G 3.114(tb)-3.114
G .614(efore calling other libdw)-3.114 F(arf)-.1 E
(functions on the specif)69.336 256 Q(ic Dw)-.2 E(arf_Deb)-.1 E
(ug instance.)-.2 E(\(May 15, 2014\))5 E .392
(Added a printf-callback so libdw)69.336 274 R .392
(arf will not actually print to stdout.)-.1 F .392(Added dw)5.392 F .392
(arf_highpc_b\(\) so return of)-.1 F 2.5(aD)69.336 286 S -1.2(WA)-2.8 G
(RF4 D)1.2 E(W_A)-.3 E
(T_high_pc of class constant can be returned properly)-1.11 E 5(.\()-.65
G(August 15 2013\))-5 E(Def)69.336 304 Q(ined ho)-.2 E 2.5(wt)-.25 G
(he ne)-2.5 E 2.5(wo)-.25 G(perator D)-2.5 E
(W_OP_GNU_const_type is handled.)-.3 E(\(January 26 2013\))5 E 3.585
(Added dw)69.336 322 R(arf_loclist_from_e)-.1 E 3.585
(xpr_b\(\) function which adds ar)-.15 F 3.584(guments of the D)-.18 F
-1.2(WA)-.3 G 3.584(RF v)1.2 F 3.584(ersion \(2 for)-.15 F -.3(DW)69.336
334 S 5.724(ARF2, etc\) and the of)-.9 F 5.725(fset size to the dw)-.25
F(arf_loclist_from_e)-.1 E 5.725(xpr_a\(\) function.)-.15 F 5.725
(Because the)10.725 F -.3(DW)69.336 346 S 3.585
(_OP_GNU_implicit_pointer opcode is def).3 F 3.585(ined dif)-.2 F 3.585
(ferently for D)-.25 F -1.2(WA)-.3 G 3.585(RF2 than for later v)1.2 F
(ersions.)-.15 E(\(No)69.336 358 Q -.15(ve)-.15 G(mber 2012\)).15 E
3.137(Added ne)69.336 376 R 5.637(wf)-.25 G 3.137
(unctions \(some for libdw)-5.637 F 3.137
(arf client code\) and internal logic support for the D)-.1 F -1.2(WA)
-.3 G(RF4)1.2 E(.deb)69.336 388 Q 7.716(ug_types section.)-.2 F 7.716
(The ne)12.716 F 10.216(wf)-.25 G 7.716(unctions are dw)-10.216 F
(arf_ne)-.1 E 7.715(xt_cu_header_c\(\), dw)-.15 F(arf_siblingof_b\(\),)
-.1 E(dw)69.336 400 Q(arf_of)-.1 E 3.595(fdie_b\(\), dw)-.25 F
(arf_get_cu_die_of)-.1 E(fset_gi)-.25 E -.15(ve)-.25 G(n_cu_header_of)
.15 E 3.595(fset_b\(\), dw)-.25 F(arf_get_die_infotypes_flag\(\),)-.1 E
(dw)69.336 412 Q(arf_get_section_max_of)-.1 E(fsets_b\(\).)-.25 E(Ne)
69.336 430 Q 4.131(wf)-.25 G 1.631(unctions and logic support additiona\
l detailed error reporting so that more compiler b)-4.131 F 1.63
(ugs can be)-.2 F .702
(reported sensibly by consumer code \(as opposed to ha)69.336 442 R .703
(ving libdw)-.2 F .703(arf just assume things are ok and blindly)-.1 F
(continuing on with erroneous data\).)69.336 454 Q(No)5 E -.15(ve)-.15 G
(mber 20, 2010).15 E .21(It seems impossible to def)69.336 472 R .209
(ault to both D)-.1 F(W_FRAME_CF)-.3 E .209(A_COL and D)-.74 F
(W_FRAME_CF)-.3 E .209(A_COL3 in a single)-.74 F -.2(bu)69.336 484 S
1.506(ild of libdw).2 F 1.506(arf, so the def)-.1 F 1.507(ault is no)-.1
F 4.007(wu)-.25 G 1.507(nambiguously D)-4.007 F(W_FRAME_CF)-.3 E 1.507
(A_COL3 unless the conf)-.74 F(igure)-.2 E .241
(option --enable-oldframecol is specif)69.336 496 R .241(ied at conf)-.2
F .241(igure time.)-.2 F .241(The function dw)5.241 F(arf_set_frame_cf)
-.1 E(a_v)-.1 E .241(alue\(\) may)-.25 F 1.49(be used to o)69.336 508 R
-.15(ve)-.15 G 1.49(rride the def).15 F 1.491
(ault : using that function gi)-.1 F -.15(ve)-.25 G 3.991(sc).15 G 1.491
(onsumer applications full control \(its use is)-3.991 F
(highly recommended\).)69.336 520 Q(\(January 17,2010\))5 E 2.35
(Added dw)69.336 538 R 2.35(arf_set_reloc_application\(\) and the def)
-.1 F 2.35(ault automatic application of Elf ')-.1 F 2.35
(rela' relocations to)-.5 F -.3(DW)69.336 550 S 1.227
(ARF sections \(such rela sections appear in .o f)-.9 F 1.228
(iles, not in e)-.2 F -.15(xe)-.15 G 1.228
(cutables or shared objects, in general\).).15 F 4.575(The dw)69.336 562
R 2.074(arf_set_reloc_application\(\) routine lets a consumer turn of)
-.1 F 4.574(ft)-.25 G 2.074(he automatic application of ')-4.574 F
(rela')-.5 E 1.274(relocations if desired \(it is not clear wh)69.336
574 R 3.774(ya)-.05 G -.15(ny)-3.774 G 1.274(one w).15 F 1.274
(ould really w)-.1 F 1.274(ant to do that, b)-.1 F 1.274
(ut possibly a consumer)-.2 F .357(could write its o)69.336 586 R .357
(wn relocation application\).)-.25 F .357(An e)5.357 F .357
(xample application that tra)-.15 F -.15(ve)-.2 G .357
(rses a set of DIEs w).15 F .356(as added)-.1 F(to the ne)69.336 598 Q
2.5(wd)-.25 G -.1(wa)-2.5 G(rfe).1 E
(xample directory \(not in this libdw)-.15 E(arf directory)-.1 E 2.5(,b)
-.65 G(ut in parallel to it\).)-2.7 E(\(July 10, 2009\))5 E .695
(Added dw)69.336 616 R(arf_get_T)-.1 E -.4(AG)-.93 G .695
(_name\(\) \(and the FORM A).4 F 3.195(Ta)-1.11 G .695
(nd so on\) interf)-3.195 F .695(ace functions so applications can get)
-.1 F(the string of the T)69.336 628 Q -.4(AG)-.93 G 2.5(,A).4 G(ttrib)
-2.5 E(ute, etc as needed. \(June 2009\))-.2 E .907(Added dw)69.336 646
R .907(arf_get_ranges_a\(\) and dw)-.1 F(arf_loclist_from_e)-.1 E .907
(xpr_a\(\) functions which add ar)-.15 F .906(guments allo)-.18 F .906
(wing a)-.25 F .463(correct address_size when the address_size v)69.336
658 R .464(aries by compilation unit \(a v)-.25 F .464
(arying address_size is quite rare)-.25 F(as of May 2009\).)69.336 670 Q
(\(May 2009\))5 E 2.565(Added dw)69.336 688 R(arf_set_frame_same_v)-.1 E
2.565(alue\(\), and dw)-.25 F(arf_set_frame_undef)-.1 E(ined_v)-.2 E
2.565(alue\(\) to complete the set of)-.25 F 1.445
(frame-information functions needed to allo)69.336 700 R 3.945(wa)-.25 G
3.945(na)-3.945 G 1.445
(pplication get all frame information returned correctly)-3.945 F 1.951
(\(meaning that it can be correctly interpreted\) for all ABIs.)69.336
712 R 1.95(Documented dw)6.951 F(arf_set_frame_cf)-.1 E(a_v)-.1 E
(alue\(\).)-.25 E(Corrected spelling to dw)69.336 724 Q
(arf_set_frame_rule_initial_v)-.1 E 2.5(alue\(\). \(April)-.25 F
(2009\).)2.5 E .295(Added support for v)69.336 742 R .295(arious D)-.25
F -1.2(WA)-.3 G .295(RF3 features, b)1.2 F .295(ut primarily a ne)-.2 F
2.796(wf)-.25 G .296(rame-information interf)-2.796 F .296
(ace tailorable at)-.1 F(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)
-2.5 E 2.5(-3-)123.21 G 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4-)277.006 48 S 14.364
(run-time to more than a single ABI.)69.336 96 R 14.363(See dw)19.363 F
(arf_set_frame_rule_initial_v)-.1 E(alue\(\),)-.25 E(dw)69.336 108 Q
.252(arf_set_frame_rule_table_size\(\), dw)-.1 F(arf_set_frame_cf)-.1 E
(a_v)-.1 E 2.752(alue\(\). See)-.25 F .253(also dw)2.753 F
(arf_get_fde_info_for_re)-.1 E(g3\(\))-.15 E(and dw)69.336 120 Q
(arf_get_fde_info_for_cf)-.1 E(a_re)-.1 E 2.5(g3\(\). \(April)-.15 F
(2006\))2.5 E 1.323(Added support for D)69.336 138 R -1.2(WA)-.3 G 1.323
(RF3 .deb)1.2 F 1.323(ug_pubtypes section.)-.2 F 1.323(Corrected v)6.323
F 1.323(arious leaks \(re)-.25 F 1.322(vising dealloc\(\) calls,)-.25 F
(adding ne)69.336 150 Q 2.5(wf)-.25 G(unctions\) and corrected dw)-2.5 E
(arf_formstring\(\) documentation.)-.1 E 2.217(Added dw)69.336 168 R
2.217(arf_srclines_dealloc\(\) as the pre)-.1 F 2.217
(vious deallocation method documented for data returned by)-.25 F(dw)
69.336 180 Q(arf_srclines\(\) w)-.1 E
(as incapable of freeing all the allocated storage \(14 July 2005\).)-.1
E(dw)69.336 198 Q(arf_ne)-.1 E .56(xtglob\(\), dw)-.15 F .56
(arf_globname\(\), and dw)-.1 F .56
(arf_globdie\(\) were all changed to operate on the items in the)-.1 F
(.deb)69.336 210 Q(ug_pubnames section.)-.2 E 1.238
(All functions were modif)69.336 228 R 1.238
(ied to return solely an error code.)-.2 F 1.238
(Data is returned through pointer ar)6.238 F(guments.)-.18 E 1.043
(This mak)69.336 240 R 1.042
(es writing safe and correct library-using-code f)-.1 F 1.042(ar easier)
-.1 F 6.042(.F)-.55 G 1.042(or justif)-6.192 F 1.042
(ication for this approach, see)-.2 F
(the chapter titled "Candy Machine Interf)69.336 252 Q
(aces" in the book "Writing Solid Code" by Ste)-.1 E .3 -.15(ve M)-.25 H
(aguire.).15 E/F1 12/Times-Bold@0 SF 3(1.7 Items)69.336 286 R(Remo)3 E
-.12(ve)-.12 G(d).12 E F0(Dw)69.336 304 Q(arf_T)-.1 E(ype w)-.8 E
(as remo)-.1 E -.15(ve)-.15 G 2.5(ds).15 G
(ince types are no longer special.)-2.5 E(dw)69.336 322 Q
(arf_typeof\(\) w)-.1 E(as remo)-.1 E -.15(ve)-.15 G 2.5(ds).15 G
(ince types are no longer special.)-2.5 E(Dw)69.336 340 Q(arf_Ellist w)
-.1 E(as remo)-.1 E -.15(ve)-.15 G 2.5(ds).15 G
(ince element lists no longer are a special format.)-2.5 E(Dw)69.336 358
Q(arf_Bounds w)-.1 E(as remo)-.1 E -.15(ve)-.15 G 2.5(ds).15 G
(ince bounds ha)-2.5 E .3 -.15(ve b)-.2 H(een generalized.).15 E(dw)
69.336 376 Q(arf_ne)-.1 E 1.7(xtdie\(\) w)-.15 F 1.7(as replaced by dw)
-.1 F(arf_ne)-.1 E 1.7(xt_cu_header\(\) to reflect the real w)-.15 F 1.7
(ay D)-.1 F -1.2(WA)-.3 G 1.7(RF is or)1.2 F -.05(ga)-.18 G(nized.).05 E
.003(The dw)69.336 388 R(arf_ne)-.1 E .003(xtdie\(\) w)-.15 F .003
(as only useful for getting to compilation unit be)-.1 F .002
(ginnings, so it does not seem harmful)-.15 F(to remo)69.336 400 Q .3
-.15(ve i)-.15 H 2.5(ti).15 G 2.5(nf)-2.5 G -.2(avo)-2.6 G 2.5(ro).2 G
2.5(fam)-2.5 G(ore direct function.)-2.5 E(dw)69.336 418 Q
(arf_childcnt\(\) is remo)-.1 E -.15(ve)-.15 G 2.5(do).15 G 2.5(ng)-2.5
G(rounds that no good use w)-2.5 E(as apparent.)-.1 E(dw)69.336 436 Q
(arf_pre)-.1 E 1.509(vline\(\) and dw)-.25 F(arf_ne)-.1 E 1.509
(xtline\(\) were remo)-.15 F -.15(ve)-.15 G 4.009(do).15 G 4.009(ng)
-4.009 G 1.509(rounds this is better left to a deb)-4.009 F 1.51
(ugger to do.)-.2 F(Similarly)69.336 448 Q 2.5(,d)-.65 G -.1(wa)-2.5 G
(rf_dieline\(\) w).1 E(as remo)-.1 E -.15(ve)-.15 G(d.).15 E(dw)69.336
466 Q(arf_is1stline\(\) w)-.1 E(as remo)-.1 E -.15(ve)-.15 G 2.5(da).15
G 2.5(si)-2.5 G 2.5(tw)-2.5 G(as not meaningful for the re)-2.6 E
(vised D)-.25 E -1.2(WA)-.3 G(RF line operations.)1.2 E(An)69.336 484 Q
3.247(yl)-.15 G(ibdw)-3.247 E .747
(arf implementation might well decide to support all the remo)-.1 F -.15
(ve)-.15 G 3.246(df).15 G .746(unctionality and to retain the)-3.246 F
-.3(DW)69.336 496 S 1.219(ARF V)-.9 F 1.219
(ersion 1 meanings of that functionality)-1.11 F 6.219(.T)-.65 G 1.219
(his w)-6.219 F 1.219(ould be dif)-.1 F -.2(fi)-.25 G 1.22
(cult because the original libdw).2 F(arf)-.1 E 1.593(draft specif)
69.336 508 R 1.593(ication used traditional C library interf)-.2 F 1.592
(aces which confuse the v)-.1 F 1.592(alues returned by successful)-.25
F(calls with e)69.336 520 Q(xceptional conditions lik)-.15 E 2.5(ef)-.1
G(ailures and 'no more data' indications.)-2.6 E F1 3(1.8 Re)69.336 554
R(vision History)-.18 E F0(July 2014)69.336 572 Q 1.166
(Added support for the .gdb_inde)35.83 F 3.666(xs)-.15 G 1.167
(ection and started support for the .deb)-3.666 F(ug_cu_inde)-.2 E(x)
-.15 E(and .deb)144.336 584 Q(ug_tu_inde)-.2 E 2.5(xs)-.15 G(ections.)
-2.5 E(October 2011)69.336 602 Q -.3(DW)20.29 G
(ARF4 support for reading .deb)-.9 E(ug_types added.)-.2 E(March 93)
69.336 620 Q -.8(Wo)36.4 G(rk on D).8 E -1.2(WA)-.3 G(RF2 SGI draft be)
1.2 E(gins)-.15 E(June 94)69.336 638 Q
(The function returns are changed to return an error/success code only)
44.17 E(.)-.65 E(April 2006:)69.336 656 Q(Support for D)28.61 E -1.2(WA)
-.3 G(RF3 consumer operations is close to completion.)1.2 E(No)69.336
674 Q -.15(ve)-.15 G(mber 2010:).15 E(Added v)7.81 E(arious ne)-.25 E
2.5(wf)-.25 G(unctions and impro)-2.5 E -.15(ve)-.15 G 2.5(de).15 G
(rror checking.)-2.5 E F1 3(2. T)69.336 714 R(ypes Def)-.408 E(initions)
-.3 E F0(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-4-)
123.21 G 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5-)277.006 48 S/F1 12/Times-Bold@0 SF 3
(2.1 General)69.336 100 R(Description)3 E F0(The)69.336 118 Q/F2 10
/Times-Italic@0 SF(libdwarf)2.548 E(.h)-.15 E F0 .048(header f)2.548 F
.048(ile contains typedefs and preprocessor def)-.2 F .048
(initions of types and symbolic names used)-.2 F 2.845
(to reference objects of)69.336 130 R F2(libdwarf)5.345 E F0 5.345(.T)C
2.845(he types def)-5.345 F 2.845(ined by typedefs contained in)-.2 F F2
(libdwarf)5.346 E(.h)-.15 E F0 2.846(all use the)5.346 F(con)69.336 142
Q -.15(ve)-.4 G(ntion of adding).15 E/F3 10/Courier@0 SF(Dwarf_)2.5 E F0
(as a pref)2.5 E(ix and can be placed in three cate)-.2 E(gories:)-.15 E
/F4 8/Times-Roman@0 SF<83>86.536 172 Q F0 .287
(Scalar types : The scalar types def)5 F .286(ined in)-.2 F F2(libdwarf)
2.786 E(.h)-.15 E F0 .286(are def)2.786 F .286
(ined primarily for notational con)-.2 F -.15(ve)-.4 G(nience).15 E .548
(and identif)94.336 184 R 3.048(ication. Depending)-.2 F .548
(on the indi)3.048 F .548(vidual def)-.25 F .549(inition, the)-.2 F
3.049(ya)-.15 G .549(re interpreted as a v)-3.049 F .549
(alue, a pointer)-.25 F(,)-.4 E(or as a flag.)94.336 196 Q F4<83>86.536
214 Q F0(Aggre)5 E -.05(ga)-.15 G 2.737(te types : Some v).05 F 2.736
(alues can not be represented by a single scalar type; the)-.25 F 5.236
(ym)-.15 G 2.736(ust be)-5.236 F
(represented by a collection of, or as a union of, scalar and/or aggre)
94.336 226 Q -.05(ga)-.15 G(te types.).05 E F4<83>86.536 244 Q F0 .208
(Opaque types : The complete def)5 F .209(inition of these types is int\
entionally omitted; their use is as handles)-.2 F .188(for query operat\
ions, which will yield either an instance of another opaque type to be \
used in another)94.336 256 R(query)94.336 268 Q 2.5(,o)-.65 G 2.5(ra)
-2.5 G 2.5(ni)-2.5 G(nstance of a scalar or aggre)-2.5 E -.05(ga)-.15 G
(te type, which is the actual result.).05 E F1 3(2.2 Scalar)69.336 308 R
-.408(Ty)3 G(pes).408 E F0(The follo)69.336 326 Q(wing are the def)-.25
E(ined by)-.2 E F2(libdwarf)2.5 E(.h)-.15 E F0(:)A F3(typedef int)69.336
356 Q(Dwarf_Bool;)96 E(typedef unsigned long long Dwarf_Off;)69.336 368
Q(typedef unsigned long long Dwarf_Unsigned;)69.336 380 Q
(typedef unsigned short)69.336 392 Q(Dwarf_Half;)30 E
(typedef unsigned char)69.336 404 Q(Dwarf_Small;)36 E
(typedef signed long long)69.336 416 Q(Dwarf_Signed;)18 E
(typedef unsigned long long Dwarf_Addr;)69.336 428 Q(typedef void)69.336
440 Q(*Dwarf_Ptr;)84 E(typedef void)69.336 452 Q
(\(*Dwarf_Handler\)\(Dwarf_Error *error, Dwarf_Ptr errarg\);)18 E F0(Dw)
69.336 482 Q 3.215
(arf_Ptr is an address for use by the host program calling the library)
-.1 F 5.715(,n)-.65 G 3.215(ot for representing pc-)-5.715 F -.25(va)
69.336 494 S 1.417(lues/addresses within the tar).25 F 1.417
(get object f)-.18 F 3.917(ile. Dw)-.2 F 1.416(arf_Addr is for pc-v)-.1
F 1.416(alues within the tar)-.25 F 1.416(get object f)-.18 F(ile.)-.2 E
1.521(The sample scalar type assignments abo)69.336 506 R 1.821 -.15
(ve a)-.15 H 1.521(re for a).15 F F2(libdwarf)4.021 E(.h)-.15 E F0 1.521
(that can read and write 32-bit or 64-bit)4.021 F 3.707
(binaries on a 32-bit or 64-bit host machine.)69.336 518 R 3.707
(The types must be)8.707 F(def)8.706 E 3.706
(ined appropriately for each)-.2 F .732(implementation of libdw)69.336
530 R 3.232(arf. A)-.1 F .733
(description of these scalar types in the SGI/MIPS en)3.232 F .733
(vironment is gi)-.4 F -.15(ve)-.25 G 3.233(ni).15 G(n)-3.233 E
(Figure 1.)69.336 542 Q .4 LW 441.871 564.5 128.801 564.5 DL/F5 10
/Times-Bold@0 SF -.2(NA)133.801 574 S 50.92(ME SIZE).2 F 12.5
(ALIGNMENT PURPOSE)15 F 441.871 578.5 128.801 578.5 DL F0(Dw)133.801 588
Q 40.275(arf_Bool 4)-.1 F 43.89(4B)52.785 G(oolean states)-43.89 E(Dw)
133.801 600 Q(arf_Of)-.1 E -46.905 48.595(f8 8)-.25 H(Unsigned f)-4.705
E(ile of)-.2 E(fset)-.25 E(Dw)133.801 612 Q 21.395(arf_Unsigned 8)-.1 F
43.89(8U)52.785 G(nsigned lar)-43.89 E(ge inte)-.18 E(ger)-.15 E(Dw)
133.801 624 Q 41.955(arf_Half 2)-.1 F 43.89(2U)52.785 G
(nsigned medium inte)-43.89 E(ger)-.15 E(Dw)133.801 636 Q 36.385
(arf_Small 1)-.1 F 43.89(1U)52.785 G(nsigned small inte)-43.89 E(ger)
-.15 E(Dw)133.801 648 Q 31.945(arf_Signed 8)-.1 F 43.89(8S)52.785 G
(igned lar)-43.89 E(ge inte)-.18 E(ger)-.15 E(Dw)133.801 660 Q 39.175
(arf_Addr 8)-.1 F 43.89(8P)52.785 G(rogram address)-43.89 E(\(tar)
333.141 672 Q(get program\))-.18 E(Dw)133.801 684 Q 44.555(arf_Ptr 4|8)
-.1 F 37.89(4|8 Dw)45.785 F(arf section pointer)-.1 E(\(host program\))
333.141 696 Q(Dw)133.801 708 Q 24.015(arf_Handler 4|8)-.1 F 37.89
(4|8 Pointer)45.785 F(to)2.5 E(error handler function)333.141 720 Q
441.871 724.5 128.801 724.5 DL 441.871 564.5 441.871 724.5 DL 128.801
564.5 128.801 724.5 DL F5(Figur)238.196 738 Q 2.5(e1)-.18 G(.)-2.5 E F0
(Scalar T)5 E(ypes)-.8 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)
-2.5 E 2.5(-5-)123.21 G 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6-)277.006 48 S/F1 12/Times-Bold@0 SF 3
(2.3 Aggr)69.336 100 R(egate T)-.216 E(ypes)-.408 E F0 6.945(The follo)
69.336 118 R 6.945(wing aggre)-.25 F -.05(ga)-.15 G 6.945
(te types are def).05 F 6.944(ined by)-.2 F/F2 10/Times-Italic@0 SF
(libdwarf)9.444 E(.h)-.15 E F0(:)A/F3 10/Courier@0 SF(Dwarf_Loc)9.444 E
F0(,)A F3(Dwarf_Locdesc)9.444 E F0(,)A F3(Dwarf_Block)69.336 130 Q F0(,)
A F3(Dwarf_Frame_Op)6.38 E F0(.)A F3(Dwarf_Regtable)8.88 E F0(.)A F3
(Dwarf_Regtable3)8.88 E F0 8.88(.W)C 3.88(hile most of)-8.88 F F3
(libdwarf)69.336 142 Q F0 1.397(acts on or returns simple v)3.897 F
1.397(alues or opaque pointer types, this small set of structures seems)
-.25 F(useful.)69.336 154 Q/F4 11/Times-Bold@0 SF 2.75(2.3.1 Location)
69.336 187 R(Record)2.75 E F0(The)69.336 205 Q F3(Dwarf_Loc)2.5 E F0
(type identif)2.5 E
(ies a single atom of a location description or a location e)-.2 E
(xpression.)-.15 E F3(typedef struct {)69.336 235 Q 42
(Dwarf_Small lr_atom;)117.336 247 R 24(Dwarf_Unsigned lr_number;)117.336
259 R 24(Dwarf_Unsigned lr_number2;)117.336 271 R 24
(Dwarf_Unsigned lr_offset;)117.336 283 R 6(}D)69.336 295 S(warf_Loc;)-6
E F0(The)69.336 325 Q F3(lr_atom)3.45 E F0(identif)3.45 E .95
(ies the atom corresponding to the)-.2 F F3(DW_OP_*)3.45 E F0(def)3.45 E
.95(inition in)-.2 F F2(dwarf)3.45 E(.h)-.15 E F0 .95(and it represents)
3.45 F
(the operation to be performed in order to locate the item in question.)
69.336 337 Q(The)69.336 367 Q F3(lr_number)2.777 E F0 -.2(fi)2.777 G
.277(eld is the operand to be used in the calculation specif).2 F .276
(ied by the)-.2 F F3(lr_atom)2.776 E F0 -.2(fi)2.776 G .276
(eld; not all).2 F 1.882(atoms use this f)69.336 379 R 4.382(ield. Some)
-.2 F 1.882(atom operations imply signed numbers so it is necessary to \
cast this to a)4.382 F F3(Dwarf_Signed)69.336 391 Q F0
(type for those operations.)2.5 E(The)69.336 421 Q F3(lr_number2)2.951 E
F0 -.2(fi)2.951 G .451(eld is the second operand specif).2 F .451
(ied by the)-.2 F F3(lr_atom)2.951 E F0 -.2(fi)2.95 G .45(eld; only).2 F
F3(DW_OP_BREGX)2.95 E F0(has)2.95 E 3.153(this f)69.336 433 R 5.653
(ield. Some)-.2 F 3.154(atom operations imply signed numbers so it may \
be necessary to cast this to a)5.653 F F3(Dwarf_Signed)69.336 445 Q F0
(type for those operations.)2.5 E -.15(Fo)69.336 463 S 3.01(ra).15 G F3
(DW_OP_implicit_value)A F0 .51(operator the)3.01 F F3(lr_number2)3.01 E
F0 -.2(fi)3.009 G .509(eld is a pointer to the bytes of the v).2 F
(alue.)-.25 E .632(The f)69.336 475 R .632(ield pointed to is)-.2 F F3
(lr_number)3.132 E F0 .632(bytes long.)3.132 F .632(There is no e)5.632
F .633(xplicit terminator)-.15 F 5.633(.D)-.55 G 3.133(on)-5.633 G .633
(ot attempt to)-3.133 F F3(free)3.133 E F0 .738(the bytes which)69.336
487 R F3(lr_number2)3.237 E F0 .737
(points at and do not alter those bytes. The pointer v)3.237 F .737
(alue remains v)-.25 F .737(alid till)-.25 F 1.069(the open Dw)69.336
499 R(arf_Deb)-.1 E 1.069(ug is closed.)-.2 F 1.069
(This is a rather ugly use of a host inte)6.069 F 1.069
(ger to hold a pointer)-.15 F 6.069(.Y)-.55 G 1.069(ou will)-7.169 F
(normally ha)69.336 511 Q .3 -.15(ve t)-.2 H 2.5(od).15 G 2.5(oa')-2.5 G
(cast' operation to use the v)-2.5 E(alue.)-.25 E -.15(Fo)69.336 529 S
3.048(ra).15 G F3(DW_OP_GNU_const_type)A F0 .548(operator the)3.048 F F3
(lr_number2)3.048 E F0 -.2(fi)3.047 G .547
(eld is a pointer to a block with an initial).2 F 1.665
(unsigned byte gi)69.336 541 R 1.665(ving the number of bytes follo)-.25
F 1.665(wing, follo)-.25 F 1.665(wed immediately that number of const v)
-.25 F(alue)-.25 E 3.358(bytes. There)69.336 553 R .858(is no e)3.358 F
.858(xplicit terminator)-.15 F 5.858(.D)-.55 G 3.358(on)-5.858 G .858
(ot attempt to)-3.358 F F3(free)3.357 E F0 .857(the bytes which)3.357 F
F3(lr_number2)3.357 E F0 .857(points at)3.357 F .121
(and do not alter those bytes. The pointer v)69.336 565 R .121
(alue remains v)-.25 F .121(alid till the open Dw)-.25 F(arf_Deb)-.1 E
.121(ug is closed.)-.2 F .121(This is a)5.121 F .04
(rather ugly use of a host inte)69.336 577 R .04(ger to hold a pointer)
-.15 F 5.04(.Y)-.55 G .04(ou will normally ha)-6.14 F .34 -.15(ve t)-.2
H 2.54(od).15 G 2.54(oa')-2.54 G .04(cast' operation to use the)-2.54 F
-.25(va)69.336 589 S(lue.).25 E(The)69.336 607 Q F3(lr_offset)3.997 E F0
-.2(fi)3.997 G 1.497(eld is the byte of).2 F 1.498
(fset \(within the block the location record came from\) of the atom)
-.25 F(specif)69.336 619 Q .303(ied by the)-.2 F F3(lr_atom)2.803 E F0
-.2(fi)2.803 G 2.803(eld. This).2 F .303(is set on all atoms.)2.803 F
.303(This is useful for operations)5.303 F F3(DW_OP_SKIP)2.803 E F0(and)
2.802 E F3(DW_OP_BRA)69.336 631 Q F0(.)A F4 2.75(2.3.2 Location)69.336
664 R(Description)2.75 E F0(The)69.336 682 Q F3(Dwarf_Locdesc)3.337 E F0
.838(type represents an ordered list of)3.337 F F3(Dwarf_Loc)3.338 E F0
.838(records used in the calculation to)3.338 F .942(locate an item.)
69.336 694 R .942(Note that in man)5.942 F 3.442(yc)-.15 G .941
(ases, the location can only be calculated at runtime of the associated)
-3.442 F(program.)69.336 706 Q(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-6-)123.21 G 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7-)277.006 48 S/F1 10/Courier@0 SF
(typedef struct {)69.336 96 Q 42(Dwarf_Addr ld_lopc;)117.336 108 R 42
(Dwarf_Addr ld_hipc;)117.336 120 R 18(Dwarf_Unsigned ld_cents;)117.336
132 R 42(Dwarf_Loc* ld_s;)117.336 144 R 6(}D)69.336 156 S(warf_Locdesc;)
-6 E F0(The)69.336 186 Q F1(ld_lopc)3.484 E F0(and)3.484 E F1(ld_hipc)
3.484 E F0 -.2(fi)3.484 G .984(elds pro).2 F .985
(vide an address range for which this location descriptor is v)-.15 F
(alid.)-.25 E .709(Both of these f)69.336 198 R .709(ields are set to)
-.2 F/F2 10/Times-Italic@0 SF(zer)3.209 E(o)-.45 E F0 .709
(if the location descriptor is v)3.209 F .708
(alid throughout the scope of the item it is)-.25 F 1.12
(associated with.)69.336 210 R 1.121
(These addresses are virtual memory addresses, not of)6.121 F 3.621
(fsets-from-something. The)-.25 F(virtual)3.621 E .011
(memory addresses do not account for dso mo)69.336 222 R -.15(ve)-.15 G
.011(ment \(none of the pc v).15 F .01(alues from libdw)-.25 F .01
(arf do that, it is up to)-.1 F(the consumer to do that\).)69.336 234 Q
(The)69.336 264 Q F1(ld_cents)2.5 E F0 -.2(fi)2.5 G
(eld contains a count of the number of).2 E F1(Dwarf_Loc)2.5 E F0
(entries pointed to by the)2.5 E F1(ld_s)2.5 E F0 -.2(fi)2.5 G(eld.).2 E
(The)69.336 294 Q F1(ld_s)2.5 E F0 -.2(fi)2.5 G
(eld points to an array of).2 E F1(Dwarf_Loc)2.5 E F0(records.)2.5 E/F3
11/Times-Bold@0 SF 2.75(2.3.3 Data)69.336 327 R(Block)2.75 E F0(The)
69.336 351 Q F1(Dwarf_Block)7.47 E F0 4.97
(type is used to contain the v)7.47 F 4.97(alue of an attrib)-.25 F 4.97
(ute whose form is either)-.2 F F1(DW_FORM_block1)69.336 363 Q F0(,)A F1
(DW_FORM_block2)19.418 E F0(,)A F1(DW_FORM_block4)19.418 E F0(,)A F1
(DW_FORM_block8)19.417 E F0 19.417(,o)C(r)-19.417 E F1(DW_FORM_block)
69.336 375 Q F0 5(.I)C(ts intended use is to deli)-5 E -.15(ve)-.25 G
2.5(rt).15 G(he v)-2.5 E(alue for an attrib)-.25 E(ute of an)-.2 E 2.5
(yo)-.15 G 2.5(ft)-2.5 G(hese forms.)-2.5 E F1(typedef struct {)69.336
405 Q 24(Dwarf_Unsigned bl_len;)117.336 417 R 54(Dwarf_Ptr bl_data;)
117.336 429 R 6(}D)69.336 441 S(warf_Block;)-6 E F0(The)69.336 477 Q F1
(bl_len)2.5 E F0 -.2(fi)2.5 G
(eld contains the length in bytes of the data pointed to by the).2 E F1
(bl_data)2.5 E F0 -.2(fi)2.5 G(eld.).2 E(The)69.336 507 Q F1(bl_data)
3.465 E F0 -.2(fi)3.465 G .965
(eld contains a pointer to the uninterpreted data.).2 F .965
(Since we use)5.965 F(a)5.965 E F1(Dwarf_Ptr)3.465 E F0 .965(here one)
3.465 F .089(must cop)69.336 519 R 2.589(yt)-.1 G .089
(he pointer to some other type \(typically an)-2.589 F F1 .088
(unsigned char *)2.588 F F0 2.588(\)s)C 2.588(oo)-2.588 G .088
(ne can add increments to)-2.588 F(inde)69.336 531 Q 2.5(xt)-.15 G
(hrough the data.)-2.5 E(The data pointed to by)5 E F1(bl_data)2.5 E F0
(is not necessarily at an)2.5 E 2.5(yu)-.15 G(seful alignment.)-2.5 E F3
2.75(2.3.4 Frame)69.336 564 R(Operation Codes: D)2.75 E -1.32(WA)-.44 G
(RF 2)1.32 E F0 1.003(This interf)69.336 582 R 1.003
(ace is adequate for D)-.1 F -1.2(WA)-.3 G 1.003(RF2 b)1.2 F 1.003
(ut not for D)-.2 F -1.2(WA)-.3 G 3.503(RF3. A)1.2 F 1.004
(separate interf)3.504 F 1.004(ace usable for D)-.1 F -1.2(WA)-.3 G(RF3)
1.2 E 1.451(and for D)69.336 594 R -1.2(WA)-.3 G 1.451
(RF2 is described belo)1.2 F 5.251 -.65(w. T)-.25 H 1.451(his interf).65
F 1.451(ace is deprecated. Use the interf)-.1 F 1.45(ace for D)-.1 F
-1.2(WA)-.3 G 1.45(RF3 and)1.2 F -.3(DW)69.336 606 S 2.5(ARF2. See)-.9 F
(also the section "Lo)2.5 E 2.5(wL)-.25 G -2.15 -.25(ev e)-2.5 H 2.5(lF)
.25 G(rame Operations" belo)-2.5 E -.65(w.)-.25 G .075(The D)69.336 624
R -1.2(WA)-.3 G(RF2)1.2 E F1(Dwarf_Frame_Op)2.575 E F0 .075(type is use\
d to contain the data of a single instruction of an instruction-)2.575 F
.786(sequence of lo)69.336 636 R(w-le)-.25 E -.15(ve)-.25 G 3.286(li).15
G .785(nformation from the section containing frame information.)-3.286
F .785(This is ordinarily used)5.785 F(by Internal-le)69.336 648 Q -.15
(ve)-.25 G 2.5(lC).15 G(onsumers trying to print e)-2.5 E -.15(ve)-.25 G
(rything in detail.).15 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-7-)123.21 G 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8-)277.006 48 S/F1 10/Courier@0 SF
(typedef struct {)69.336 96 Q 6(Dwarf_Small fp_base_op;)117.336 108 R 6
(Dwarf_Small fp_extended_op;)117.336 120 R 12(Dwarf_Half fp_register;)
117.336 132 R(Dwarf_Signed fp_offset;)117.336 144 Q
(Dwarf_Offset fp_instr_offset;)117.336 156 Q 6(}D)69.336 168 S
(warf_Frame_Op;)-6 E(fp_base_op)69.336 198 Q F0 3.941
(is the 2-bit basic op code.)6.441 F F1(fp_extended_op)8.942 E F0 3.942
(is the 6-bit e)6.442 F 3.942(xtended opcode \(if)-.15 F F1(fp_base_op)
69.336 210 Q F0(indicated there w)2.5 E(as an e)-.1 E
(xtended op code\) and is zero otherwise.)-.15 E F1(fp_register)69.336
228 Q F0 2.183(is an)4.683 F 4.682(y\()-.15 G 2.182(or the f)-4.682 F
2.182(irst\) re)-.2 F 2.182(gister v)-.15 F 2.182(alue as def)-.25 F
2.182(ined in the)-.2 F F1 2.182(Call Frame Instruction)4.682 F
(Encodings)69.336 240 Q F0 -.2(fi)2.5 G(gure in the).2 E F1(dwarf)2.5 E
F0 2.5(document. If)2.5 F(not used with the Op it is 0.)2.5 E F1
(fp_offset)69.336 258 Q F0 4.507(is the address, delta, of)7.007 F 4.507
(fset, or second re)-.25 F 4.507(gister as def)-.15 F 4.507(ined in the)
-.2 F F1 4.508(Call Frame)7.008 F 1.808(Instruction Encodings)69.336 270
R F0 -.2(fi)4.308 G 1.808(gure in the).2 F F1(dwarf)4.308 E F0 4.308
(document. If)4.308 F 1.808(this is an)4.308 F F1(address)4.308 E F0
1.807(then the v)4.308 F(alue)-.25 E .278(should be cast to)69.336 282 R
F1(\(Dwarf_Addr\))2.778 E F0 .279(before being used.)2.779 F .279(In an)
5.279 F 2.779(yi)-.15 G .279(mplementation this f)-2.779 F .279
(ield *must* be as lar)-.2 F(ge)-.18 E(as the lar)69.336 294 Q
(ger of Dw)-.18 E(arf_Signed and Dw)-.1 E(arf_Addr for this to w)-.1 E
(ork properly)-.1 E 5(.I)-.65 G 2.5(fn)-5 G
(ot used with the op it is 0.)-2.5 E F1(fp_instr_offset)69.336 312 Q F0
1.437(is the byte_of)3.937 F 1.436(fset \(within the instruction stream\
 of the frame instructions\) of this)-.25 F 2.5(operation. It)69.336 324
R(starts at 0 for a gi)2.5 E -.15(ve)-.25 G 2.5(nf).15 G
(rame descriptor)-2.5 E(.)-.55 E/F2 11/Times-Bold@0 SF 2.75(2.3.5 Frame)
69.336 357 R(Regtable: D)2.75 E -1.32(WA)-.44 G(RF 2)1.32 E F0 .031
(This interf)69.336 375 R .032(ace is adequate for D)-.1 F -1.2(WA)-.3 G
.032(RF2 and MIPS b)1.2 F .032(ut not for D)-.2 F -1.2(WA)-.3 G 2.532
(RF3. A)1.2 F .032(separate and preferred interf)2.532 F(ace)-.1 E 2.484
(usable for D)69.336 387 R -1.2(WA)-.3 G 2.484(RF3 and for D)1.2 F -1.2
(WA)-.3 G 2.484(RF2 is described belo)1.2 F 6.284 -.65(w. S)-.25 H 2.484
(ee also the section "Lo).65 F 4.984(wL)-.25 G -2.15 -.25(ev e)-4.984 H
4.984(lF).25 G(rame)-4.984 E(Operations" belo)69.336 399 Q -.65(w.)-.25
G(The)69.336 417 Q F1(Dwarf_Regtable)2.968 E F0 .468
(type is used to contain the re)2.968 F(gister)-.15 E .468
(-restore information for all re)-.2 F .468(gisters at a gi)-.15 F -.15
(ve)-.25 G(n).15 E 2.589(PC v)69.336 429 R 5.089(alue. Normally)-.25 F
2.589(used by deb)5.089 F 5.089(uggers. If)-.2 F 2.588(you wish to def)
5.088 F 2.588(ault to this interf)-.1 F 2.588(ace and to the use of)-.1
F -.3(DW)69.336 441 S(_FRAME_CF).3 E 3.925
(A_COL, specify --enable_oldframecol at libdw)-.74 F 3.925(arf conf)-.1
F 3.925(igure time.)-.2 F 3.925(Or add a call)8.925 F(dw)69.336 453 Q
(arf_set_frame_cf)-.1 E(a_v)-.1 E(alue\(dbg,D)-.25 E(W_FRAME_CF)-.3 E
1.599(A_COL\) after your dw)-.74 F 1.598
(arf_init\(\) call, this call replaces)-.1 F(the def)69.336 465 Q
(ault libdw)-.1 E(arf-compile-time v)-.1 E(alue with D)-.25 E
(W_FRAME_CF)-.3 E(A_COL.)-.74 E(/* D)69.336 483 Q(W_REG_T)-.3 E
(ABLE_SIZE must reflect the number of re)-.93 E(gisters)-.15 E(*\(D)
71.836 495 Q(W_FRAME_LAST_REG_NUM\) as def)-.3 E(ined in dw)-.2 E(arf.h)
-.1 E(*/)71.836 507 Q(#def)69.336 519 Q(ine D)-.2 E(W_REG_T)-.3 E 2.5
(ABLE_SIZE <f)-.93 F(ill in size here, 66 for MIPS/IRIX>)-.2 E F1
(typedef struct {)69.336 531 Q(struct {)93.336 543 Q 48
(Dwarf_Small dw_offset_relevant;)117.336 555 R 54(Dwarf_Half dw_regnum;)
117.336 567 R 54(Dwarf_Addr dw_offset;)117.336 579 R 138(}r)93.336 591 S
(ules[DW_REG_TABLE_SIZE];)-138 E 6(}D)69.336 603 S(warf_Regtable;)-6 E
F0 .192(The array is inde)69.336 621 R -.15(xe)-.15 G 2.692(db).15 G
2.692(yr)-2.692 G -.15(eg)-2.692 G .192(ister number).15 F 5.192(.T)-.55
G .192(he f)-5.192 F .192(ield v)-.2 F .192(alues for each inde)-.25 F
2.692(xa)-.15 G .192(re described ne)-2.692 F 2.693(xt. F)-.15 F .193
(or clarity we)-.15 F(describe the f)69.336 633 Q(ield v)-.2 E
(alues for inde)-.25 E 2.5(xr)-.15 G(ules[M] \(M being an)-2.5 E 2.5(yl)
-.15 G -2.25 -.15(eg a)-2.5 H 2.5(la).15 G(rray element inde)-2.5 E
(x\).)-.15 E F1(dw_offset_relevant)69.336 651 Q F0 1.344
(is non-zero to indicate the)3.844 F F1(dw_offset)3.844 E F0 -.2(fi)
3.844 G 1.344(eld is meaningful. If zero then the).2 F F1(dw_offset)
69.336 663 Q F0(is zero and should be ignored.)2.5 E F1(dw_regnum)69.336
681 Q F0 1.924(is the re)7.924 F 1.924(gister number applicable.)-.15 F
(If)6.925 E F1(dw_offset_relevant)4.425 E F0 1.925
(is zero, then this is the)4.425 F(re)69.336 693 Q 1.095
(gister number of the re)-.15 F 1.094(gister containing the v)-.15 F
1.094(alue for re)-.25 F 1.094(gister M.)-.15 F(If)6.094 E F1
(dw_offset_relevant)3.594 E F0 1.094(is non-)3.594 F .466
(zero, then this is the re)69.336 705 R .467(gister number of the re)
-.15 F .467(gister to use as a base \(M may be D)-.15 F(W_FRAME_CF)-.3 E
(A_COL,)-.74 E .4(for e)69.336 717 R .4(xample\) and the)-.15 F F1
(dw_offset)2.9 E F0 -.25(va)2.9 G .4(lue applies.).25 F .4(The v)5.4 F
.4(alue of re)-.25 F .4(gister M is therefore the v)-.15 F .4
(alue of re)-.25 F(gister)-.15 E F1(dw_regnum)69.336 729 Q F0(.)A(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8-)123.21 G 0 Cg
EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9-)277.006 48 S/F1 10/Courier@0 SF
(dw_offset)69.336 96 Q F0 .108(should be ignored if)2.608 F F1
(dw_offset_relevant)2.608 E F0 .108(is zero.)2.608 F(If)5.108 E F1
(dw_offset_relevant)2.608 E F0 .109(is non-)2.609 F .408
(zero, then the consumer code should add the v)69.336 108 R .408
(alue to the v)-.25 F .408(alue of the re)-.25 F(gister)-.15 E F1
(dw_regnum)2.907 E F0 .407(to produce the)2.907 F -.25(va)69.336 120 S
(lue.).25 E/F2 11/Times-Bold@0 SF 2.75(2.3.6 Frame)69.336 153 R
(Operation Codes: D)2.75 E -1.32(WA)-.44 G(RF 3 \(and D)1.32 E -1.32(WA)
-.44 G(RF2\))1.32 E F0 .723(This interf)69.336 171 R .723
(ace is adequate for D)-.1 F -1.2(WA)-.3 G .723(RF3 and for D)1.2 F -1.2
(WA)-.3 G .724(RF2 \(and D)1.2 F -1.2(WA)-.3 G 3.224(RF4\). It)1.2 F
.724(is ne)3.224 F 3.224(wi)-.25 G 3.224(nl)-3.224 G(ibdw)-3.224 E .724
(arf in April)-.1 F 2.5(2006. See)69.336 183 R(also the section "Lo)2.5
E 2.5(wL)-.25 G -2.15 -.25(ev e)-2.5 H 2.5(lF).25 G
(rame Operations" belo)-2.5 E -.65(w.)-.25 G 2.921(The D)69.336 201 R
-1.2(WA)-.3 G(RF2)1.2 E F1(Dwarf_Frame_Op3)5.421 E F0 2.921
(type is used to contain the data of a single instruction of an)5.421 F
2.442(instruction-sequence of lo)69.336 213 R(w-le)-.25 E -.15(ve)-.25 G
4.942(li).15 G 2.443
(nformation from the section containing frame information.)-4.942 F
2.443(This is)7.443 F(ordinarily used by Internal-le)69.336 225 Q -.15
(ve)-.25 G 2.5(lC).15 G(onsumers trying to print e)-2.5 E -.15(ve)-.25 G
(rything in detail.).15 E F1(typedef struct {)69.336 255 Q 24
(Dwarf_Small fp_base_op;)117.336 267 R 24(Dwarf_Small fp_extended_op;)
117.336 279 R 30(Dwarf_Half fp_register;)117.336 291 R
(/* Value may be signed, depends on op.)117.336 315 Q
(Any applicable data_alignment_factor has)135.336 327 Q
(not been applied, this is the)135.336 339 Q(raw offset. */)12 E 6
(Dwarf_Unsigned fp_offset_or_block_len;)117.336 351 R 24
(Dwarf_Small *fp_expr_block;)117.336 363 R 36
(Dwarf_Off fp_instr_offset;)117.336 387 R 6(}D)69.336 399 S
(warf_Frame_Op3;)-6 E(fp_base_op)69.336 429 Q F0 3.942
(is the 2-bit basic op code.)6.442 F F1(fp_extended_op)8.942 E F0 3.941
(is the 6-bit e)6.441 F 3.941(xtended opcode \(if)-.15 F F1(fp_base_op)
69.336 441 Q F0(indicated there w)2.5 E(as an e)-.1 E
(xtended op code\) and is zero otherwise.)-.15 E F1(fp_register)69.336
459 Q F0 2.182(is an)4.682 F 4.682(y\()-.15 G 2.182(or the f)-4.682 F
2.182(irst\) re)-.2 F 2.182(gister v)-.15 F 2.182(alue as def)-.25 F
2.182(ined in the)-.2 F F1 2.183(Call Frame Instruction)4.682 F
(Encodings)69.336 471 Q F0 -.2(fi)2.5 G(gure in the).2 E F1(dwarf)2.5 E
F0 2.5(document. If)2.5 F(not used with the Op it is 0.)2.5 E F1
(fp_offset_or_block_len)69.336 489 Q F0 1.623(is the address, delta, of)
4.124 F 1.623(fset, or second re)-.25 F 1.623(gister as def)-.15 F 1.623
(ined in the)-.2 F F1(Call)4.123 E .81(Frame Instruction Encodings)
69.336 501 R F0 -.2(fi)3.31 G .81(gure in the).2 F F1(dwarf)3.31 E F0
.81(document. Or \(depending on the op, it may)3.31 F .387
(be the length of the dw)69.336 513 R(arf-e)-.1 E .386
(xpression block pointed to by)-.15 F F1(fp_expr_block)2.886 E F0 5.386
(.I)C 2.886(ft)-5.386 G .386(his is an)-2.886 F F1(address)2.886 E F0
(then)2.886 E .727(the v)69.336 525 R .727(alue should be cast to)-.25 F
F1(\(Dwarf_Addr\))3.227 E F0 .727(before being used.)3.227 F .728(In an)
5.727 F 3.228(yi)-.15 G .728(mplementation this f)-3.228 F .728
(ield *must*)-.2 F .575(be as lar)69.336 537 R .575(ge as the lar)-.18 F
.574(ger of Dw)-.18 F .574(arf_Signed and Dw)-.1 F .574
(arf_Addr for this to w)-.1 F .574(ork properly)-.1 F 5.574(.I)-.65 G
3.074(fn)-5.574 G .574(ot used with the)-3.074 F(op it is 0.)69.336 549
Q F1(fp_expr_block)69.336 567 Q F0 6.747
(\(if applicable to the op\) points to a dw)9.246 F(arf-e)-.1 E 6.747
(xpression block which is)-.15 F F1(fp_offset_or_block_len)69.336 579 Q
F0(bytes long.)2.5 E F1(fp_instr_offset)69.336 597 Q F0 1.437
(is the byte_of)3.937 F 1.436(fset \(within the instruction stream of t\
he frame instructions\) of this)-.25 F 2.5(operation. It)69.336 609 R
(starts at 0 for a gi)2.5 E -.15(ve)-.25 G 2.5(nf).15 G(rame descriptor)
-2.5 E(.)-.55 E F2 2.75(2.3.7 Frame)69.336 642 R(Regtable: D)2.75 E
-1.32(WA)-.44 G(RF 3)1.32 E F0 1.171(This interf)69.336 660 R 1.171
(ace is adequate for D)-.1 F -1.2(WA)-.3 G 1.171(RF3 and for D)1.2 F
-1.2(WA)-.3 G 3.671(RF2. It)1.2 F 1.171(is ne)3.671 F 3.671(wi)-.25 G
3.671(nl)-3.671 G(ibdw)-3.671 E 1.171(arf as of April 2006.)-.1 F(The)
6.172 E(def)69.336 672 Q .548(ault conf)-.1 F .548(igure of libdw)-.2 F
.548(arf inserts D)-.1 F(W_FRAME_CF)-.3 E .548(A_COL3 as the def)-.74 F
.548(ault CF)-.1 F 3.048(Ac)-.74 G 3.048(olumn. Or)-3.048 F .547
(add a call)3.048 F(dw)69.336 684 Q(arf_set_frame_cf)-.1 E(a_v)-.1 E
(alue\(dbg,D)-.25 E(W_FRAME_CF)-.3 E .884(A_COL3\) after your dw)-.74 F
.884(arf_init\(\) call, this call replaces)-.1 F(the def)69.336 696 Q
(ault libdw)-.1 E(arf-compile-time v)-.1 E(alue with D)-.25 E
(W_FRAME_CF)-.3 E(A_COL3.)-.74 E(The)69.336 714 Q F1(Dwarf_Regtable3)
2.568 E F0 .068(type is used to contain the re)2.568 F(gister)-.15 E
.068(-restore information for all re)-.2 F .068(gisters at a gi)-.15 F
-.15(ve)-.25 G(n).15 E(PC v)69.336 726 Q 2.5(alue. Normally)-.25 F
(used by deb)2.5 E(uggers.)-.2 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-9-)123.21 G 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(0-)-2.5 G/F1 10
/Courier@0 SF(typedef struct Dwarf_Regtable_Entry3_s {)69.336 96 Q 48
(Dwarf_Small dw_offset_relevant;)117.336 108 R 48
(Dwarf_Small dw_value_type;)117.336 120 R 54(Dwarf_Half dw_regnum;)
117.336 132 R 30(Dwarf_Unsigned dw_offset_or_block_len;)117.336 144 R 60
(Dwarf_Ptr dw_block_ptr;)117.336 156 R(}Dwarf_Regtable_Entry3;)69.336
168 Q(typedef struct Dwarf_Regtable3_s {)69.336 192 Q
(struct Dwarf_Regtable_Entry3_s)93.336 204 Q(rt3_cfa_rule;)18 E 132
(Dwarf_Half rt3_reg_table_size;)93.336 228 R
(struct Dwarf_Regtable_Entry3_s * rt3_rules;)93.336 240 Q 6(}D)69.336
252 S(warf_Regtable3;)-6 E F0 .192(The array is inde)69.336 282 R -.15
(xe)-.15 G 2.692(db).15 G 2.692(yr)-2.692 G -.15(eg)-2.692 G .192
(ister number).15 F 5.192(.T)-.55 G .192(he f)-5.192 F .192(ield v)-.2 F
.192(alues for each inde)-.25 F 2.692(xa)-.15 G .192(re described ne)
-2.692 F 2.693(xt. F)-.15 F .193(or clarity we)-.15 F 7.211
(describe the f)69.336 294 R 7.211(ield v)-.2 F 7.211(alues for inde)
-.25 F 9.711(xr)-.15 G 7.211(ules[M] \(M being an)-9.711 F 9.711(yl)-.15
G -2.25 -.15(eg a)-9.711 H 9.71(la).15 G 7.21(rray element inde)-9.71 F
(x\).)-.15 E(\(D)69.336 306 Q(W_FRAME_CF)-.3 E 2.982(A_COL3 D)-.74 F
(W_FRAME_SAME_V)-.3 E .482(AL, D)-1.35 F(W_FRAME_UNDEFINED_V)-.3 E .482
(AL are not le)-1.35 F -.05(ga)-.15 G(l).05 E .482(array inde)69.336 318
R -.15(xe)-.15 G .482(s, nor is an).15 F 2.982(yi)-.15 G(nde)-2.982 E
2.982(x<0o)-.15 G 2.982(r>)-2.982 G 2.982(=r)-2.982 G(t3_re)-2.982 E
.482(g_table_size\); The caller)-.15 F .481
(of routines using this struct must)5.481 F 2.981
(create data space for rt3_re)69.336 330 R 2.982
(g_table_size entries of struct Dw)-.15 F(arf_Re)-.1 E 2.982
(gtable_Entry3_s and arrange that)-.15 F 1.269
(rt3_rules points to that space and that rt3_re)69.336 342 R 1.269
(g_table_size is set correctly)-.15 F 6.269(.T)-.65 G 1.268
(he caller need not \(b)-6.269 F 1.268(ut may\))-.2 F .088
(initialize the contents of the rt3_cf)69.336 354 R .089
(a_rule or the rt3_rules array)-.1 F 5.089(.T)-.65 G .089(he follo)
-5.089 F .089(wing applies to each rt3_rules rule)-.25 F(M:)69.336 366 Q
F1(dw_regnum)109.336 384 Q F0 15.662(is the re)18.162 F 15.661
(gister number applicable.)-.15 F(If)20.661 E F1(dw_regnum)18.161 E F0
(is)18.161 E -.3(DW)109.336 396 S(_FRAME_UNDEFINED_V).3 E 1.281
(AL, then the re)-1.35 F 1.281(gister I has undef)-.15 F 1.281(ined v)
-.2 F 3.781(alue. If)-.25 F F1(dw_regnum)3.781 E F0(is)3.781 E -.3(DW)
109.336 408 S(_FRAME_SAME_V).3 E(AL, then the re)-1.35 E
(gister I has the same v)-.15 E(alue as in the pre)-.25 E(vious frame.)
-.25 E(If)109.336 426 Q F1(dw_regnum)2.5 E F0(is neither of these tw)2.5
E(o, then the follo)-.1 E(wing apply:)-.25 E F1(dw_value_type)109.336
444 Q F0 .146(determines the meaning of the other f)2.646 F 2.646
(ields. It)-.2 F .145(is one of D)2.646 F(W_EXPR_OFFSET)-.3 E 37.156
(\(0\), D)109.336 456 R(W_EXPR_V)-.3 E 37.157(AL_OFFSET\(1\), D)-1.35 F
37.157(W_EXPR_EXPRESSION\(2\) or)-.3 F -.3(DW)109.336 468 S(_EXPR_V).3 E
(AL_EXPRESSION\(3\).)-1.35 E(If)109.336 498 Q F1(dw_value_type)3.374 E
F0 .873(is D)3.373 F .873(W_EXPR_OFFSET \(0\) then this is as in D)-.3 F
-1.2(WA)-.3 G .873(RF2 and the of)1.2 F(fset\(N\))-.25 E 2.5(rule or)
109.336 510 R(the re)2.5 E(gister\(R\) rule of the D)-.15 E -1.2(WA)-.3
G(RF3 and D)1.2 E -1.2(WA)-.3 G(RF2 document applies.)1.2 E(The v)5 E
(alue is either:)-.25 E(If)149.336 522 Q F1(dw_offset_relevant)3.277 E
F0 .778(is non-zero, then)3.277 F F1(dw_regnum)3.278 E F0 .778(is ef)
3.278 F(fecti)-.25 E -.15(ve)-.25 G .778(ly ignored b).15 F(ut)-.2 E
1.405(must be identical to D)149.336 534 R(W_FRAME_CF)-.3 E 1.404
(A_COL3 \(and the)-.74 F F1(dw_offset)3.904 E F0 -.25(va)3.904 G 1.404
(lue applies.).25 F .794(The v)149.336 546 R .794(alue of re)-.25 F .795
(gister M is therefore the v)-.15 F .795(alue of CF)-.25 F 3.295(Ap)-.74
G .795(lus the v)-3.295 F .795(alue of)-.25 F F1(dw_offset)3.295 E F0(.)
A 1.146
(The result of the calculation is the address in memory where the v)
149.336 558 R 1.146(alue of re)-.25 F 1.146(gister M)-.15 F 2.5
(resides. This)149.336 570 R(is the of)2.5 E(fset\(N\) rule of the D)
-.25 E -1.2(WA)-.3 G(RF2 and D)1.2 E -1.2(WA)-.3 G(RF3 documents.)1.2 E
F1(dw_offset_relevant)149.336 588 Q F0 .216(is zero it indicates the)
2.716 F F1(dw_offset)2.716 E F0 -.2(fi)2.716 G .216
(eld is not meaningful.).2 F 2.347(The v)149.336 600 R 2.347(alue of re)
-.25 F 2.346(gister M is the v)-.15 F 2.346(alue currently in re)-.25 F
(gister)-.15 E F1(dw_regnum)4.846 E F0 2.346(\(the v)4.846 F(alue)-.25 E
-.3(DW)149.336 612 S(_FRAME_CF).3 E .183(A_COL3 must not appear)-.74 F
2.683(,o)-.4 G .183(nly real re)-2.683 F 2.683(gisters\). This)-.15 F
.183(is the re)2.683 F(gister\(R\))-.15 E(rule of the D)149.336 624 Q
-1.2(WA)-.3 G(RF3 spec.)1.2 E(If)109.336 654 Q F1(dw_value_type)3.748 E
F0 1.248(is D)3.748 F 1.248(W_EXPR_OFFSET \(1\) then this is the the v)
-.3 F(al_of)-.25 E 1.247(fset\(N\) rule of the)-.25 F -.3(DW)109.336 666
S .972(ARF3 spec applies.)-.9 F .972
(The calculation is identical to that of D)5.972 F .973
(W_EXPR_OFFSET \(0\) b)-.3 F .973(ut the)-.2 F -.25(va)109.336 678 S .3
(lue is interpreted as the v).25 F .3(alue of re)-.25 F .299
(gister M \(rather than the address where re)-.15 F .299(gister M')-.15
F 2.799(sv)-.55 G .299(alue is)-3.049 F(stored\).)109.336 690 Q(If)
109.336 708 Q F1(dw_value_type)2.873 E F0 .373(is D)2.873 F .373
(W_EXPR_EXPRESSION \(2\) then this is the the e)-.3 F .374
(xpression\(E\) rule of)-.15 F(the D)109.336 720 Q -1.2(WA)-.3 G
(RF3 document.)1.2 E F1(dw_offset_or_block_len)149.336 738 Q F0 .251
(is the length in bytes of the in-memory block)2.751 F(pointed)5.251 E
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G
2.5(0-)-2.5 G 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(1-)-2.5 G 2.244(at by)
149.336 96 R/F1 10/Courier@0 SF(dw_block_ptr)4.744 E F0(.)A F1
(dw_block_ptr)7.244 E F0 2.244(is a D)4.744 F -1.2(WA)-.3 G 2.245(RF e)
1.2 F 4.745(xpression. Ev)-.15 F 2.245(aluate that)-.25 F -.15(ex)
149.336 108 S(pression and the result is the address where the pre).15 E
(vious v)-.25 E(alue of re)-.25 E(gister M is found.)-.15 E(If)109.336
126 Q F1(dw_value_type)9.95 E F0 7.45(is D)9.95 F(W_EXPR_V)-.3 E 7.45
(AL_EXPRESSION \(3\) then this is the the)-1.35 F -.25(va)109.336 138 S
(l_e).25 E(xpression\(E\) rule of the D)-.15 E -1.2(WA)-.3 G(RF3 spec.)
1.2 E F1(dw_offset_or_block_len)149.336 156 Q F0 .251
(is the length in bytes of the in-memory block)2.751 F(pointed)5.251 E
2.245(at by)149.336 168 R F1(dw_block_ptr)4.745 E F0(.)A F1
(dw_block_ptr)7.245 E F0 2.244(is a D)4.745 F -1.2(WA)-.3 G 2.244(RF e)
1.2 F 4.744(xpression. Ev)-.15 F 2.244(aluate that)-.25 F -.15(ex)
149.336 180 S(pression and the result is the pre).15 E(vious v)-.25 E
(alue of re)-.25 E(gister M.)-.15 E 1.8(The rule)109.336 198 R F1
(rt3_cfa_rule)4.3 E F0 1.8(is the current v)4.3 F 1.8(alue of the CF)
-.25 F 1.8(A. It is interpreted e)-.74 F 1.8(xactly lik)-.15 F 4.3(ea)
-.1 G -.15(ny)-4.3 G(re)109.336 210 Q 7.985
(gister M rule \(as described just abo)-.15 F -.15(ve)-.15 G 10.484(\)e)
.15 G 7.984(xcept that)-10.634 F F1(dw_regnum)10.484 E F0 7.984
(cannot be)10.484 F(CW_FRAME_CF)109.336 222 Q .265(A_REG3 or D)-.74 F
(W_FRAME_UNDEFINED_V)-.3 E .265(AL or D)-1.35 F(W_FRAME_SAME_V)-.3 E(AL)
-1.35 E -.2(bu)109.336 234 S 2.5(tm).2 G(ust be a real re)-2.5 E
(gister number)-.15 E(.)-.55 E/F2 11/Times-Bold@0 SF 2.75(2.3.8 Macr)
69.336 291 R 2.75(oD)-.198 G(etails Record)-2.75 E F0(The)69.336 309 Q
F1(Dwarf_Macro_Details)2.5 E F0(type gi)2.5 E -.15(ve)-.25 G 2.5(si).15
G(nformation about a single entry in the .deb)-2.5 E
(ug.macinfo section.)-.2 E F1(struct Dwarf_Macro_Details_s {)69.336 327
Q 18(Dwarf_Off dmd_offset;)81.336 339 R 6(Dwarf_Small dmd_type;)81.336
351 R(Dwarf_Signed dmd_lineno;)81.336 363 Q(Dwarf_Signed dmd_fileindex;)
81.336 375 Q(char *)81.336 387 Q(dmd_macro;)42 E(};)69.336 399 Q
(typedef struct Dwarf_Macro_Details_s Dwarf_Macro_Details;)69.336 411 Q
(dmd_offset)69.336 429 Q F0(is the byte of)2.5 E(fset, within the .deb)
-.25 E(ug_macinfo section, of this macro information.)-.2 E F1(dmd_type)
69.336 447 Q F0 .642(is the type code of this macro info entry \(or 0, \
the type code indicating that this is the end of)3.143 F 2.79
(macro information entries for a compilation unit.)69.336 459 R(See)7.79
E F1(DW_MACINFO_define)5.29 E F0 5.29(,e)C 2.79(tc in the D)-5.29 F -1.2
(WA)-.3 G(RF)1.2 E(document.)69.336 471 Q F1(dmd_lineno)69.336 489 Q F0
(is the line number where this entry w)2.5 E
(as found, or 0 if there is no applicable line number)-.1 E(.)-.55 E F1
(dmd_fileindex)69.336 507 Q F0 2.893(is the f)5.393 F 2.893(ile inde)-.2
F 5.393(xo)-.15 G 5.393(ft)-5.393 G 2.893(he f)-5.393 F 2.893(ile in)-.2
F -.2(vo)-.4 G(lv).2 E 5.393(ed. This)-.15 F 2.892
(is only guaranteed meaningful on a)5.393 F F1 -2.245
(DW_MACINFO_start_file dmd_type)69.336 519 R F0 6.255(.S)C 1.256
(et to -1 if unkno)-6.255 F 1.256(wn \(see the functional interf)-.25 F
1.256(ace for more)-.1 F(details\).)69.336 531 Q F1(dmd_macro)69.336 549
Q F0 1.194(is the applicable string.)3.694 F -.15(Fo)6.194 G 3.694(ra)
.15 G F1(DW_MACINFO_define)A F0 1.193(this is the macro name and v)3.694
F(alue.)-.25 E -.15(Fo)69.336 561 S 3.177(ra).15 G F1(DW_MACINFO_undef)A
F0 3.177(,o)C 3.177(rt)-3.177 G .677(his is the macro name.)-3.177 F
-.15(Fo)5.677 G 3.177(ra).15 G F1(DW_MACINFO_vendor_ext)A F0 .678
(this is the)3.177 F -.15(ve)69.336 573 S(ndor).15 E(-def)-.2 E
(ined string v)-.2 E 2.5(alue. F)-.25 F(or other)-.15 E F1(dmd_type)2.5
E F0 2.5(st)C(his is 0.)-2.5 E/F3 12/Times-Bold@0 SF 3(2.4 Opaque)69.336
607 R -.408(Ty)3 G(pes).408 E F0 1.083(The opaque types declared in)
69.336 625 R/F4 10/Times-Italic@0 SF(libdwarf)3.583 E(.h)-.15 E F0 1.083
(are used as descriptors for queries ag)3.583 F 1.082(ainst D)-.05 F
-1.2(WA)-.3 G 1.082(RF information)1.2 F .644(stored in v)69.336 637 R
.644(arious deb)-.25 F .644(ugging sections.)-.2 F .645
(Each time an instance of an opaque type is returned as a result of a)
5.644 F F4(libdwarf)69.336 649 Q F0 .793(operation \()3.293 F F1
(Dwarf_Debug)A F0 -.15(ex)3.293 G .793
(cepted\), it should be freed, using).15 F F1(dwarf_dealloc\(\))3.292 E
F0 .792(when it is)3.292 F 1.263(no longer of use \(read the follo)
69.336 661 R 1.263(wing documentation for details, as in at least one c\
ase there is a special)-.25 F 8.886(routine pro)69.336 673 R 8.886
(vided for deallocation and)-.15 F F1(dwarf_dealloc\(\))11.386 E F0
8.886(is not directly called: see)11.386 F F1(dwarf_srclines\(\))69.336
685 Q F0 3.533(\). Some)B 1.033(functions return a number of instances \
of an opaque type in a block, by)3.533 F 1.493(means of a pointer to th\
e block and a count of the number of opaque descriptors in the block: s\
ee the)69.336 697 R 3.098
(function description for deallocation rules for such functions.)69.336
709 R 3.098(The list of opaque types def)8.098 F 3.098(ined in)-.2 F F4
(libdwarf)69.336 721 Q(.h)-.15 E F0
(that are pertinent to the Consumer Library)2.5 E 2.5(,a)-.65 G
(nd their intended use is described belo)-2.5 E -.65(w.)-.25 G(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G 2.5(1-)-2.5
G 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(2-)-2.5 G/F1 10
/Courier@0 SF(typedef struct Dwarf_Debug_s* Dwarf_Debug;)69.336 96 Q F0
.665(An instance of the)69.336 114 R F1(Dwarf_Debug)3.164 E F0 .664
(type is created as a result of a successful call to)3.164 F F1
(dwarf_init\(\))3.164 E F0 3.164(,o)C(r)-3.164 E F1(dwarf_elf_init\(\))
69.336 126 Q F0 2.657(,a)C .158
(nd is used as a descriptor for subsequent access to most)-2.657 F F1
(libdwarf)2.658 E F0 .158(functions on)2.658 F 5.877(that object.)69.336
138 R 5.877(The storage pointed to by this descriptor should be not be \
freed, using the)10.877 F F1(dwarf_dealloc\(\))69.336 150 Q F0 2.5
(function. Instead)2.5 F(free it with)2.5 E F1(dwarf_finish\(\))2.5 E F0
(.)A F1(typedef struct Dwarf_Die_s* Dwarf_Die;)69.336 186 Q F0 1.722
(An instance of a)69.336 204 R F1(Dwarf_Die)4.222 E F0 1.722
(type is returned from a successful call to the)4.222 F F1
(dwarf_siblingof\(\))4.223 E F0(,)A F1(dwarf_child)69.336 216 Q F0 5.699
(,o)C(r)-5.699 E F1(dwarf_offdie_b\(\))5.699 E F0 3.198
(function, and is used as a descriptor for queries about)5.699 F 3.21
(information related to that DIE.)69.336 228 R 3.211
(The storage pointed to by this descriptor should be freed, using)8.21 F
F1(dwarf_dealloc\(\))69.336 240 Q F0(with the allocation type)2.5 E F1
(DW_DLA_DIE)2.5 E F0(when no longer needed.)2.5 E F1
(typedef struct Dwarf_Line_s* Dwarf_Line;)69.336 270 Q F0 3.191
(Instances of)69.336 288 R F1(Dwarf_Line)5.691 E F0 3.191
(type are returned from a successful call to the)5.691 F F1
(dwarf_srclines\(\))5.69 E F0 2.092
(function, and are used as descriptors for queries about source lines.)
69.336 300 R 2.092(The storage pointed to by these)7.092 F 5.755
(descriptors should be indi)69.336 312 R 5.755(vidually freed, using)
-.25 F F1(dwarf_dealloc\(\))8.255 E F0 5.755(with the allocation type)
8.255 F F1(DW_DLA_LINE)69.336 324 Q F0(when no longer needed.)2.5 E F1
(typedef struct Dwarf_Global_s* Dwarf_Global;)69.336 354 Q F0 .69
(Instances of)69.336 372 R F1(Dwarf_Global)3.19 E F0 .691
(type are returned from a successful call to the)3.191 F F1
(dwarf_get_globals\(\))3.191 E F0(function, and are used as descriptors\
 for queries about global names \(pubnames\).)69.336 384 Q F1
(typedef struct Dwarf_Weak_s* Dwarf_Weak;)69.336 414 Q F0 6.996
(Instances of)69.336 432 R F1(Dwarf_Weak)9.496 E F0 6.996
(type are returned from a successful call to the SGI-specif)9.496 F(ic)
-.2 E F1(dwarf_get_weaks\(\))69.336 444 Q F0 .434
(function, and are used as descriptors for queries about weak names.)
2.933 F .434(The storage)5.434 F 3.407
(pointed to by these descriptors should be indi)69.336 456 R 3.407
(vidually freed, using)-.25 F F1(dwarf_dealloc\(\))5.906 E F0 3.406
(with the)5.906 F 5.936(allocation type)69.336 468 R F1
(DW_DLA_WEAK_CONTEXT)8.436 E F0(\(or)8.436 E F1(DW_DLA_WEAK)8.437 E F0
8.437(,a)C 8.437(no)-8.437 G 5.937(lder name, supported for)-8.437 F
(compatibility\) when no longer needed.)69.336 480 Q F1
(typedef struct Dwarf_Func_s* Dwarf_Func;)69.336 510 Q F0 6.996
(Instances of)69.336 528 R F1(Dwarf_Func)9.496 E F0 6.996
(type are returned from a successful call to the SGI-specif)9.496 F(ic)
-.2 E F1(dwarf_get_funcs\(\))69.336 540 Q F0(function, and are used as \
descriptors for queries about static function names.)2.5 E F1
(typedef struct Dwarf_Type_s* Dwarf_Type;)69.336 570 Q F0 6.995
(Instances of)69.336 588 R F1(Dwarf_Type)9.495 E F0 6.996
(type are returned from a successful call to the SGI-specif)9.496 F(ic)
-.2 E F1(dwarf_get_types\(\))69.336 600 Q F0
(function, and are used as descriptors for queries about user def)2.5 E
(ined types.)-.2 E F1(typedef struct Dwarf_Var_s* Dwarf_Var;)69.336 630
Q F0 7.496(Instances of)69.336 648 R F1(Dwarf_Var)9.996 E F0 7.496
(type are returned from a successful call to the SGI-specif)9.996 F(ic)
-.2 E F1(dwarf_get_vars\(\))69.336 660 Q F0
(function, and are used as descriptors for queries about static v)2.5 E
(ariables.)-.25 E F1(typedef struct Dwarf_Error_s* Dwarf_Error;)69.336
690 Q F0 .003(This descriptor points to a structure that pro)69.336 708
R .003(vides detailed information about errors detected by)-.15 F F1
(libdwarf)2.503 E F0(.)A 1.999(Users typically pro)69.336 720 R 1.999
(vide a location for)-.15 F F1(libdwarf)4.499 E F0 1.999
(to store this descriptor for the user to obtain more)4.499 F 4.57
(information about the error)69.336 732 R 9.57(.T)-.55 G 4.571
(he storage pointed to by this descriptor should be freed, using)-9.57 F
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G
2.5(2-)-2.5 G 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(3-)-2.5 G/F1 10
/Courier@0 SF(dwarf_dealloc\(\))69.336 96 Q F0(with the allocation type)
2.5 E F1(DW_DLA_ERROR)2.5 E F0(when no longer needed.)2.5 E F1
(typedef struct Dwarf_Attribute_s* Dwarf_Attribute;)69.336 126 Q F0 .483
(Instances of)69.336 144 R F1(Dwarf_Attribute)2.983 E F0 .482
(type are returned from a successful call to the)2.983 F F1
(dwarf_attrlist\(\))2.982 E F0(,)A(or)69.336 156 Q F1(dwarf_attr\(\))
3.152 E F0 .653
(functions, and are used as descriptors for queries about attrib)3.152 F
.653(ute v)-.2 F 3.153(alues. The)-.25 F(storage)3.153 E .687
(pointed to by this descriptor should be indi)69.336 168 R .687
(vidually freed, using)-.25 F F1(dwarf_dealloc\(\))3.187 E F0 .687
(with the allocation)3.187 F(type)69.336 180 Q F1(DW_DLA_ATTR)2.5 E F0
(when no longer needed.)2.5 E F1
(typedef struct Dwarf_Abbrev_s* Dwarf_Abbrev;)69.336 210 Q F0 1.14
(An instance of a)69.336 228 R F1(Dwarf_Abbrev)3.641 E F0 1.141
(type is returned from a successful call to)3.641 F F1
(dwarf_get_abbrev\(\))3.641 E F0(,)A 1.964
(and is used as a descriptor for queries about abbre)69.336 240 R 1.963
(viations in the .deb)-.25 F(ug_abbre)-.2 E 4.463(vs)-.25 G 4.463
(ection. The)-4.463 F(storage)4.463 E 3.061
(pointed to by this descriptor should be freed, using)69.336 252 R F1
(dwarf_dealloc\(\))5.562 E F0 3.062(with the allocation type)5.562 F F1
(DW_DLA_ABBREV)69.336 264 Q F0(when no longer needed.)2.5 E F1
(typedef struct Dwarf_Fde_s* Dwarf_Fde;)69.336 294 Q F0 1.483
(Instances of)69.336 312 R F1(Dwarf_Fde)3.983 E F0 1.482
(type are returned from a successful call to the)3.983 F F1
(dwarf_get_fde_list\(\))3.982 E F0(,)A F1(dwarf_get_fde_for_die\(\))
69.336 324 Q F0 2.532(,o)C(r)-2.532 E F1(dwarf_get_fde_at_pc\(\))2.532 E
F0 .033(functions, and are used as descriptors)2.532 F
(for queries about frames descriptors.)69.336 336 Q F1
(typedef struct Dwarf_Cie_s* Dwarf_Cie;)69.336 366 Q F0 1.691
(Instances of)69.336 384 R F1(Dwarf_Cie)4.191 E F0 1.691
(type are returned from a successful call to the)4.191 F F1
(dwarf_get_fde_list\(\))4.19 E F0(function, and are used as descriptors\
 for queries about information that is common to se)69.336 396 Q -.15
(ve)-.25 G(ral frames.).15 E F1
(typedef struct Dwarf_Arange_s* Dwarf_Arange;)69.336 426 Q F0 .803
(Instances of)69.336 444 R F1(Dwarf_Arange)3.303 E F0 .804
(type are returned from successful calls to the)3.303 F F1
(dwarf_get_aranges\(\))3.304 E F0(,)A(or)69.336 456 Q F1
(dwarf_get_arange\(\))3.028 E F0 .528(functions, and are used as descri\
ptors for queries about address ranges.)3.028 F(The)5.527 E 1.499
(storage pointed to by this descriptor should be indi)69.336 468 R 1.499
(vidually freed, using)-.25 F F1(dwarf_dealloc\(\))4 E F0 1.5(with the)4
F(allocation type)69.336 480 Q F1(DW_DLA_ARANGE)2.5 E F0
(when no longer needed.)2.5 E F1
(typedef struct Dwarf_Gdbindex_s* Dwarf_Gdbindex;)69.336 510 Q F0 11.584
(Instances of)69.336 528 R F1(Dwarf_Gdbindex)14.084 E F0 11.584
(type are returned from successful calls to the)14.084 F F1
(dwarf_gdbindex_header\(\))69.336 540 Q F0 .623
(function and are used to e)3.122 F .623
(xtract information from a .gdb_inde)-.15 F 3.123(xs)-.15 G(ection.)
-3.123 E .535(This section is a gcc/gdb e)69.336 552 R .535
(xtension and is designed to allo)-.15 F 3.035(wad)-.25 G(eb)-3.035 E
.535(ugger f)-.2 F .535(ast access to data in .deb)-.1 F(ug_info.)-.2 E
1.384(The storage pointed to by this descriptor should be freed using a\
 call to)69.336 564 R F1(dwarf_gdbindex_free\(\))3.884 E F0(with a v)
69.336 576 Q(alid)-.25 E F1(Dwarf_Gdbindex)2.5 E F0(pointer as the ar)
2.5 E(gument.)-.18 E F1
(typedef struct Dwarf_Xu_Index_Header_s* Dwarf_Xu_Index_header;)69.336
606 Q F0 6.184(Instances of)69.336 624 R F1(Dwarf_Xu_Index_Header_s)
8.684 E F0 6.184(type are returned from successful calls to the)8.684 F
F1(dwarf_get_xu_index_header\(\))69.336 636 Q F0 7.028
(function and are used to e)9.527 F 7.028(xtract information from a)-.15
F(.deb)69.336 648 Q(ug_cu_inde)-.2 E 4.331(xo)-.15 G 4.331(r.)-4.331 G
(deb)-4.331 E(ug_tu_inde)-.2 E 4.331(xs)-.15 G 1.831
(ection. These sections are used to mak)-4.331 F 4.331(ep)-.1 G 1.83
(ossible access to .dw)-4.331 F(o)-.1 E 2.837(sections g)69.336 660 R
2.837(athered into a .dwp object as part of the Deb)-.05 F 2.838
(ugFission project allo)-.2 F 2.838(wing separation of an)-.25 F -.15
(exe)69.336 672 S .586(cutable from most of its D).15 F -1.2(WA)-.3 G
.586(RF deb)1.2 F .586(ugging information.)-.2 F .586
(As of May 2015 these sections are accepted)5.586 F .596(into D)69.336
684 R -1.2(WA)-.3 G .596(RF5 b)1.2 F .596
(ut the standard has not been released.)-.2 F .597
(The storage pointed to by this descriptor should be)5.596 F 1
(freed using a call to)69.336 696 R F1(dwarf_xh_header_free\(\))3.5 E F0
1(with a v)3.5 F(alid)-.25 E F1(Dwarf_XuIndexHeader)3.5 E F0 1
(pointer as)3.5 F(the ar)69.336 708 Q(gument.)-.18 E F1
(typedef struct Dwarf_Line_Context_s * Dwarf_Line_Context;)69.336 738 Q
F0(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G
2.5(3-)-2.5 G 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(4-)-2.5 G/F1 10
/Courier@0 SF(dwarf_srclines_b\(\))69.336 96 Q F0 2.53(returns a Dw)5.03
F(arf_Line_Conte)-.1 E 2.53(xt through an ar)-.15 F 2.53
(gument and the ne)-.18 F 5.03(ws)-.25 G(tructure)-5.03 E
(pointer lets us access line header information con)69.336 108 Q -.15
(ve)-.4 G(niently).15 E(.)-.65 E/F2 12/Times-Bold@0 SF 3(3. UTF-8)69.336
148 R(strings)3 E/F3 10/Times-Italic@0 SF(libdwarf)69.336 166 Q F0 .047
(is def)2.547 F .046(ined, at v)-.2 F .046
(arious points, to return string pointers or to cop)-.25 F 2.546(ys)-.1
G .046(trings into string areas you def)-2.546 F(ine.)-.2 E -.3(DW)
69.336 178 S .557(ARF allo)-.9 F .557(ws the use of)-.25 F F1
(DW_AT_use_UTF8)3.057 E F0(\(D)3.057 E -1.2(WA)-.3 G .558
(RF3 and later\))1.2 F F1(DW_ATE_UTF)3.058 E F0(\(D)3.058 E -1.2(WA)-.3
G .558(RF4 and later\))1.2 F 1.626
(to specify that the strings returned are actually in UTF-8 format.)
69.336 190 R 1.626(What this means is that if UTF-8 is)6.626 F(specf)
69.336 202 Q 2.093(ied on a particular object it is up to callers that \
wish to print all the characters properly to use)-.2 F .641
(language-appropriate functions to con)69.336 214 R -.15(ve)-.4 G .641
(rt the char * to wide characters and print the wide characters.).15 F
(All)5.64 E .373(ASCII characters in the strings will print properly wh\
ether printed as wide characters or not.)69.336 226 R .374(The methods)
5.374 F 2.059(to con)69.336 238 R -.15(ve)-.4 G 2.059
(rt UTF-8 strings so the).15 F 4.559(yw)-.15 G 2.058
(ill print correctly for all)-4.559 F 2.058(such strings is be)7.058 F
2.058(yond the scope of this)-.15 F(document.)69.336 250 Q .649
(If UTF-8 is not specif)69.336 268 R .65(ied then one is probably safe \
in assuming the strings are iso_8859-15 and normal C)-.2 F
(printf\(\) will w)69.336 280 Q(ork f)-.1 E(ine..)-.2 E .923
(In either case)69.336 298 R .923(one should be w)5.923 F .922(ary of c\
orrupted \(accidentally or intentionally\) strings with ASCII control)
-.1 F(characters in the te)69.336 310 Q 2.5(xt. Such)-.15 F
(can cause bad ef)2.5 E(fects if simply printed to a de)-.25 E
(vice \(such as a terminal\).)-.25 E F2 3(4. Err)69.336 350 R
(or Handling)-.216 E F0 2.82(The method for detection and disposition o\
f error conditions that arise during access of deb)69.336 368 R(ugging)
-.2 E .729(information via)69.336 380 R F3(libdwarf)3.229 E F0 .729
(is consistent across all)3.229 F F3(libdwarf)3.229 E F0 .728
(functions that are capable of producing an error)3.229 F(.)-.55 E
(This section describes the method used by)69.336 392 Q F3(libdwarf)2.5
E F0(in notifying client programs of error conditions.)2.5 E 1.1
(Most functions within)69.336 410 R F3(libdwarf)3.6 E F0 1.101
(accept as an ar)3.6 F 1.101(gument a pointer to a)-.18 F F1
(Dwarf_Error)3.601 E F0 1.101(descriptor where a)3.601 F F1(Dwarf_Error)
69.336 422 Q F0 .483
(descriptor is stored if an error is detected by the function.)2.983 F
.482(Routines in the client program)5.482 F .018(that pro)69.336 434 R
.018(vide this ar)-.15 F .019(gument can query the)-.18 F F1
(Dwarf_Error)2.519 E F0 .019
(descriptor to determine the nature of the error and)2.519 F 1.334
(perform appropriate processing.)69.336 446 R 1.334(The intent is that \
clients do the appropriate processing immediately on)6.334 F
(encountering an error and then the client calls)69.336 458 Q F1
(dwarf_dealloc)2.5 E F0(to free the descriptor)2.5 E(.)-.55 E 1.562
(In the rare case where the malloc arena is e)69.336 476 R 1.563
(xhausted when trying to create a Dw)-.15 F 1.563
(arf_Error descriptor a)-.1 F .163
(pointer to a statically allocated descriptor will be returned.)69.336
488 R .162(This static descriptor is ne)5.162 F 2.662(wi)-.25 G 2.662
(nD)-2.662 G .162(ecember 2014.)-2.662 F 2.853(Ac)69.336 500 S .353
(all to)-2.853 F F1(dwarf_dealloc\(\))2.853 E F0 .353(to free the stati\
cally allocated descriptor is harmless \(it sets the error v)2.853 F
(alue)-.25 E .277(in the descriptor to)69.336 512 R -.3(DW)5.276 G
(_DLE_F).3 E(AILSAFE_ERR)-.74 E -1.35(VA)-.8 G 2.776(L\). The)1.35 F
.276(possible conflation of errors when the arena is)2.776 F -.15(ex)
69.336 524 S .161(hausted \(and a dw).15 F .162
(arf_error descriptor is sa)-.1 F -.15(ve)-.2 G 2.662(dp).15 G .162
(ast the ne)-2.662 F .162(xt reader call in an)-.15 F 2.662(yt)-.15 G
.162(hread\) is considered better)-2.662 F(than ha)69.336 536 Q(ving)-.2
E F3(libdwarf)2.5 E F0(call)2.5 E F1(abort\(\))2.5 E F0(\(as earlier)2.5
E F3(libdwarf)2.5 E F0(did\).)2.5 E 2.667(Ac)69.336 554 S .167
(lient program can also specify a function to be in)-2.667 F -.2(vo)-.4
G -.1(ke).2 G 2.667(du).1 G .167
(pon detection of an error at the time the library)-2.667 F .4
(is initialized \(see)69.336 566 R F1(dwarf_init\(\))2.9 E F0 2.9
(\). When)B(a)2.9 E F3(libdwarf)2.9 E F0 .4(routine detects an error)2.9
F 2.9(,t)-.4 G .4(his function is called with)-2.9 F(tw)69.336 578 Q
2.639(oa)-.1 G -.18(rg)-2.639 G .139
(uments: a code indicating the nature of the error and a pointer pro).18
F .139(vided by the client at initialization)-.15 F(\(ag)69.336 590 Q
.975(ain see)-.05 F F1(dwarf_init\(\))3.475 E F0 3.475(\). This)B .975
(pointer ar)3.475 F .975
(gument can be used to relay information between the error)-.18 F 1.088
(handler and other routines of the client program.)69.336 602 R 3.588
(Ac)6.088 G 1.087(lient program can specify or change both the error)
-3.588 F 3.31(handling function and the pointer ar)69.336 614 R 3.31
(gument after initialization using)-.18 F F1(dwarf_seterrhand\(\))5.81 E
F0(and)5.81 E F1(dwarf_seterrarg\(\))69.336 626 Q F0(.)A 1.299
(In the case where)69.336 644 R F3(libdwarf)3.799 E F0 1.299
(functions are not pro)3.799 F 1.299(vided a pointer to a)-.15 F F1
(Dwarf_Error)3.798 E F0(descriptor)3.798 E 3.798(,a)-.4 G 1.298(nd no)
-3.798 F 1.535(error handling function w)69.336 656 R 1.535(as pro)-.1 F
1.535(vided at initialization,)-.15 F F3(libdwarf)4.035 E F0 1.535
(functions terminate e)4.035 F -.15(xe)-.15 G 1.535(cution by calling)
.15 F F1(abort\(3C\))69.336 668 Q F0(.)A(The follo)69.336 698 Q
(wing lists the processing steps tak)-.25 E
(en upon detection of an error:)-.1 E 7.5(1. Check)81.836 716 R(the)
4.932 E F1(error)4.932 E F0(ar)4.932 E 2.432(gument; if not a)-.18 F F3
(NULL)4.932 E F0(pointer)4.931 E 4.931(,a)-.4 G 2.431
(llocate and initialize a)-4.931 F F1(Dwarf_Error)4.931 E F0 1.902
(descriptor with information describing the error)99.336 728 R 4.402(,p)
-.4 G 1.902(lace this descriptor in the area pointed to by)-4.402 F F1
(error)99.336 740 Q F0 2.5(,a)C(nd return a v)-2.5 E
(alue indicating an error condition.)-.25 E(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(5-)-2.5 G 7.5(2. If)
81.836 96 R(an)4.27 E/F1 10/Courier@0 SF(errhand)4.269 E F0(ar)4.269 E
1.769(gument w)-.18 F 1.769(as pro)-.1 F 1.769(vided to)-.15 F F1
(dwarf_init\(\))4.269 E F0 1.769(at initialization, call)4.269 F F1
(errhand\(\))4.269 E F0 5.916(passing it the error descriptor and the v)
99.336 108 R 5.916(alue of the)-.25 F F1(errarg)8.416 E F0(ar)8.416 E
5.917(gument pro)-.18 F 5.917(vided to)-.15 F F1(dwarf_init\(\))99.336
120 Q F0 8.291(.I)C 5.791(ft)-8.291 G 3.291
(he error handling function returns, return a v)-5.791 F 3.29
(alue indicating an error)-.25 F(condition.)99.336 132 Q 7.5(3. T)81.836
150 R(erminate program e)-.7 E -.15(xe)-.15 G(cution by calling).15 E F1
(abort\(3C\))2.5 E F0(.)A 1.572(In all cases, it is clear from the v)
69.336 186 R 1.573
(alue returned from a function that an error occurred in e)-.25 F -.15
(xe)-.15 G 1.573(cuting the).15 F(function, since D)69.336 198 Q(W_DL)
-.3 E(V_ERR)-1 E(OR is returned.)-.4 E .605(As can be seen from the abo)
69.336 216 R .905 -.15(ve s)-.15 H .604
(teps, the client program can pro).15 F .604
(vide an error handler at initialization, and)-.15 F 1.45(still pro)
69.336 228 R 1.45(vide an)-.15 F F1(error)3.95 E F0(ar)3.95 E 1.45
(gument to)-.18 F/F2 10/Times-Italic@0 SF(libdwarf)3.95 E F0 1.451
(functions when it is not desired to ha)3.95 F 1.751 -.15(ve t)-.2 H
1.451(he error handler).15 F(in)69.336 240 Q -.2(vo)-.4 G -.1(ke).2 G
(d.).1 E 2.708(If a)69.336 270 R F1(libdwarf)5.208 E F0 2.708
(function is called with in)5.208 F -.25(va)-.4 G 2.708(lid ar).25 F
2.708(guments, the beha)-.18 F 2.708(vior is undef)-.2 F 5.207(ined. In)
-.2 F(particular)5.207 E(,)-.4 E 1.671(supplying a)69.336 282 R F1(NULL)
4.171 E F0 1.671(pointer to a)4.171 F F1(libdwarf)4.171 E F0 1.671
(function \(e)4.171 F 1.672(xcept where e)-.15 F 1.672
(xplicitly permitted\), or pointers to)-.15 F(in)69.336 294 Q -.25(va)
-.4 G 2.98(lid addresses or uninitialized data causes undef).25 F 2.979
(ined beha)-.2 F 2.979(vior; the return v)-.2 F 2.979
(alue in such cases is)-.25 F(undef)69.336 306 Q .867
(ined, and the function may f)-.2 F .867(ail to in)-.1 F -.2(vo)-.4 G
1.068 -.1(ke t).2 H .868
(he caller supplied error handler or to return a meaningful).1 F
(error number)69.336 318 Q 5(.I)-.55 G(mplementations also may abort e)
-5 E -.15(xe)-.15 G(cution for such cases.).15 E 1.06
(Some errors are so inconsequential that it does not w)69.336 348 R 1.06
(arrant rejecting an object or returning an error)-.1 F 6.06(.A)-.55 G
(n)-6.06 E -.15(ex)69.336 360 S .821(ample w).15 F .821(ould be a frame\
 length not being a multiple of an address-size \(right no)-.1 F 3.322
(wt)-.25 G .822(his is the only such)-3.322 F 5.47
(inconsequential error\).)69.336 372 R 7.07 -.8(To m)10.47 H(ak).8 E
7.97(ei)-.1 G 7.97(tp)-7.97 G 5.47(ossible for a client)-7.97 F 5.47
(to report such errors the function)10.47 F F1
(dwarf_get_harmless_error_list)69.336 384 Q F0 1.222
(returns strings with error te)3.722 F 1.223(xt in them.)-.15 F 1.223
(This function may be)6.223 F 9.91(ignored if client code does not w)
69.336 396 R 9.909(ant to bother with such error reporting. See)-.1 F F1
(DW_DLE_DEBUG_FRAME_LENGTH_NOT_MULTIPLE)69.336 408 Q F0(in the libdw)2.5
E(arf source code.)-.1 E/F3 12/Times-Bold@0 SF 3(4.1 Retur)69.336 442 R
(ned v)-.18 E(alues in the functional interface)-.12 E F0 -1.11(Va)
69.336 460 S .92(lues returned by)1.11 F F1(libdwarf)3.42 E F0 .921
(functions to indicate success and errors are enumerated in Figure 2.)
3.42 F(The)5.921 E F1(DW_DLV_NO_ENTRY)69.336 472 Q F0 .969
(case is useful for functions need to indicate that while there w)3.469
F .968(as no data to return)-.1 F 1.96(there w)69.336 484 R 1.96
(as no error either)-.1 F 6.96(.F)-.55 G 1.96(or e)-7.11 F(xample,)-.15
E F1(dwarf_siblingof\(\))4.46 E F0 1.96(may return)4.46 F F1
(DW_DLV_NO_ENTRY)4.46 E F0(to)4.46 E(indicate that that there w)69.336
496 Q(as no sibling to return.)-.1 E .4 LW 411.041 506.5 159.631 506.5
DL/F4 10/Times-Bold@0 SF(SYMBOLIC N)164.631 516 Q 23.23(AME V)-.2 F 12.5
(ALUE MEANING)-1.35 F 411.041 520.5 159.631 520.5 DL F0 -.3(DW)164.631
530 S(_DL).3 E(V_ERR)-1 E 46.005(OR 1)-.4 F(Error)29.325 E -.3(DW)
164.631 542 S(_DL).3 E 64.505(V_OK 0)-1 F(Successful call)29.325 E -.3
(DW)164.631 554 S(_DL).3 E(V_NO_ENTR)-1 E 27.66(Y-)-.65 G 27.66(1N)
-27.66 G 2.5(oa)-27.66 G(pplicable v)-2.5 E(alue)-.25 E 411.041 558.5
159.631 558.5 DL 411.041 506.5 411.041 558.5 DL 159.631 506.5 159.631
558.5 DL F4(Figur)229.741 572 Q 2.5(e2)-.18 G(.)-2.5 E F0
(Error Indications)5 E(Each function in the interf)69.336 590 Q
(ace that returns a v)-.1 E(alue returns one of the inte)-.25 E
(gers in the abo)-.15 E .3 -.15(ve f)-.15 H(igure.)-.05 E(If)69.336 608
Q F1(DW_DLV_ERROR)2.869 E F0 .369(is returned and a pointer to a)2.869 F
F1(Dwarf_Error)2.869 E F0 .369
(pointer is passed to the function, then a)2.869 F(Dw)69.336 620 Q .418
(arf_Error handle is returned through the pointer)-.1 F 2.918(.N)-.55 G
2.918(oo)-2.918 G .418(ther pointer v)-2.918 F .418(alue in the interf)
-.25 F .419(ace returns a v)-.1 F(alue.)-.25 E 28.219(After the)69.336
632 R F1(Dwarf_Error)30.719 E F0 28.219(is no longer of interest, a)
30.719 F F1(dwarf_dealloc\(dbg,dw_err,DW_DLA_ERROR\))69.336 644 Q F0
2.411(on the error pointer is appropriate to free an)4.911 F(y)-.15 E
(space used by the error information.)69.336 656 Q(If)69.336 674 Q F1
(DW_DLV_NO_ENTRY)2.5 E F0(is returned no pointer v)2.5 E
(alue in the interf)-.25 E(ace returns a v)-.1 E(alue.)-.25 E(If)69.336
692 Q F1(DW_DLV_OK)2.725 E F0 .225(is returned, the)2.725 F F1
(Dwarf_Error)2.725 E F0(pointer)2.725 E 2.724(,i)-.4 G 2.724(fs)-2.724 G
.224(upplied, is not touched, b)-2.724 F .224(ut an)-.2 F 2.724(yo)-.15
G .224(ther v)-2.724 F .224(alues to)-.25 F .418
(be returned through pointers are returned.)69.336 704 R .418
(In this case calls \(depending on the e)5.418 F .419
(xact function returning the)-.15 F 1.618(error\) to)69.336 716 R F1
(dwarf_dealloc\(\))4.118 E F0 1.617(may be appropriate once the particu\
lar pointer returned is no longer of)4.117 F(interest.)69.336 728 Q(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G 2.5
(5-)-2.5 G 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(6-)-2.5 G 2.451
(Pointers passed to allo)69.336 96 R 4.951(wv)-.25 G 2.451(alues to be \
returned through them are uniformly the last pointers in each)-5.201 F
(ar)69.336 108 Q(gument list.)-.18 E .769(All the interf)69.336 126 R
.768(ace functions are def)-.1 F .768(ined from the point of vie)-.2 F
3.268(wo)-.25 G 3.268(ft)-3.268 G .768(he writer)-3.268 F .768
(-of-the-library \(as is traditional)-.2 F .798
(for UN*X library documentation\), not from the point of vie)69.336 138
R 3.298(wo)-.25 G 3.298(ft)-3.298 G .798(he user of the library)-3.298 F
5.798(.T)-.65 G .798(he caller might)-5.798 F(code:)69.336 150 Q/F1 10
/Courier@0 SF(Dwarf_Line line;)69.336 168 Q(Dwarf_Signed ret_loff;)
69.336 180 Q 6(Dwarf_Error err;)69.336 192 R
(int retval = dwarf_lineoff\(line,&ret_loff,&err\);)69.336 204 Q F0
(for the function def)69.336 222 Q(ined as)-.2 E F1
(int dwarf_lineoff\(Dwarf_Line line,Dwarf_Signed *return_lineoff,)69.336
240 Q(Dwarf_Error* err\);)81.336 252 Q F0 .757
(and this document refers to the function as returning the v)69.336 270
R .756(alue through *err or *return_lineof)-.25 F 3.256(fo)-.25 G 3.256
(ru)-3.256 G .756(ses the)-3.256 F
(phrase "returns in the location pointed to by err".)69.336 282 Q
(Sometimes other similar phrases are used.)5 E/F2 12/Times-Bold@0 SF 3
(5. Memory)69.336 322 R(Management)3 E F0(Se)69.336 340 Q -.15(ve)-.25 G
.598(ral of the functions that comprise).15 F/F3 10/Times-Italic@0 SF
(libdwarf)3.098 E F0 .598
(return pointers \(opaque descriptors\) to structures that ha)3.098 F
-.15(ve)-.2 G 1.315(been dynamically allocated by the library)69.336 352
R 6.315(.T)-.65 G 3.815(oa)-7.115 G 1.315
(id in the management of dynamic memory)-3.815 F 3.814(,t)-.65 G 1.314
(he function)-3.814 F F1(dwarf_dealloc\(\))69.336 364 Q F0 .276(is pro)
2.776 F .276(vided to free storage allocated as a result of a call to a)
-.15 F F3(libdwarf)2.777 E F0 2.777(function. This)2.777 F
(section describes the strate)69.336 376 Q(gy that should be tak)-.15 E
(en by a client program in managing dynamic storage.)-.1 E F2 3
(5.1 Read-only)69.336 410 R(Pr)3 E(operties)-.216 E F0 .571
(All pointers \(opaque descriptors\) returned by or as a result of a)
69.336 428 R F3 .57(libdwarf Consumer Libr)3.07 F(ary)-.15 E F0 .57
(call should be)3.07 F .267(assumed to point to read-only memory)69.336
440 R 5.267(.T)-.65 G .267(he results are undef)-5.267 F .268(ined for)
-.2 F F3(libdwarf)2.768 E F0 .268(clients that attempt to write)5.268 F
(to a re)69.336 452 Q(gion pointed to by a v)-.15 E(alue returned by a)
-.25 E F3(libdwarf Consumer Libr)2.5 E(ary)-.15 E F0(call.)2.5 E F2 3
(5.2 Storage)69.336 486 R(Deallocation)3 E F0 1.225
(See the section "Returned v)69.336 504 R 1.225
(alues in the functional interf)-.25 F 1.224(ace", abo)-.1 F -.15(ve)
-.15 G 3.724(,f).15 G 1.224(or the general rules where calls to)-3.724 F
F1(dwarf_dealloc\(\))69.336 516 Q F0(is appropriate.)2.5 E .065
(In some cases the pointers returned by a)69.336 534 R F3(libdwarf)2.566
E F0 .066(call are pointers to data which is not freeable.)2.566 F .066
(The library)5.066 F(kno)69.336 546 Q 2.175
(ws from the allocation type pro)-.25 F 2.174
(vided to it whether the space is freeable or not and will not free)-.15
F 1.233(inappropriately when)69.336 558 R F1(dwarf_dealloc\(\))3.733 E
F0 1.233(is called.)3.733 F 1.233(So it is vital that)6.233 F F1
(dwarf_dealloc\(\))3.734 E F0 1.234(be called)3.734 F
(with the proper allocation type.)69.336 570 Q -.15(Fo)69.336 588 S 7.5
(rm).15 G 5(ost storage allocated by)-7.5 F F3(libdwarf)7.5 E F0 7.499
(,t)C 4.999(he client can free the storage for reuse by calling)-7.499 F
F1(dwarf_dealloc\(\))69.336 600 Q F0 2.714(,p)C(ro)-2.714 E .214
(viding it with the)-.15 F F1(Dwarf_Debug)2.714 E F0 .214
(descriptor specifying the object for which the)2.714 F .917(storage w)
69.336 612 R .917
(as allocated, a pointer to the area to be free-ed, and an identif)-.1 F
.916(ier that specif)-.2 F .916(ies what the pointer)-.2 F 2.641
(points to \(the allocation type\).)69.336 624 R -.15(Fo)7.641 G 5.141
(re).15 G 2.641(xample, to free a)-5.291 F F1 2.642(Dwarf_Die die)5.141
F F0 2.642(belonging the the object)5.142 F 3.685(represented by)69.336
636 R F1 3.684(Dwarf_Debug dbg)6.185 F F0 6.184(,a)C 3.684
(llocated by a call to)-6.184 F F1(dwarf_siblingof\(\))6.184 E F0 6.184
(,t)C 3.684(he call to)-6.184 F F1(dwarf_dealloc\(\))69.336 648 Q F0 -.1
(wo)2.5 G(uld be:).1 E F1(dwarf_dealloc\(dbg, die, DW_DLA_DIE\);)79.336
666 Q F0 3.01 -.8(To f)69.336 696 T 1.411(ree storage allocated in the \
form of a list of pointers \(opaque descriptors\), each member of the l\
ist).8 F .542(should be deallocated, follo)69.336 708 R .541
(wed by deallocation of the actual list itself.)-.25 F .541(The follo)
5.541 F .541(wing code fragment uses)-.25 F 1.19(an in)69.336 720 R -.2
(vo)-.4 G 1.19(cation of).2 F F1(dwarf_attrlist\(\))3.69 E F0 1.19
(as an e)3.69 F 1.19
(xample to illustrate a technique that can be used to free)-.15 F
(storage from an)69.336 732 Q(y)-.15 E F3(libdwarf)2.5 E F0
(routine that returns a list:)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G 2.5(6-)-2.5 G 0 Cg EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(7-)-2.5 G/F1 10
/Courier@0 SF(void example1\(Dwarf_Die somedie\))69.336 96 Q({)69.336
108 Q(Dwarf_Debug dbg = 0;)81.336 120 Q(Dwarf_Signed atcount;)81.336 132
Q(Dwarf_Attribute *atlist;)81.336 144 Q(Dwarf_Error error = 0;)81.336
156 Q(Dwarf_Signed i = 0;)81.336 168 Q(int errv;)81.336 180 Q
(errv = dwarf_attrlist\(somedie, &atlist,&atcount, &error\);)81.336 204
Q(if \(errv == DW_DLV_OK\) {)81.336 216 Q
(for \(i = 0; i < atcount; ++i\) {)93.336 228 Q(/* use atlist[i] */)
105.336 240 Q(dwarf_dealloc\(dbg, atlist[i], DW_DLA_ATTR\);)105.336 252
Q(})93.336 264 Q(dwarf_dealloc\(dbg, atlist, DW_DLA_LIST\);)93.336 276 Q
(})81.336 288 Q(})69.336 300 Q F0(The)69.336 330 Q F1(Dwarf_Debug)4.305
E F0 1.805(returned from)4.305 F F1(dwarf_init\(\))4.305 E F0(or)4.305 E
F1(dwarf_elf_init\(\))4.305 E F0 1.805(cannot be freed using)4.305 F F1
(dwarf_dealloc\(\))69.336 342 Q F0 6.233(.T)C 1.233(he function)-6.233 F
F1(dwarf_finish\(\))3.733 E F0 1.234
(will deallocate all dynamic storage associated)3.733 F .358
(with an instance of a)69.336 354 R F1(Dwarf_Debug)2.858 E F0 2.857
(type. In)2.857 F(particular)2.857 E 2.857(,i)-.4 G 2.857(tw)-2.857 G
.357(ill deallocate all dynamically allocated space)-2.857 F
(associated with the)69.336 366 Q F1(Dwarf_Debug)2.5 E F0(descriptor)2.5
E 2.5(,a)-.4 G(nd f)-2.5 E(inally mak)-.2 E 2.5(et)-.1 G
(he descriptor in)-2.5 E -.25(va)-.4 G(lid.).25 E(An)69.336 390 Q F1
(Dwarf_Error)2.855 E F0 .356(returned from)2.855 F F1(dwarf_init\(\))
2.856 E F0(or)2.856 E F1(dwarf_elf_init\(\))2.856 E F0 .356
(in case of a f)2.856 F .356(ailure cannot)-.1 F .43(be freed using)
69.336 402 R F1(dwarf_dealloc\(\))2.93 E F0 5.43(.T)C .43(he only w)
-5.43 F .429(ay to free the)-.1 F F1(Dwarf_Error)2.929 E F0 .429
(from either of those calls)2.929 F 1.827(is to use)69.336 414 R/F2 10
/Times-Italic@0 SF(fr)4.327 E(ee\(3\))-.37 E F0(directly)4.327 E 6.828
(.E)-.65 G -.15(ve)-6.828 G(ry).15 E F1(Dwarf_Error)4.328 E F0 1.828
(must be freed by)4.328 F F1(dwarf_dealloc\(\))4.328 E F0 -.15(ex)4.328
G 1.828(cept those).15 F(returned by)69.336 426 Q F1(dwarf_init\(\))2.5
E F0(or)2.5 E F1(dwarf_elf_init\(\))2.5 E F0(.)A
(The codes that identify the storage pointed to in calls to)69.336 456 Q
F1(dwarf_dealloc\(\))2.5 E F0(are described in f)2.5 E(igure 3.)-.2 E
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G
2.5(7-)-2.5 G 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(8-)-2.5 G .4 LW 445.491
88.5 125.181 88.5 DL/F1 10/Times-Bold@0 SF 108.21(IDENTIFIER USED)
130.181 98 R .36 -.18(TO F)2.5 H(REE).18 E 445.491 102.5 125.181 102.5
DL F0 -.3(DW)130.181 112 S 97.14(_DLA_STRING char*).3 F -.3(DW)130.181
124 S 113.25(_DLA_LOC Dw).3 F(arf_Loc)-.1 E -.3(DW)130.181 136 S 87.69
(_DLA_LOCDESC Dw).3 F(arf_Locdesc)-.1 E -.3(DW)130.181 148 S 99.92
(_DLA_ELLIST Dw).3 F(arf_Ellist \(not used\))-.1 E -.3(DW)130.181 160 S
92.14(_DLA_BOUNDS Dw).3 F(arf_Bounds \(not used\))-.1 E -.3(DW)130.181
172 S 99.36(_DLA_BLOCK Dw).3 F(arf_Block)-.1 E -.3(DW)130.181 184 S
(_DLA_DEB).3 E 98.91(UG Dw)-.1 F(arf_Deb)-.1 E(ug \(do not use\))-.2 E
-.3(DW)130.181 196 S 116.59(_DLA_DIE Dw).3 F(arf_Die)-.1 E -.3(DW)
130.181 208 S 110.48(_DLA_LINE Dw).3 F(arf_Line)-.1 E -.3(DW)130.181 220
S(_DLA_A).3 E 108.25(TTR Dw)-1.11 F(arf_Attrib)-.1 E(ute)-.2 E -.3(DW)
130.181 232 S 108.25(_DLA_TYPE Dw).3 F(arf_T)-.1 E 2.5(ype \(not)-.8 F
(used\))2.5 E -.3(DW)130.181 244 S 94.9(_DLA_SUBSCR Dw).3 F
(arf_Subscr \(not used\))-.1 E -.3(DW)130.181 256 S(_DLA_GLOB).3 E 41.39
(AL_CONTEXT Dw)-.35 F(arf_Global)-.1 E -.3(DW)130.181 268 S(_DLA_ERR).3
E 100.31(OR Dw)-.4 F(arf_Error)-.1 E -.3(DW)130.181 280 S 112.14
(_DLA_LIST a).3 F(list of opaque descriptors)2.5 E -.3(DW)130.181 292 S
(_DLA_LINEB).3 E 91.13(UF Dw)-.1 F(arf_Line* \(not used\))-.1 E -.3(DW)
130.181 304 S 91.59(_DLA_ARANGE Dw).3 F(arf_Arange)-.1 E -.3(DW)130.181
316 S 92.69(_DLA_ABBREV Dw).3 F(arf_Abbre)-.1 E(v)-.25 E -.3(DW)130.181
328 S 81.02(_DLA_FRAME_OP Dw).3 F(arf_Frame_Op)-.1 E -.3(DW)130.181 340
S 117.14(_DLA_CIE Dw).3 F(arf_Cie)-.1 E -.3(DW)130.181 352 S 114.36
(_DLA_FDE Dw).3 F(arf_Fde)-.1 E -.3(DW)130.181 364 S 74.36
(_DLA_LOC_BLOCK Dw).3 F(arf_Loc Block)-.1 E -.3(DW)130.181 376 S 59.91
(_DLA_FRAME_BLOCK Dw).3 F(arf_Frame Block \(not used\))-.1 E -.3(DW)
130.181 388 S 54.92(_DLA_FUNC_CONTEXT Dw).3 F(arf_Func)-.1 E -.3(DW)
130.181 400 S(_DLA_TYPEN).3 E 27.5(AME_CONTEXT Dw)-.35 F(arf_T)-.1 E
(ype)-.8 E -.3(DW)130.181 412 S(_DLA_V).3 E 61.83(AR_CONTEXT Dw)-1.35 F
(arf_V)-.1 E(ar)-1.11 E -.3(DW)130.181 424 S 51.6(_DLA_WEAK_CONTEXT Dw)
.3 F(arf_W)-.1 E(eak)-.8 E -.3(DW)130.181 436 S 31.58
(_DLA_PUBTYPES_CONTEXT Dw).3 F(arf_T)-.1 E(ype)-.8 E 445.491 440.5
125.181 440.5 DL 445.491 88.5 445.491 440.5 DL 125.181 88.5 125.181
440.5 DL F1(Figur)194.011 454 Q 2.5(e3)-.18 G(.)-2.5 E F0
(Allocation/Deallocation Identif)5 E(iers)-.2 E/F2 12/Times-Bold@0 SF 3
(6. Functional)69.336 500 R(Interface)3 E F0 .225
(This section describes the functions a)69.336 518 R -.25(va)-.2 G .224
(ilable in the).25 F/F3 10/Times-Italic@0 SF(libdwarf)2.724 E F0
(library)2.724 E 5.224(.E)-.65 G .224
(ach function description includes its)-5.224 F(def)69.336 530 Q
(inition, follo)-.2 E
(wed by one or more paragraph describing the function')-.25 E 2.5(so)
-.55 G(peration.)-2.5 E(The follo)69.336 560 Q
(wing sections describe these functions.)-.25 E F2 3(6.1 Initialization)
69.336 594 R(Operations)3 E F0 1.875
(These functions are concerned with preparing an object f)69.336 612 R
1.876(ile for subsequent access by the functions in)-.2 F F3(libdwarf)
69.336 624 Q F0
(and with releasing allocated resources when access is complete.)2.5 E
/F4 11/Times-Bold@0 SF 2.75(6.1.1 d)69.336 657 R(warf_init\(\))-.165 E
F0(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)120.71 G
2.5(8-)-2.5 G 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_init\()69.336 96 Q(int fd,)117.336 108 Q
(Dwarf_Unsigned access,)117.336 120 Q(Dwarf_Handler errhand,)117.336 132
Q(Dwarf_Ptr errarg,)117.336 144 Q(Dwarf_Debug * dbg,)117.336 156 Q
(Dwarf_Error *error\))117.336 168 Q F0 2.357(When it returns)69.336 186
R F1(DW_DLV_OK)4.857 E F0 4.857(,t)C 2.356(he function)-4.857 F F1
(dwarf_init\(\))4.856 E F0 2.356(returns through)4.856 F F1(dbg)4.856 E
F0(a)4.856 E F1(Dwarf_Debug)4.856 E F0 .377
(descriptor that represents a handle for accessing deb)69.336 198 R .377
(ugging records associated with the open f)-.2 F .378(ile descriptor)-.2
F F1(fd)69.336 210 Q F0(.)A F1(DW_DLV_NO_ENTRY)7.112 E F0 2.112
(is returned if the object does not contain D)4.612 F -1.2(WA)-.3 G
2.111(RF deb)1.2 F 2.111(ugging information.)-.2 F F1(DW_DLV_ERROR)
69.336 222 Q F0 .164(is returned if an error occurred.)2.664 F(The)5.164
E F1(access)2.664 E F0(ar)2.664 E .165
(gument indicates what access is allo)-.18 F(wed)-.25 E 1.487
(for the section.)69.336 234 R(The)6.487 E F1(DW_DLC_READ)3.987 E F0
1.486(parameter is v)3.986 F 1.486
(alid for read access \(only read access is def)-.25 F 1.486(ined or)-.2
F 2.001(discussed in this document\).)69.336 246 R(The)7.001 E F1
(errhand)4.501 E F0(ar)4.501 E 2.001
(gument is a pointer to a function that will be in)-.18 F -.2(vo)-.4 G
-.1(ke).2 G(d).1 E(whene)69.336 258 Q -.15(ve)-.25 G 3.334(ra).15 G
3.334(ne)-3.334 G .834(rror is detected as a result of a)-3.334 F/F2 10
/Times-Italic@0 SF(libdwarf)3.333 E F0 3.333(operation. The)3.333 F F1
(errarg)3.333 E F0(ar)3.333 E .833(gument is passed as an)-.18 F(ar)
69.336 270 Q .573(gument to the)-.18 F F1(errhand)3.073 E F0 3.074
(function. The)3.073 F -.2(fi)3.074 G .574
(le descriptor associated with the).2 F F1(fd)3.074 E F0(ar)3.074 E .574
(gument must refer to an)-.18 F 2.436(ordinary f)69.336 282 R 2.436
(ile \(i.e. not a pipe, sock)-.2 F 2.436(et, de)-.1 F 2.436
(vice, /proc entry)-.25 F 4.936(,e)-.65 G 2.435
(tc.\), be opened with the at least as much)-4.936 F 1.346
(permission as specif)69.336 294 R 1.346(ied by the)-.2 F F1(access)
3.846 E F0(ar)3.846 E 1.347
(gument, and cannot be closed or used as an ar)-.18 F 1.347
(gument to an)-.18 F(y)-.15 E .307
(system calls by the client until after)69.336 306 R F1
(dwarf_finish\(\))2.807 E F0 .307(is called.)2.807 F .307
(The seek position of the f)5.307 F .306(ile associated)-.2 F(with)
69.336 318 Q F1(fd)2.5 E F0(is undef)2.5 E(ined upon return of)-.2 E F1
(dwarf_init\(\))2.5 E F0(.)A -.4(Wi)69.336 342 S 4.215
(th SGI IRIX, by def).4 F 4.215(ault it is allo)-.1 F 4.215
(wed that the app)-.25 F F1 .716(close\(\) fd)6.716 F F0 4.216
(immediately after calling)6.716 F F1(dwarf_init\(\))69.336 354 Q F0
3.065(,b)C .565(ut that is not)-3.265 F 3.065(ap)5.565 G .565
(ortable approach \(that it w)-3.065 F .565
(orks is an accidental side ef)-.1 F .565(fect of the f)-.25 F(act)-.1 E
1.596(that SGI IRIX uses)69.336 366 R F1(ELF_C_READ_MMAP)4.096 E F0
1.596(in its hidden internal call to)4.096 F F1(elf_begin\(\))4.096 E F0
4.097(\). The)B(portable)4.097 E 2.142(approach is to consider that)
69.336 378 R F1(fd)4.641 E F0 2.141
(must be left open till after the corresponding dw)4.641 F(arf_f)-.1 E
2.141(inish\(\) call has)-.2 F(returned.)69.336 390 Q(Since)69.336 414 Q
F1(dwarf_init\(\))4.012 E F0 1.512
(uses the same error handling processing as other)4.012 F F2(libdwarf)
4.013 E F0 1.513(functions \(see)4.013 F F2(Err)4.013 E(or)-.45 E
(Handling)69.336 426 Q F0(abo)3.053 E -.15(ve)-.15 G .553
(\), client programs will generally supply an).15 F F1(error)3.053 E F0
.553(parameter to bypass the def)3.053 F .552(ault actions)-.1 F
(during initialization unless the def)69.336 438 Q
(ault actions are appropriate.)-.1 E/F3 11/Times-Bold@0 SF 2.75(6.1.2 d)
69.336 471 R(warf_elf_init\(\))-.165 E F1(int dwarf_elf_init\()69.336
489 Q(Elf * elf_file_pointer,)117.336 501 Q(Dwarf_Unsigned access,)
117.336 513 Q(Dwarf_Handler errhand,)117.336 525 Q(Dwarf_Ptr errarg,)
117.336 537 Q(Dwarf_Debug * dbg,)117.336 549 Q(Dwarf_Error *error\))
117.336 561 Q F0 .62(The function)69.336 579 R F1(dwarf_elf_init\(\))
3.12 E F0 .621(is identical to)3.12 F F1(dwarf_init\(\))3.121 E F0 -.15
(ex)3.121 G .621(cept that an open).15 F F1 .621(Elf *)3.121 F F0
(pointer)3.121 E 1.143(is passed instead of a f)69.336 591 R 1.142
(ile descriptor)-.2 F 6.142(.I)-.55 G 3.642(ns)-6.142 G 1.142
(ystems supporting)-3.642 F F1(ELF)3.642 E F0 1.142(object f)3.642 F
1.142(iles this may be more space or)-.2 F(time-ef)69.336 603 Q -.2(fi)
-.25 G 1.19(cient than using).2 F F1(dwarf_init\(\))3.69 E F0 6.19(.T)C
1.19(he client is allo)-6.19 F 1.19(wed to use the)-.25 F F1 1.19(Elf *)
3.69 F F0 1.19(pointer for its o)3.69 F(wn)-.25 E .671
(purposes without restriction during the time the)69.336 615 R F1
(Dwarf_Debug)3.171 E F0 .671(is open, e)3.171 F .67
(xcept that the client should not)-.15 F F1(elf_end\(\))69.336 627 Q F0
(the pointer till after)2.5 E F1(dwarf_finish)5 E F0(is called.)2.5 E F3
2.75(6.1.3 d)69.336 660 R(warf_get_elf\(\))-.165 E F1
(int dwarf_get_elf\()69.336 678 Q(Dwarf_Debug dbg,)117.336 690 Q(Elf **)
117.336 702 Q(elf,)36 E(Dwarf_Error *error\))117.336 714 Q F0 .199
(When it returns)69.336 732 R F1(DW_DLV_OK)2.699 E F0 2.699(,t)C .199
(he function)-2.699 F F1(dwarf_get_elf\(\))2.699 E F0 .199
(returns through the pointer)2.699 F F1(elf)2.7 E F0(the)2.7 E F1(Elf)
2.7 E F0(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)
120.71 G 2.5(9-)-2.5 G 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(0-)-2.5 G/F1 10
/Courier@0 SF(*)69.336 96 Q F0 3.204
(handle used to access the object represented by the)5.704 F F1
(Dwarf_Debug)5.703 E F0(descriptor)5.703 E F1(dbg)5.703 E F0 8.203(.I)C
5.703(tr)-8.203 G(eturns)-5.703 E F1(DW_DLV_ERROR)69.336 108 Q F0
(on error)2.5 E(.)-.55 E(Because)69.336 132 Q F1 .522
(int dwarf_init\(\))3.022 F F0 .523
(opens an Elf descriptor on its fd and)3.023 F F1(dwarf_finish\(\))3.023
E F0 .523(does not close)3.023 F .631(that descriptor)69.336 144 R 3.131
(,a)-.4 G 3.131(na)-3.131 G .631(pp should use)-3.131 F F1
(dwarf_get_elf)3.131 E F0 .631(and should call)3.131 F F1(elf_end)3.131
E F0 .63(with the pointer returned)3.13 F(through the)69.336 156 Q F1
(Elf**)2.5 E F0(handle created by)2.5 E F1(int dwarf_init\(\))2.5 E F0
(.)A(This function is not meaningful for a system that does not use the\
 Elf format for objects.)69.336 180 Q/F2 11/Times-Bold@0 SF 2.75
(6.1.4 d)69.336 213 R(warf_set_tied_dbg\(\))-.165 E F1
(int dwarf_set_tied_dbg\()69.336 231 Q(Dwarf_Debug dbg,)117.336 243 Q
(Dwarf_Debug tieddbg,)117.336 255 Q(Dwarf_Error *error\))117.336 267 Q
F0 1.496(The function)69.336 285 R F1(dwarf_set_tied_dbg\(\))3.996 E F0
1.496(enables cross-object access of D)3.996 F -1.2(WA)-.3 G 1.497
(RF data.)1.2 F 1.497(If a D)6.497 F -1.2(WA)-.3 G(RF5)1.2 E -.15(Pa)
69.336 297 S 2.295(ckage object has).15 F F1(DW_FORM_addrx)4.795 E F0
(or)4.795 E F1(DW_FORM_GNU_addr_index)4.795 E F0 2.295
(in ad address attrib)4.795 F 2.295(ute one)-.2 F .828(needs both the P)
69.336 309 R .828(ackage f)-.15 F .828(ile and the e)-.2 F -.15(xe)-.15
G .829(cutable to e).15 F .829(xtract the actual address with)-.15 F F1
(dwarf_formaddr\(\))3.329 E F0(.)A 1.369(So one does a normal)69.336 321
R F1(dwarf_elf_init\(\))3.869 E F0(or)3.869 E F1(dwarf_init\(\))3.869 E
F0 1.368(on each object and then tie the tw)3.869 F(o)-.1 E
(together with a call)69.336 333 Q(such as:)5 E F1
(void example2\(Dwarf_Debug dbg, Dwarf_Debug tieddbg\))89.336 351 Q({)
89.336 363 Q(Dwarf_Error error = 0;)101.336 375 Q(int res = 0;)101.336
387 Q(/* Do the dwarf_init\(\) or dwarf_elf_init)101.336 411 Q
(calls to set)119.336 423 Q(dbg, tieddbg at this point. Then: */)119.336
435 Q(res = dwarf_set_tied_dbg\(dbg,tieddbg,&error\);)101.336 447 Q
(if \(res != DW_DLV_OK\) {)101.336 459 Q(/* Something went wrong*/)
113.336 471 Q(})101.336 483 Q(})89.336 495 Q F0
(When done with both dbg and tieddbg do the normal f)69.336 525 Q
(inishing operations on both in an)-.2 E 2.5(yo)-.15 G(rder)-2.5 E(.)
-.55 E(It is possible to undo the tieing operation with)69.336 549 Q F1
(void example3\(Dwarf_Debug dbg\))89.336 567 Q({)89.336 579 Q
(Dwarf_Error error = 0;)101.336 591 Q(int res = 0;)101.336 603 Q
(res = dwarf_set_tied_dbg\(dbg,NULL,&error\);)101.336 615 Q
(if \(res != DW_DLV_OK\) {)101.336 627 Q(/* Something went wrong*/)
113.336 639 Q(})101.336 651 Q(})89.336 663 Q F0
(It is not necessary to undo the tieing operation before f)69.336 693 Q
(inishing on the dbg and tieddbg.)-.2 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G 2.5(0-)-2.5 G 0 Cg EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(1-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.1.5 d)69.336 99 R(warf_f)-.165 E(inish\(\))-.275
E/F2 10/Courier@0 SF(int dwarf_finish\()69.336 117 Q(Dwarf_Debug dbg,)
117.336 129 Q(Dwarf_Error *error\))117.336 141 Q F0 1.262(The function)
69.336 159 R F2(dwarf_finish\(\))3.762 E F0 1.263(releases all)3.762 F
/F3 10/Times-Italic@0 SF(Libdwarf)3.763 E F0 1.263
(internal resources associated with the descriptor)3.763 F F2(dbg)69.336
171 Q F0 2.581(,a)C .081(nd in)-2.581 F -.25(va)-.4 G(lidates).25 E F2
(dbg)2.581 E F0 5.081(.I)C 2.581(tr)-5.081 G(eturns)-2.581 E F2
(DW_DLV_ERROR)2.581 E F0 .08(if there is an error during the f)2.581 F
.08(inishing operation.)-.2 F(It)5.08 E(returns)69.336 183 Q F2
(DW_DLV_OK)2.5 E F0(for a successful operation.)2.5 E(Because)69.336 207
Q F2 .522(int dwarf_init\(\))3.022 F F0 .523
(opens an Elf descriptor on its fd and)3.023 F F2(dwarf_finish\(\))3.023
E F0 .523(does not close)3.023 F .631(that descriptor)69.336 219 R 3.131
(,a)-.4 G 3.131(na)-3.131 G .631(pp should use)-3.131 F F2
(dwarf_get_elf)3.131 E F0 .631(and should call)3.131 F F2(elf_end)3.131
E F0 .63(with the pointer returned)3.13 F(through the)69.336 231 Q F2
(Elf**)2.5 E F0(handle created by)2.5 E F2(int dwarf_init\(\))2.5 E F0
(.)A F1 2.75(6.1.6 d)69.336 264 R(warf_set_stringcheck\(\))-.165 E F2
(int dwarf_set_stringcheck\()69.336 282 Q(int stringcheck\))117.336 294
Q F0 .982(The function)69.336 312 R F2 .982
(int dwarf_set_stringcheck\(\))3.482 F F0 .982
(sets a global flag and returns the pre)3.482 F .983(vious v)-.25 F .983
(alue of)-.25 F(the global flag.)69.336 324 Q .199
(If the stringcheck global flag is zero \(the def)69.336 348 R .198
(ault\) libdw)-.1 F .198(arf does string length v)-.1 F .198
(alidity checks \(the checks do)-.25 F(slo)69.336 360 Q 3.515(wl)-.25 G
(ibdw)-3.515 E 1.015(arf do)-.1 F 1.015(wn v)-.25 F 1.015
(ery slightly\).)-.15 F 1.015
(If the stringcheck global flag is non-zero libdw)6.015 F 1.015
(arf does not do string)-.1 F(length v)69.336 372 Q(alidity checks.)-.25
E(The global flag is really just 8 bits long, upperbits are not noticed\
 or recorded.)69.336 396 Q F1 2.75(6.1.7 d)69.336 429 R(warf_set_r)-.165
E(eloc_application\(\))-.198 E F2(int dwarf_set_reloc_application\()
69.336 447 Q(int apply\))117.336 459 Q F0 1.047(The function)69.336 477
R F2 1.047(int dwarf_set_reloc_application\(\))3.547 F F0 1.046
(sets a global flag and returns the pre)3.547 F(vious)-.25 E -.25(va)
69.336 489 S(lue of the global flag.).25 E .511
(If the reloc_application global flag is non-zero \(the def)69.336 513 R
.511(ault\) then the applicable .rela section \(if one e)-.1 F(xists\))
-.15 E .053(will be processed and applied to an)69.336 525 R 2.552(yD)
-.15 G -1.2(WA)-2.852 G .052(RF section when it is read in.)1.2 F .052
(If the reloc_application global flag)5.052 F
(is zero no such relocation-application is attempted.)69.336 537 Q .395
(Not all machine types \(elf header e_machine\) or all relocations are \
supported, b)69.336 561 R .395(ut then v)-.2 F .395(ery fe)-.15 F 2.895
(wr)-.25 G(elocation)-2.895 E(types apply to D)69.336 573 Q -1.2(WA)-.3
G(RF deb)1.2 E(ug sections.)-.2 E(The global flag is really just 8 bits\
 long, upperbits are not noticed or recorded.)69.336 597 Q
(It seems unlik)69.336 621 Q(ely an)-.1 E
(yone will need to call this function.)-.15 E F1 2.75(6.1.8 d)69.336 654
R(warf_r)-.165 E(ecord_cmdline_options\(\))-.198 E F2
(int dwarf_record_cmdline_options\()69.336 672 Q
(Dwarf_Cmdline_Options options\))117.336 684 Q F0 5.845(The function)
69.336 702 R F2 5.845(int dwarf_record_cmdline_options\(\))8.345 F F0
5.845(copies a Dw)8.345 F(arf_Cmdline_Options)-.1 E
(structure from consumer code to libdw)69.336 714 Q(arf.)-.1 E
(The structure is def)69.336 738 Q(ined in)-.2 E F2(libdwarf.h)2.5 E F0
(.)A(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71
G 2.5(1-)-2.5 G 0 Cg EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(2-)-2.5 G 1.107
(The initial v)69.336 96 R 1.107
(ersion of this structure has a single f)-.15 F(ield)-.2 E/F1 10
/Courier@0 SF(check_verbose_mode)3.607 E F0 1.108
(which, if non-zero, tells)3.607 F(libdw)69.336 108 Q(arf to print some\
 detailed messages to stdout in case certain errors are detected.)-.1 E
(The def)69.336 132 Q(ault for this v)-.1 E(alue is F)-.25 E
(ALSE \(0\) so the e)-.74 E(xtra messages are of)-.15 E 2.5(fb)-.25 G
2.5(yd)-2.5 G(ef)-2.5 E(ault.)-.1 E/F2 12/Times-Bold@0 SF 3(6.2 Section)
69.336 166 R(size operations)3 E F0(These operations are informati)
69.336 184 Q .3 -.15(ve b)-.25 H(ut not normally needed.)-.05 E/F3 11
/Times-Bold@0 SF 2.75(6.2.1 d)69.336 205 R
(warf_get_section_max_offsets_b\(\))-.165 E F1
(int dwarf_get_section_max_offsets_b\(Dwarf_debug dbg,)69.336 223 Q
(Dwarf_Unsigned * /*debug_info_size*/,)93.336 235 Q
(Dwarf_Unsigned * /*debug_abbrev_size*/,)93.336 247 Q
(Dwarf_Unsigned * /*debug_line_size*/,)93.336 259 Q
(Dwarf_Unsigned * /*debug_loc_size*/,)93.336 271 Q
(Dwarf_Unsigned * /*debug_aranges_size*/,)93.336 283 Q
(Dwarf_Unsigned * /*debug_macinfo_size*/,)93.336 295 Q
(Dwarf_Unsigned * /*debug_pubnames_size*/,)93.336 307 Q
(Dwarf_Unsigned * /*debug_str_size*/,)93.336 319 Q
(Dwarf_Unsigned * /*debug_frame_size*/,)93.336 331 Q
(Dwarf_Unsigned * /*debug_ranges_size*/,)93.336 343 Q
(Dwarf_Unsigned * /*debug_pubtypes_size*/,)93.336 355 Q
(Dwarf_Unsigned * /*debug_types_size*/\);)93.336 367 Q F0 2.406
(The function)69.336 385 R F1(dwarf_get_section_max_offsets_b\(\))4.906
E F0 2.406(an open Dw)4.906 F 2.405(arf_Dbg and reports on the)-.1 F
(section sizes by pushing section size v)69.336 397 Q 2.5(alues back)
-.25 F(through the pointers.)2.5 E(Created in October 2011.)69.336 421 Q
F3 2.75(6.2.2 d)69.336 454 R(warf_get_section_max_offsets\(\))-.165 E F1
(int dwarf_get_section_max_offsets\(Dwarf_debug dbg,)69.336 472 Q
(Dwarf_Unsigned * /*debug_info_size*/,)93.336 484 Q
(Dwarf_Unsigned * /*debug_abbrev_size*/,)93.336 496 Q
(Dwarf_Unsigned * /*debug_line_size*/,)93.336 508 Q
(Dwarf_Unsigned * /*debug_loc_size*/,)93.336 520 Q
(Dwarf_Unsigned * /*debug_aranges_size*/,)93.336 532 Q
(Dwarf_Unsigned * /*debug_macinfo_size*/,)93.336 544 Q
(Dwarf_Unsigned * /*debug_pubnames_size*/,)93.336 556 Q
(Dwarf_Unsigned * /*debug_str_size*/,)93.336 568 Q
(Dwarf_Unsigned * /*debug_frame_size*/,)93.336 580 Q
(Dwarf_Unsigned * /*debug_ranges_size*/,)93.336 592 Q
(Dwarf_Unsigned * /*debug_pubtypes_size*/\);)93.336 604 Q F0 2.575
(The function is the same as)69.336 622 R F1
(dwarf_get_section_max_offsets_b\(\))5.075 E F0 -.15(ex)5.076 G 2.576
(cept it is missing the).15 F F1(debug_types_size\(\))69.336 634 Q F0
(ar)2.5 E 2.5(gument. Though)-.18 F(obsolete it is still supported.)2.5
E F2 3(6.3 Printf)69.336 668 R(Callbacks)3 E F0(This is ne)69.336 686 Q
2.5(wi)-.25 G 2.5(nA)-2.5 G(ugust 2013.)-2.5 E(The)69.336 704 Q F1
(dwarf_print_lines\(\))3.116 E F0 .615
(function is intended as a helper to programs lik)3.116 F(e)-.1 E F1
(dwarfdump)3.115 E F0 .615(and sho)3.115 F(w)-.25 E 1.064
(some line internal details in a w)69.336 716 R 1.064
(ay only the interals of libdw)-.1 F 1.065(arf can sho)-.1 F 3.565(wt)
-.25 G 1.065(hese details.)-3.565 F 1.065(But using printf)6.065 F .715
(directly in libdw)69.336 728 R .715
(arf means the caller has limited control of where the output appears.)
-.1 F .714(So no)5.714 F 3.214(wt)-.25 G .714(he 'printf)-3.214 F(').55
E 1.075(output is passed back to the caller through a callback function\
 whose implementation is pro)69.336 740 R 1.075(vided by the)-.15 F(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G 2.5
(2-)-2.5 G 0 Cg EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(3-)-2.5 G(caller)69.336
96 Q(.)-.55 E(An)69.336 114 Q 2.513(yc)-.15 G .013(ode calling libdw)
-2.513 F .013
(arf can ignore the functions described in this section completely)-.1 F
5.012(.I)-.65 G 2.512(ft)-5.012 G .012(he functions are)-2.512 F
(ignored the messages \(if an)69.336 126 Q(y\) from libdw)-.15 E
(arf will simply not appear an)-.1 E(ywhere.)-.15 E(The)69.336 144 Q/F1
10/Courier@0 SF(libdwarf.h)9.435 E F0 6.936(header f)9.435 F 6.936
(ile def)-.2 F(ines)-.2 E F1 6.936(struct Dwarf_Printf_Callback_Info_s)
9.436 F F0(and)9.436 E F1(dwarf_register_printf_callback)69.336 156 Q F0
.731(for those libdw)3.232 F .731
(arf callers wishing to implement the callback.)-.1 F .184
(In this section we describe ho)69.336 168 R 2.684(wo)-.25 G .184
(ne uses that interf)-2.684 F 2.684(ace. The)-.1 F(applications)2.685 E
F1(dwarfdump)2.685 E F0(and)5.185 E F1(dwarfdump2)2.685 E F0(are e)
69.336 180 Q(xamples of ho)-.15 E 2.5(wt)-.25 G(hese may be used.)-2.5 E
/F2 11/Times-Bold@0 SF 2.75(6.3.1 d)69.336 237 R(warf_r)-.165 E
(egister_printf_callback)-.198 E F1 6
(struct Dwarf_Printf_Callback_Info_s)69.336 255 R
(dwarf_register_printf_callback\(Dwarf_Debug dbg,)93.336 267 Q 6
(struct Dwarf_Printf_Callback_Info_s)93.336 279 R 6(*n)6 G(ewvalues\);)
-6 E F0(The)69.336 297 Q F1(dwarf_register_printf_callback\(\))6.523 E
F0 1.522(function can only be called after the Dw)4.023 F(arf_Deb)-.1 E
(ug)-.2 E .306(instance has been initialized, the call mak)69.336 309 R
.306(es no sense at other times.)-.1 F .307
(The function returns the current v)5.307 F(alue)-.25 E 1.151
(of the structure.)69.336 321 R(If)6.151 E F1(newvalues)3.651 E F0 1.151
(is non-null then the passed-in v)3.651 F 1.15
(alues are used to initialize the libdw)-.25 F(arf)-.1 E 2.759
(internal callback data \(the v)69.336 333 R 2.759
(alues returned are the v)-.25 F 2.759(alues before the)-.25 F F1
(newvalues)5.26 E F0 2.76(are recorded\).)5.26 F(If)7.76 E F1(newvalues)
69.336 345 Q F0(is null no change is made to the libdw)2.5 E
(arf internal callback data.)-.1 E F2 2.75
(6.3.2 Dwarf_Printf_Callback_Inf)69.336 414 R(o_s)-.275 E F1
(struct Dwarf_Printf_Callback_Info_s {)69.336 432 Q(void *)93.336 444 Q
(dp_user_pointer;)144 E(dwarf_printf_callback_function_type dp_fptr;)
93.336 456 Q(char *)93.336 468 Q(dp_buffer;)144 E(unsigned int)93.336
480 Q(dp_buffer_len;)108 E 156(int dp_buffer_user_provided;)93.336 492 R
(void *)93.336 504 Q(dp_reserved;)144 E(};)69.336 516 Q F0 13.057
(First we describe the f)69.336 534 R 13.057
(ields as applicable in setting up for a call to)-.2 F F1
(dwarf_register_printf_callback\(\))69.336 546 Q F0(.)A .459(The f)
69.336 564 R(ield)-.2 E F1(dp_user_pointer)2.959 E F0 .459
(is remembered by libdw)2.959 F .459(arf and passed back in an)-.1 F
2.96(yc)-.15 G .46(all libdw)-2.96 F .46(arf mak)-.1 F .46(es to)-.1 F
(the user')69.336 576 Q 2.5(sc)-.55 G(allback function.)-2.5 E
(It is otherwise ignored by libdw)5 E(arf.)-.1 E(The f)69.336 594 Q
(ield)-.2 E F1(dp_fptr)2.5 E F0(is either NULL or a pointer to a user)
2.5 E(-implemented function.)-.2 E .667(If the f)69.336 612 R(ield)-.2 E
F1(dp_buffer_user_provided)3.167 E F0 .667(is non-zero then)3.167 F F1
(dp_buffer_len)3.167 E F0(and)3.167 E F1(dp_buffer)3.167 E F0(must)3.167
E 2.188(be set by the user and libdw)69.336 624 R 2.188
(arf will use that b)-.1 F(uf)-.2 E 2.189(fer without doing an)-.25 F
4.689(ym)-.15 G 2.189(alloc of space.)-4.689 F 2.189(If the f)7.189 F
(ield)-.2 E F1(dp_buffer_user_provided)69.336 636 Q F0 1.445
(is zero then the input f)3.945 F(ields)-.2 E F1(dp_buffer_len)3.945 E
F0(and)3.945 E F1(dp_buffer)3.945 E F0(are)3.945 E(ignored by libdw)
69.336 648 Q(arf and space is malloc')-.1 E 2.5(da)-.5 G 2.5(sn)-2.5 G
(eeded.)-2.5 E(The f)69.336 666 Q(ield)-.2 E F1(dp_reserved)2.5 E F0
(is ignored, it is reserv)2.5 E(ed for future use.)-.15 E 1.03
(When the structure is returned by)69.336 684 R F1
(dwarf_register_printf_callback\(\))3.53 E F0 1.03(the v)3.53 F 1.03
(alues of the f)-.25 F(ields)-.2 E(before the)69.336 696 Q F1
(dwarf_register_printf_callback\(\))2.5 E F0(call are returned.)2.5 E
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G
2.5(3-)-2.5 G 0 Cg EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(4-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.3.3 d)69.336 99 R
(warf_printf_callback_function_type)-.165 E/F2 10/Courier@0 SF(typedef \
void \(* dwarf_printf_callback_function_type\)\(void * user_pointer,)
69.336 117 Q(const char * linecontent\);)93.336 129 Q F0(An)69.336 147 Q
23.329(ya)-.15 G 20.829
(pplication using the callbacks needs to use the function)-23.329 F F2
(dwarf_register_printf_callback\(\))69.336 159 Q F0 4.346
(and supply a function matching the abo)6.846 F 4.647 -.15(ve f)-.15 H
(unction).15 E(prototype from libdw)69.336 171 Q(arf.h.)-.1 E F1 2.75
(6.3.4 Example)69.336 204 R
(of printf callback use in a C++ application using libd)2.75 E(warf)
-.165 E F2(struct Dwarf_Printf_Callback_Info_s printfcallbackdata;)
69.336 222 Q
(memset\(&printfcallbackdata,0,sizeof\(printfcallbackdata\)\);)93.336
234 Q(printfcallbackdata.dp_fptr = printf_callback_for_libdwarf;)93.336
246 Q(dwarf_register_printf_callback\(dbg,&printfcallbackdata\);)93.336
258 Q(Assuming the user implements something)69.336 282 Q
(like the following function in her application:)69.336 294 Q(void)
69.336 318 Q
(printf_callback_for_libdwarf\(void *userdata,const char *data\))69.336
330 Q({)69.336 342 Q(cout << data;)99.336 354 Q(})69.336 366 Q F0 .684
(It is crucial that the user')69.336 384 R 3.184(sc)-.55 G .683
(allback function copies or prints the data immediately)-3.184 F 3.183
(.O)-.65 G .683(nce the user callback)-3.183 F(function returns the)
69.336 396 Q F2(data)2.5 E F0
(pointer may change or become stale without w)2.5 E(arning.)-.1 E/F3 12
/Times-Bold@0 SF 3(6.4 Deb)69.336 442 R(ugging Inf)-.24 E
(ormation Entry Deli)-.3 E -.12(ve)-.12 G(ry Operations).12 E F0 .555
(These functions are concerned with accessing deb)69.336 460 R .555
(ugging information entries, whether from a .deb)-.2 F(ug_info,)-.2 E
(.deb)69.336 472 Q .454(ug_types, .deb)-.2 F(ug_info.dw)-.2 E .454
(o, or .deb)-.1 F(ug_types.dw)-.2 E -2.954 2.954(o. S)-.1 H .454
(ince all such sections use similar formats, one set)-2.954 F
(of functions suf)69.336 484 Q -.2(fi)-.25 G(ces.).2 E F1 2.75(6.4.1 d)
69.336 517 R(warf_get_die_section_name\(\))-.165 E F0(int)69.336 535 Q
(dw)69.336 547 Q(arf_get_die_section_name\(Dw)-.1 E(arf_Deb)-.1 E
(ug dbg,)-.2 E(Dw)79.336 559 Q 7.5(arf_Bool is_info,)-.1 F
(const char ** sec_name,)79.336 571 Q(Dw)79.336 583 Q
(arf_Error * error\);)-.1 E F2(dwarf_get_die_section_name\(\))69.336 601
Q F0 .191(lets consumers access the object section name.)2.69 F .191
(This is useful for)5.191 F 1.294(applications w)69.336 613 R 1.294
(anting to print the name, b)-.1 F 1.294
(ut of course the object section name is not really a part of the)-.2 F
-.3(DW)69.336 625 S .785(ARF information.)-.9 F .785
(Most applications will probably not call this function.)5.785 F .786
(It can be called at an)5.786 F 3.286(yt)-.15 G(ime)-3.286 E
(after the Dw)69.336 637 Q(arf_Deb)-.1 E(ug initialization is done.)-.2
E 3.808(The function)69.336 655 R F2(dwarf_get_die_section_name\(\))
6.308 E F0 3.807(operates on the either the .deb)6.308 F(ug_info[.dw)-.2
E(o])-.1 E(section \(if)69.336 667 Q F2(is_info)2.5 E F0
(is non-zero\) or .deb)2.5 E(ug_types[.dw)-.2 E(o] section \(if)-.1 E F2
(is_info)2.5 E F0(is zero\).)2.5 E .833(If the function succeeds,)69.336
685 R F2(*sec_name)3.333 E F0 .833
(is set to a pointer to a string with the object section name and the)
3.333 F .79(function returns)69.336 697 R F2(DW_DLV_OK)3.29 E F0 5.79
(.D)C 3.29(on)-5.79 G .79(ot free the string whose pointer is returned.)
-3.29 F -.15(Fo)5.79 G 3.29(rn).15 G .79(on-Elf objects it is)-3.29 F
.823(possible the string pointer returned will be NULL or will point to\
 an empty string.)69.336 709 R .823(It is up to the calling)5.823 F(app\
lication to recognize this possibility and deal with it appropriately)
69.336 721 Q(.)-.65 E(If the section does not e)69.336 739 Q
(xist the function returns D)-.15 E(W_DL)-.3 E(V_NO_ENTR)-1 E -1.29(Y.)
-.65 G(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)
120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(5-)-2.5 G
(If there is an internal error detected the function returns)69.336 96 Q
/F1 10/Courier@0 SF(DW_DLV_ERROR)2.5 E F0(and sets the)2.5 E F1(*error)
2.5 E F0(pointer)2.5 E(.)-.55 E/F2 11/Times-Bold@0 SF 2.75(6.4.2 d)
69.336 153 R(warf_next_cu_header_d\(\))-.165 E F1
(int dwarf_next_cu_header_d\()69.336 171 Q(Dwarf_debug dbg,)117.336 183
Q(Dwarf_Bool is_info,)117.336 195 Q(Dwarf_Unsigned *cu_header_length,)
117.336 207 Q 24(Dwarf_Half *version_stamp,)117.336 219 R
(Dwarf_Unsigned *abbrev_offset,)117.336 231 Q 24
(Dwarf_Half *address_size,)117.336 243 R 24(Dwarf_Half *offset_size,)
117.336 255 R 24(Dwarf_Half *extension_size,)117.336 267 R 24
(Dwarf_Sig8 *signature,)117.336 279 R(Dwarf_Unsigned *typeoffset)117.336
291 Q(Dwarf_Unsigned *next_cu_header,)117.336 303 Q 24
(Dwarf_Half *header_cu_type,)117.336 315 R 18(Dwarf_Error *error\);)
117.336 327 R F0 3.297(The function)69.336 345 R F1
(dwarf_next_cu_header_d\(\))5.797 E F0 3.297
(operates on the either the .deb)5.797 F 8.297(ug_info section)-.2 F
(\(if)5.797 E F1(is_info)69.336 357 Q F0 1.339(is non-zero\) or .deb)
3.839 F 1.339(ug_types section \(if)-.2 F F1(is_info)3.839 E F0 1.339
(is zero\).)3.839 F 1.34(It returns)6.339 F F1(DW_DLV_ERROR)3.84 E F0
1.34(if it)3.84 F -.1(fa)69.336 369 S(ils, and).1 E F1(DW_DLV_OK)2.5 E
F0(if it succeeds.)2.5 E .409(If it succeeds,)69.336 387 R F1
(*next_cu_header)2.908 E F0 .408(is set to the of)2.908 F .408
(fset in the .deb)-.25 F .408(ug_info section of the ne)-.2 F .408
(xt compilation-)-.15 F .054(unit header if it succeeds.)69.336 399 R
.054(On reading the last compilation-unit header in the .deb)5.054 F
.055(ug_info section it contains)-.2 F 1.249(the size of the .deb)69.336
411 R 1.248(ug_info or deb)-.2 F 1.248(ug_types section.)-.2 F 1.248
(The ne)6.248 F 1.248(xt call to)-.15 F F1(dwarf_next_cu_header_b\(\))
3.748 E F0(returns)69.336 423 Q F1(DW_DLV_NO_ENTRY)6.883 E F0 4.384
(without reading a compilation-unit or setting)6.883 F F1
(*next_cu_header)6.884 E F0(.)A .718(Subsequent calls to)69.336 435 R F1
(dwarf_next_cu_header\(\))3.218 E F0 .717(repeat the c)3.217 F .717
(ycle by reading the f)-.15 F .717(irst compilation-unit)-.2 F
(and so on.)69.336 447 Q 2.644(The other v)69.336 465 R 2.644
(alues returned through pointers are the v)-.25 F 2.645
(alues in the compilation-unit header)-.25 F 7.645(.I)-.55 G 5.145(fa)
-7.645 G 2.945 -.15(ny o)-5.145 H(f).15 E F1(cu_header_length)69.336 477
Q F0(,)A F1(version_stamp)7.375 E F0(,)A F1(abbrev_offset)7.375 E F0(,)A
F1(address_size)7.375 E F0(,)A F1(offset_size)7.375 E F0(,)A F1
(extension_size)69.336 489 Q F0(,)A F1(signature)2.706 E F0 2.707(,o)C
(r)-2.707 E F1(typeoffset)2.707 E F0 2.707(,i)C(s)-2.707 E F1(NULL)2.707
E F0 2.707(,t)C .207(he ar)-2.707 F .207
(gument is ignored \(meaning it is not)-.18 F(an error to pro)69.336 501
Q(vide a)-.15 E F1(NULL)2.5 E F0(pointer for an)2.5 E 2.5(yo)-.15 G 2.5
(ra)-2.5 G(ll of these ar)-2.5 E(guments\).)-.18 E F1(cu_header_length)
69.336 519 Q F0
(returns the length in bytes of the compilation unit header)2.5 E(.)-.55
E F1(version_stamp)69.336 537 Q F0 1.322(returns the section v)3.823 F
1.322(ersion, which w)-.15 F 1.322(ould be \(for .deb)-.1 F 1.322
(ug_info\) 2 for D)-.2 F -1.2(WA)-.3 G 1.322(RF2, 3 for)1.2 F -.3(DW)
69.336 549 S(ARF4, or 4 for D)-.9 E -1.2(WA)-.3 G(RF4.)1.2 E F1
(abbrev_offset)69.336 567 Q F0(returns the .deb)2.5 E(ug_abbre)-.2 E 2.5
(vs)-.25 G(ection of)-2.5 E(fset of the abbre)-.25 E
(viations for this compilation unit.)-.25 E F1(address_size)69.336 585 Q
F0(returns the size of an address in this compilation unit.)2.5 E
(Which is usually 4 or 8.)5 E F1(offset_size)69.336 603 Q F0 .213
(returns the size in bytes of an of)2.713 F .213
(fset for the compilation unit.)-.25 F .213(The of)5.213 F .214
(fset size is 4 for 32bit)-.25 F(dw)69.336 615 Q .245
(arf and 8 for 64bit dw)-.1 F 2.745(arf. This)-.1 F .245(is the of)2.745
F .244(fset size in dw)-.25 F .244
(arf data, not the address size inside the e)-.1 F -.15(xe)-.15 G
(cutable).15 E 2.924(code. The)69.336 627 R(of)2.924 E .424
(fset size can be 4 e)-.25 F -.15(ve)-.25 G 2.924(ni).15 G 2.924(fe)
-2.924 G .425(mbedded in a 64bit elf f)-2.924 F .425
(ile \(which is normal for 64bit elf\), and can)-.2 F(be 8 e)69.336 639
Q -.15(ve)-.25 G 2.5(ni).15 G 2.5(na3)-2.5 G(2bit elf f)-2.5 E
(ile \(which probably will ne)-.2 E -.15(ve)-.25 G 2.5(rb).15 G 2.5(es)
-2.5 G(een in practice\).)-2.5 E(The)69.336 657 Q F1(extension_size)
2.742 E F0 .242(pointer is only rele)2.742 F -.25(va)-.25 G .241
(nt if the).25 F F1(offset_size)2.741 E F0 .241(pointer returns 8.)2.741
F .241(The v)5.241 F .241(alue is not)-.25 F 1.566(normally useful b)
69.336 669 R 1.567(ut is returned through the pointer for completeness.)
-.2 F 1.567(The pointer)6.567 F F1(extension_size)4.067 E F0 1.399
(returns 0 if the CU is MIPS/IRIX non-standard 64bit dw)69.336 681 R
1.398(arf \(MIPS/IRIX 64bit dw)-.1 F 1.398(arf w)-.1 F 1.398
(as created years)-.1 F .383(before D)69.336 693 R -1.2(WA)-.3 G .383
(RF3 def)1.2 F .384(ined 64bit dw)-.2 F .384
(arf\) and returns 4 if the dw)-.1 F .384(arf uses the standard 64bit e)
-.1 F .384(xtension \(the 4 is)-.15 F 1.525
(the size in bytes of the 0xf)69.336 705 R 2.025 -.25(fffffff i)-.25 H
4.025(nt).25 G 1.525(he initial length f)-4.025 F 1.525
(ield which indicates the follo)-.2 F 1.524(wing 8 bytes in the)-.25 F
(.deb)69.336 717 Q(ug_info section are the real length\).)-.2 E
(See the D)5 E -1.2(WA)-.3 G(RF3 or D)1.2 E -1.2(WA)-.3 G
(RF4 standard, section 7.4.)1.2 E(The)69.336 735 Q F1(signature)2.5 E F0
(pointer is only rele)2.5 E -.25(va)-.25 G(nt if).25 E(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G 2.5(5-)-2.5 G 0 Cg
EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(6-)-2.5 G 1.081
(the CU has a type signature, and if rele)71.836 96 R -.25(va)-.25 G
1.082(nt the 8 byte type signature of the .deb).25 F 1.082
(ug_types CU header is)-.2 F(assigned through the pointer)69.336 108 Q
(.)-.55 E(The)69.336 126 Q/F1 10/Courier@0 SF(typeoffset)3.332 E F0 .832
(pointer is only rele)3.332 F -.25(va)-.25 G .832
(nt the CU has a type signature if rele).25 F -.25(va)-.25 G .831
(nt the local of).25 F .831(fset within)-.25 F 2.153
(the CU of the the type of)69.336 138 R 2.153(fset the .deb)-.25 F 2.153
(ug_types entry represents is assigned through the pointer)-.2 F 7.154
(.T)-.55 G(he)-7.154 E F1(typeoffset)69.336 150 Q F0 .192
(matters because a D)2.693 F(W_A)-.3 E .192
(T_type referencing the type unit may reference an inner type, such)
-1.11 F 1.059(as a)69.336 162 R 1.059(C++ class in a C++ namespace, b)
6.059 F 1.06(ut the type itself has the enclosing namespace in the .deb)
-.2 F(ug_type)-.2 E(type_unit.)69.336 174 Q(The)69.336 192 Q F1
(header_cu_type)2.536 E F0 .036(pointer is applicable to all)2.536 F
.035(CU headers.)5.035 F .035(The v)5.035 F .035
(alue returned through the pointer is)-.25 F(either)69.336 204 Q F1
-3.027(DW_UT_compile DW_UT_partial DW_UT_type)2.973 F F0 .473
(and identif)2.973 F .473(ies the header type of this CU.)-.2 F(In)5.474
E F1(DWARF4)69.336 216 Q F0(a)4.297 E F1(DW_UT_type)4.297 E F0 1.797
(will be in)4.297 F F1(.debug_types)4.297 E F0 4.296(,b)C 1.796(ut in)
-4.496 F F1(DWARF5)4.296 E F0 1.796(these compilation units are in)4.296
F F1(.debug_info)69.336 228 Q F0(and the Deb)2.5 E(ug Fission)-.2 E F1
(.debug_info.dwo)2.5 E F0(.)2.5 E/F2 11/Times-Bold@0 SF 2.75(6.4.3 d)
69.336 261 R(warf_next_cu_header_c\(\))-.165 E F1
(int dwarf_next_cu_header_c\()69.336 279 Q(Dwarf_debug dbg,)117.336 291
Q(Dwarf_Bool is_info,)117.336 303 Q(Dwarf_Unsigned *cu_header_length,)
117.336 315 Q 24(Dwarf_Half *version_stamp,)117.336 327 R
(Dwarf_Unsigned *abbrev_offset,)117.336 339 Q 24
(Dwarf_Half *address_size,)117.336 351 R 24(Dwarf_Half *offset_size,)
117.336 363 R 24(Dwarf_Half *extension_size,)117.336 375 R 24
(Dwarf_Sig8 *signature,)117.336 387 R(Dwarf_Unsigned *typeoffset)117.336
399 Q(Dwarf_Unsigned *next_cu_header,)117.336 411 Q 18
(Dwarf_Error *error\);)117.336 423 R F0 3.297(The function)69.336 441 R
F1(dwarf_next_cu_header_c\(\))5.797 E F0 3.297
(operates on the either the .deb)5.797 F 8.297(ug_info section)-.2 F
(\(if)5.797 E F1(is_info)69.336 453 Q F0(is non-zero\) or .deb)2.5 E
(ug_types section \(if)-.2 E F1(is_info)2.5 E F0(is zero\).)2.5 E .722
(It operates e)69.336 471 R .722(xactly lik)-.15 F(e)-.1 E F1
(dwarf_next_cu_header_d\(\))3.222 E F0 -.2(bu)3.222 G 3.222(ti).2 G
3.222(sm)-3.222 G .722(issing the)-3.222 F F1(header_type)3.222 E F0 -.2
(fi)3.221 G 3.221(eld. This).2 F(is k)69.336 483 Q
(ept for compatibility)-.1 E 5(.A)-.65 G
(ll code using this should be changed to use)-5 E F1
(dwarf_next_cu_header_d\(\))2.5 E F2 2.75(6.4.4 d)69.336 528 R
(warf_next_cu_header_b\(\))-.165 E F1(int dwarf_next_cu_header_b\()
69.336 546 Q(Dwarf_debug dbg,)117.336 558 Q
(Dwarf_Unsigned *cu_header_length,)117.336 570 Q 24
(Dwarf_Half *version_stamp,)117.336 582 R
(Dwarf_Unsigned *abbrev_offset,)117.336 594 Q 24
(Dwarf_Half *address_size,)117.336 606 R 24(Dwarf_Half *offset_size,)
117.336 618 R 24(Dwarf_Half *extension_size,)117.336 630 R
(Dwarf_Unsigned *next_cu_header,)117.336 642 Q 18(Dwarf_Error *error\);)
117.336 654 R F0(This is obsolete as of October 2011 though supported.)
69.336 672 Q .674(The function)69.336 690 R F1
(dwarf_next_cu_header_b\(\))3.174 E F0 .674(operates on the .deb)5.674 F
.674(ug_info section.)-.2 F .674(It operates e)5.674 F(xactly)-.15 E
(lik)69.336 702 Q(e)-.1 E F1(dwarf_next_cu_header_c\(\))2.555 E F0 -.2
(bu)2.555 G 2.555(ti).2 G 2.555(sm)-2.555 G .055(issing the)-2.555 F F1
(signature)2.555 E F0 2.554(,a)C(nd)-2.554 E F1(typeoffset)2.554 E F0
-.2(fi)2.554 G 2.554(elds. This).2 F(is)2.554 E -.1(ke)69.336 714 S
(pt for compatibility).1 E 5(.A)-.65 G
(ll code using this should be changed to use)-5 E F1
(dwarf_next_cu_header_c\(\))2.5 E F0(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G 2.5(6-)-2.5 G 0 Cg EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(7-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.4.5 d)69.336 99 R(warf_next_cu_header\(\))-.165
E F0 .826(The follo)69.336 117 R .826
(wing is the original form, missing the)-.25 F/F2 10/Courier@0 SF
(offset_size)3.327 E F0(,)A F2(extension_size)3.327 E F0(,)A F2
(signature)3.327 E F0 3.327(,a)C(nd)-3.327 E F2(typeoffset)69.336 129 Q
F0 -.2(fi)2.632 G .132(elds in).2 F F2(dwarf_next_cu_header_c\(\))2.632
E F0 5.132(.T)C .132(his is k)-5.132 F .132(ept for compatibility)-.1 F
5.132(.A)-.65 G .131(ll code using)-5.132 F
(this should be changed to use)69.336 141 Q F2
(dwarf_next_cu_header_c\(\))2.5 E(int dwarf_next_cu_header\()69.336 159
Q(Dwarf_debug dbg,)117.336 171 Q(Dwarf_Unsigned *cu_header_length,)
117.336 183 Q 24(Dwarf_Half *version_stamp,)117.336 195 R
(Dwarf_Unsigned *abbrev_offset,)117.336 207 Q 24
(Dwarf_Half *address_size,)117.336 219 R
(Dwarf_Unsigned *next_cu_header,)117.336 231 Q 18(Dwarf_Error *error\);)
117.336 243 R F1 2.75(6.4.6 d)69.336 282 R(warf_siblingof_b\(\))-.165 E
F2(int dwarf_siblingof_b\()69.336 300 Q(Dwarf_Debug dbg,)117.336 312 Q
(Dwarf_Die die,)117.336 324 Q(Dwarf_Bool is_info,)117.336 336 Q
(Dwarf_Die *return_sib,)117.336 348 Q(Dwarf_Error *error\))117.336 360 Q
F0 .952(The function)69.336 378 R F2(dwarf_siblingof_b\(\))3.452 E F0
(returns)3.452 E F2(DW_DLV_ERROR)3.453 E F0 .953(and sets the)3.453 F F2
(error)3.453 E F0 .953(pointer on error)3.453 F(.)-.55 E 2.195
(If there is no sibling it returns)69.336 390 R F2(DW_DLV_NO_ENTRY)4.694
E F0 7.194(.W)C 2.194(hen it succeeds,)-7.194 F F2
(dwarf_siblingof_b\(\))4.694 E F0(returns)69.336 402 Q F2(DW_DLV_OK)2.5
E F0(and sets)5 E F2(*return_sib)2.5 E F0(to the)2.5 E F2(Dwarf_Die)2.5
E F0(descriptor of the sibling of)2.5 E F2(die)2.5 E F0(.)A(If)69.336
426 Q F2(is_info)2.733 E F0 .233(is non-zero then the)2.733 F F2(die)
5.233 E F0 .234(is assumed to refer to a .deb)2.734 F .234(ug_info DIE.)
-.2 F(If)5.234 E F2(is_info)2.734 E F0 .234(is zero then)2.734 F(the)
69.336 438 Q F2(die)7.472 E F0 2.472(is assumed to refer to a .deb)4.972
F 2.472(ug_types DIE.)-.2 F 2.471(Note that the f)7.472 F 2.471
(irst call \(the call that gets the)-.2 F .442
(compilation-unit DIE in a compilation unit\) passes in a NULL)69.336
450 R F2(die)2.942 E F0 .442(so ha)2.942 F .442(ving the caller pass in)
-.2 F F2(is_info)2.942 E F0 .643(is essential.)69.336 462 R .643(And if)
5.643 F F2(die)3.143 E F0 .642
(is non-NULL it is still essential for the call to pass in)3.143 F F2
(is_info)5.642 E F0 .642(set properly to)3.142 F 1.601
(reflect the section the DIE came from.)69.336 474 R 1.601(The function)
6.601 F F2(dwarf_get_die_infotypes_flag\(\))4.101 E F0 1.601(is of)6.601
F(interest as it returns the proper is_info v)69.336 486 Q(alue from an)
-.25 E 2.5(yn)-.15 G(on-NULL)-2.5 E F2(die)2.5 E F0(pointer)2.5 E(.)-.55
E(If)69.336 522 Q F2(die)3.33 E F0(is)3.33 E/F3 10/Times-Italic@0 SF
(NULL)3.33 E F0 3.33(,t)C(he)-3.33 E F2(Dwarf_Die)3.33 E F0 .83
(descriptor of the f)3.33 F .83
(irst die in the compilation-unit is returned.)-.2 F .83(This die)5.83 F
(has the)69.336 534 Q F2(DW_TAG_compile_unit)2.5 E F0(,)A F2
(DW_TAG_partial_unit)2.5 E F0 2.5(,o)C(r)-2.5 E F2(DW_TAG_type_unit)2.5
E F0(tag.)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E
2.5(-2)120.71 G 2.5(7-)-2.5 G 0 Cg EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(8-)-2.5 G/F1 10
/Courier@0 SF
(void example4\(Dwarf_Debug dbg,Dwarf_Die in_die,Dwarf_Bool is_info\))
89.336 96 Q({)89.336 108 Q(Dwarf_Die return_sib = 0;)101.336 120 Q
(Dwarf_Error error = 0;)101.336 132 Q(int res = 0;)101.336 144 Q
(/* in_die might be NULL or a valid Dwarf_Die */)101.336 168 Q
(res = dwarf_siblingof_b\(dbg,in_die,is_info,&return_sib, &error\);)
101.336 180 Q(if \(res == DW_DLV_OK\) {)101.336 192 Q
(/* Use return_sib here. */)113.336 204 Q
(dwarf_dealloc\(dbg, return_sib, DW_DLA_DIE\);)113.336 216 Q
(/* return_sib is no longer usable for anything, we)113.336 228 Q
(ensure we do not use it accidentally with: */)131.336 240 Q
(return_sib = 0;)113.336 252 Q(})101.336 264 Q(})89.336 276 Q/F2 11
/Times-Bold@0 SF 2.75(6.4.7 d)69.336 315 R(warf_siblingof\(\))-.165 E F1
(int dwarf_siblingof\()69.336 333 Q(Dwarf_Debug dbg,)117.336 345 Q
(Dwarf_Die die,)117.336 357 Q(Dwarf_Die *return_sib,)117.336 369 Q
(Dwarf_Error *error\))117.336 381 Q 1.177(int dwarf_siblingof\(\))69.336
399 R F0 1.177(operates e)3.677 F 1.177(xactly the same as)-.15 F F1
1.177(int dwarf_siblingof_b\(\))3.677 F F0 3.677(,b)C(ut)-3.877 E F1
(int)3.677 E(dwarf_siblingof\(\))69.336 411 Q F0(refers only to .deb)2.5
E(ug_info DIEs.)-.2 E F2 2.75(6.4.8 d)69.336 456 R(warf_child\(\))-.165
E F1(int dwarf_child\()69.336 474 Q(Dwarf_Die die,)117.336 486 Q
(Dwarf_Die *return_kid,)117.336 498 Q(Dwarf_Error *error\))117.336 510 Q
F0 .452(The function)69.336 528 R F1(dwarf_child\(\))2.952 E F0(returns)
2.952 E F1(DW_DLV_ERROR)2.952 E F0 .451(and sets the)2.952 F F1(error)
2.951 E F0 .451(die on error)2.951 F 5.451(.I)-.55 G 2.951(ft)-5.451 G
.451(here is no)-2.951 F 1.698(child it returns)69.336 540 R F1
(DW_DLV_NO_ENTRY)4.198 E F0 6.698(.W)C 1.698(hen it succeeds,)-6.698 F
F1(dwarf_child\(\))4.198 E F0(returns)4.198 E F1(DW_DLV_OK)4.198 E F0
(and)4.198 E(sets)69.336 552 Q F1(*return_kid)7.719 E F0 5.219(to the)
7.719 F F1(Dwarf_Die)7.719 E F0 5.218(descriptor of the f)7.719 F 5.218
(irst child of)-.2 F F1(die)7.718 E F0 10.218(.T)C 5.218(he function)
-10.218 F F1(dwarf_siblingof\(\))69.336 564 Q F0 2.164
(can be used with the return v)4.664 F 2.165(alue of)-.25 F F1
(dwarf_child\(\))4.665 E F0 2.165(to access the other)4.665 F
(children of)69.336 576 Q F1(die)2.5 E F0(.)A(re)69.336 768 Q 2.5(v2)
-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G 2.5(8-)-2.5 G 0 Cg EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-2)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(void example5\(Dwarf_Debug dbg,Dwarf_Die in_die\))89.336
96 Q({)89.336 108 Q(Dwarf_Die return_kid = 0;)101.336 120 Q
(Dwarf_Error error = 0;)101.336 132 Q(int res = 0;)101.336 144 Q
(res = dwarf_child\(in_die,&return_kid, &error\);)101.336 168 Q
(if \(res == DW_DLV_OK\) {)101.336 180 Q(/* Use return_kid here. */)
113.336 192 Q(dwarf_dealloc\(dbg, return_kid, DW_DLA_DIE\);)113.336 204
Q(/* return_die is no longer usable for anything, we)113.336 216 Q
(ensure we do not use it accidentally with: */)131.336 228 Q
(return_kid = 0;)113.336 240 Q(})101.336 252 Q(})89.336 264 Q/F2 11
/Times-Bold@0 SF 2.75(6.4.9 d)69.336 303 R(warf_offdie_b\(\))-.165 E F1
(int dwarf_offdie_b\()69.336 321 Q(Dwarf_Debug dbg,)117.336 333 Q
(Dwarf_Off offset,)117.336 345 Q(Dwarf_Bool is_info,)117.336 357 Q
(Dwarf_Die *return_die,)117.336 369 Q(Dwarf_Error *error\))117.336 381 Q
F0 .589(The function)69.336 399 R F1(dwarf_offdie_b\(\))3.089 E F0
(returns)3.089 E F1(DW_DLV_ERROR)3.089 E F0 .589(and sets the)3.089 F F1
(error)3.088 E F0 .588(die on error)3.088 F 5.588(.W)-.55 G .588(hen it)
-5.588 F(succeeds,)69.336 411 Q F1(dwarf_offdie_b\(\))3.453 E F0
(returns)3.453 E F1(DW_DLV_OK)3.453 E F0 .953(and sets)3.453 F F1
(*return_die)3.453 E F0 .953(to the the)3.453 F F1(Dwarf_Die)3.453 E F0
.474(descriptor of the deb)69.336 423 R .474
(ugging information entry at)-.2 F F1(offset)2.974 E F0 .474
(in the section containing deb)2.974 F .473(ugging information)-.2 F
2.072(entries i.e the .deb)69.336 435 R 2.073(ug_info section.)-.2 F
4.573(Ar)7.073 G 2.073(eturn of)-4.573 F F1(DW_DLV_NO_ENTRY)4.573 E F0
2.073(means that the)4.573 F F1(offset)4.573 E F0 2.073(in the)4.573 F
1.112(section is of a byte containing all 0 bits, indicating that there\
 is no abbre)69.336 447 R 1.111(viation code. Meaning this ')-.25 F(die)
-.5 E(of)69.336 459 Q .299(fset' is not the of)-.25 F .299
(fset of a real die, b)-.25 F .3(ut is instead an of)-.2 F .3
(fset of a null die, a padding die, or of some random)-.25 F
(zero byte: this should not be returned in normal use.)69.336 471 Q .387
(It is the user')69.336 489 R 2.886(sr)-.55 G .386(esponsibility to mak)
-2.886 F 2.886(es)-.1 G .386(ure that)-2.886 F F1(offset)2.886 E F0 .386
(is the start of a v)2.886 F .386(alid deb)-.25 F .386
(ugging information entry)-.2 F(.)-.65 E(The result of passing it an in)
69.336 501 Q -.25(va)-.4 G(lid of).25 E(fset could be chaos.)-.25 E(If)
69.336 519 Q F1(is_info)3.786 E F0 1.286(is non-zero the)3.786 F F1
(offset)3.786 E F0 1.286(must refer to a .deb)3.786 F 1.286
(ug_info section of)-.2 F 3.787(fset. If)-.25 F F1(is_info)3.787 E F0
1.287(zero the)3.787 F F1(offset)69.336 531 Q F0 .788
(must refer to a .deb)3.288 F .788(ug_types section of)-.2 F 3.288
(fset. Error)-.25 F .787(returns or misleading v)3.287 F .787
(alues may result if the)-.25 F F1(is_info)69.336 543 Q F0(flag or the)
2.5 E F1(offset)2.5 E F0 -.25(va)2.5 G(lue are incorrect.).25 E(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-2)120.71 G 2.5
(9-)-2.5 G 0 Cg EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(0-)-2.5 G/F1 10
/Courier@0 SF(void example6\(Dwarf_Debug dbg,Dwarf_Off die_offset,Dwarf\
_Bool is_info\))89.336 96 Q({)89.336 108 Q(Dwarf_Error error = 0;)
101.336 120 Q(Dwarf_Die return_die = 0;)101.336 132 Q(int res = 0;)
101.336 144 Q
(res = dwarf_offdie_b\(dbg,die_offset,is_info,&return_die, &error\);)
101.336 168 Q(if \(res == DW_DLV_OK\) {)101.336 180 Q
(/* Use return_die here. */)113.336 192 Q
(dwarf_dealloc\(dbg, return_die, DW_DLA_DIE\);)113.336 204 Q
(/* return_die is no longer usable for anything, we)113.336 216 Q
(ensure we do not use it accidentally with: */)131.336 228 Q
(return_die = 0;)113.336 240 Q 6(}e)101.336 252 S(lse {)-6 E
(/* res could be NO ENTRY or ERROR, so no)113.336 264 Q
(dealloc necessary.)131.336 276 Q(*/)12 E(})101.336 288 Q(})89.336 300 Q
/F2 11/Times-Bold@0 SF 2.75(6.4.10 d)69.336 339 R(warf_offdie\(\))-.165
E F1(int dwarf_offdie\()69.336 357 Q(Dwarf_Debug dbg,)117.336 369 Q
(Dwarf_Off offset,)117.336 381 Q(Dwarf_Die *return_die,)117.336 393 Q
(Dwarf_Error *error\))117.336 405 Q F0 1.445(The function)69.336 423 R
F1(dwarf_offdie\(\))3.945 E F0 1.445(is obsolete, use)3.945 F F1
(dwarf_offdie_b\(\))3.945 E F0 3.946(instead. The)3.946 F 1.446
(function is still)3.946 F(supported in the library)69.336 435 Q 2.5(,b)
-.65 G(ut only references the .deb)-2.7 E(ug_info section.)-.2 E F2 2.75
(6.4.11 d)69.336 480 R(warf_v)-.165 E(alidate_die_sibling\(\))-.11 E F1
(int validate_die_sibling\()69.336 498 Q(Dwarf_Die sibling,)117.336 510
Q(Dwarf_Off *offset\))117.336 522 Q F0 1.165
(When used correctly in a depth-f)69.336 540 R 1.165(irst w)-.2 F 1.164
(alk of a DIE tree this function v)-.1 F 1.164(alidates that an)-.25 F
3.664(yD)-.15 G(W_A)-3.964 E(T_sibling)-1.11 E(attrib)69.336 552 Q
(ute gi)-.2 E -.15(ve)-.25 G 2.5(st).15 G(he same of)-2.5 E
(fset as the direct tree w)-.25 E 2.5(alk. That)-.1 F
(is the only purpose of this function.)2.5 E .66(The function)69.336 576
R F1(dwarf_validate_die_sibling\(\))3.16 E F0(returns)3.16 E F1
(DW_DLV_OK)3.16 E F0 .66(if the last die processed in a)5.66 F(depth-f)
69.336 588 Q .327(irst DIE tree w)-.2 F .327(alk w)-.1 F .327
(as the same of)-.1 F .327(fset as generated by a call to)-.25 F F1
(dwarf_siblingof\(\))2.826 E F0 5.326(.M)C(eaning)-5.326 E(that the D)
69.336 600 Q(W_A)-.3 E(T_sibling attrib)-1.11 E(ute v)-.2 E(alue, if an)
-.25 E 1.3 -.65(y, w)-.15 H(as correct.).55 E .62
(If the conditions are not met then D)69.336 624 R(W_DL)-.3 E(V_ERR)-1 E
.62(OR is returned and)-.4 F F1(*offset)5.62 E F0 .62(is set to the of)
3.12 F .62(fset in the)-.25 F(.deb)69.336 636 Q .053
(ug_info section of the last DIE processed.)-.2 F .052
(If the application prints the of)5.053 F .052(fset a kno)-.25 F .052
(wledgeable user may)-.25 F(be able to f)69.336 648 Q
(igure out what the compiler did wrong.)-.2 E/F3 12/Times-Bold@0 SF 3
(6.5 Deb)69.336 682 R(ugging Inf)-.24 E(ormation Entry Query Operations)
-.3 E F0 .931(These queries return specif)69.336 700 R .931
(ic information about deb)-.2 F .932
(ugging information entries or a descriptor that can be)-.2 F .62
(used on subsequent queries when gi)69.336 712 R -.15(ve)-.25 G 3.119
(na).15 G F1(Dwarf_Die)A F0(descriptor)3.119 E 5.619(.N)-.55 G .619
(ote that some operations are specif)-5.619 F(ic)-.2 E .63(to deb)69.336
724 R .63(ugging information entries that are represented by a)-.2 F F1
(Dwarf_Die)3.131 E F0 .631(descriptor of a specif)3.131 F .631(ic type.)
-.2 F -.15(Fo)5.631 G(r).15 E -.15(ex)69.336 736 S .638
(ample, not all deb).15 F .638
(ugging information entries contain an attrib)-.2 F .638(ute ha)-.2 F
.638(ving a name, so consequently)-.2 F 3.138(,ac)-.65 G(all)-3.138 E
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G
2.5(0-)-2.5 G 0 Cg EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(1-)-2.5 G(to)69.336 96 Q
/F1 10/Courier@0 SF(dwarf_diename\(\))3.629 E F0 1.129(using a)3.629 F
F1(Dwarf_Die)3.629 E F0 1.129(descriptor that does not ha)3.629 F 1.429
-.15(ve a n)-.2 H 1.13(ame attrib).15 F 1.13(ute will return)-.2 F F1
(DW_DLV_NO_ENTRY)69.336 108 Q F0 5.822(.T)C .822(his is not an error)
-5.822 F 3.321(,i)-.4 G .821(.e. calling a function that needs a specif)
-3.321 F .821(ic attrib)-.2 F .821(ute is not an)-.2 F
(error for a die that does not contain that specif)69.336 120 Q
(ic attrib)-.2 E(ute.)-.2 E(There are se)69.336 138 Q -.15(ve)-.25 G
(ral methods that can be used to obtain the v).15 E(alue of an attrib)
-.25 E(ute in a gi)-.2 E -.15(ve)-.25 G 2.5(nd).15 G(ie:)-2.5 E 7.5
(1. Call)81.836 156 R F1(dwarf_hasattr\(\))4.369 E F0 1.869
(to determine if the deb)4.369 F 1.869
(ugging information entry has the attrib)-.2 F 1.87(ute of)-.2 F
(interest prior to issuing the query for information about the attrib)
99.336 168 Q(ute.)-.2 E 7.5(2. Supply)81.836 198 R(an)3.091 E F1(error)
3.091 E F0(ar)3.091 E .591(gument, and check its v)-.18 F .59
(alue after the call to a query indicates an unsuccessful)-.25 F .188
(return, to determine the nature of the problem.)99.336 210 R(The)5.188
E F1(error)2.688 E F0(ar)2.688 E .188
(gument will indicate whether an error)-.18 F(occurred, or the specif)
99.336 222 Q(ic attrib)-.2 E(ute needed w)-.2 E(as missing in that die.)
-.1 E 7.5(3. Arrange)81.836 252 R 5.52(to ha)8.02 F 5.82 -.15(ve a)-.2 H
8.019(ne).15 G 5.519(rror handling function in)-8.019 F -.2(vo)-.4 G -.1
(ke).2 G 8.019(du).1 G 5.519(pon detection of an error \(see)-8.019 F F1
(dwarf_init\(\))99.336 264 Q F0(\).)A 7.5(4. Call)81.836 294 R F1
(dwarf_attrlist\(\))2.553 E F0 .053
(and iterate through the returned list of attrib)2.553 F .053
(utes, dealing with each one)-.2 F(as appropriate.)99.336 306 Q/F2 11
/Times-Bold@0 SF 2.75(6.5.1 d)69.336 345 R(warf_get_die_inf)-.165 E
(otypes_flag\(\))-.275 E F1
(Dwarf_Bool dwarf_get_die_infotypes_flag\(Dwarf_Die die\))69.336 363 Q
F0 .433(The function)69.336 381 R F1(dwarf_tag\(\))2.933 E F0 .433(retu\
rns the section flag indicating which section the DIE originates from.)
2.933 F(If)5.432 E .099(the returned v)69.336 393 R .099
(alue is non-zero the DIE originates from the .deb)-.25 F .1
(ug_info section.)-.2 F .1(If the returned v)5.1 F .1(alue is zero)-.25
F(the DIE originates from the .deb)69.336 405 Q(ug_types section.)-.2 E
F2 2.75(6.5.2 d)69.336 438 R(warf_tag\(\))-.165 E F1(int dwarf_tag\()
69.336 456 Q(Dwarf_Die die,)117.336 468 Q(Dwarf_Half *tagval,)117.336
480 Q(Dwarf_Error *error\))117.336 492 Q F0 1.788(The function)69.336
510 R F1(dwarf_tag\(\))4.288 E F0 1.788(returns the)4.288 F F1(tag)4.288
E F0(of)4.288 E F1(die)4.288 E F0 1.788(through the pointer)4.288 F F1
(tagval)6.788 E F0 1.788(if it succeeds.)4.288 F(It)6.788 E(returns)
69.336 522 Q F1(DW_DLV_OK)2.5 E F0(if it succeeds.)2.5 E(It returns)5 E
F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E F2 2.75(6.5.3 d)69.336
555 R(warf_dieoffset\(\))-.165 E F1(int dwarf_dieoffset\()69.336 573 Q
(Dwarf_Die die,)117.336 585 Q(Dwarf_Off * return_offset,)117.336 597 Q
(Dwarf_Error *error\))117.336 609 Q F0 9.251
(When it succeeds, the function)69.336 627 R F1(dwarf_dieoffset\(\))
11.751 E F0(returns)11.751 E F1(DW_DLV_OK)11.751 E F0 9.252(and sets)
11.751 F F1(*return_offset)69.336 639 Q F0 1.15(to the position of)3.65
F F1(die)3.649 E F0 1.149(in the section containing deb)3.649 F 1.149
(ugging information entries \(the)-.2 F F1(return_offset)69.336 651 Q F0
.761(is a section-relati)3.261 F 1.061 -.15(ve o)-.25 H -.25(ff).15 G
3.261(set\). In).25 F .761(other w)3.261 F .761(ords, it sets)-.1 F F1
(return_offset)3.262 E F0 .762(to the of)3.262 F .762(fset of)-.25 F
3.468(the start of the deb)69.336 663 R 3.468
(ugging information entry described by)-.2 F F1(die)5.968 E F0 3.468
(in the section containing dies i.e)5.968 F(.deb)69.336 675 Q 2.5
(ug_info. It)-.2 F(returns)2.5 E F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E
(.)-.55 E F2 2.75(6.5.4 d)69.336 708 R(warf_die_CU_offset\(\))-.165 E F0
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G
2.5(1-)-2.5 G 0 Cg EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(2-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_die_CU_offset\()69.336 96 Q(Dwarf_Die die,)
117.336 108 Q(Dwarf_Off *return_offset,)117.336 120 Q
(Dwarf_Error *error\))117.336 132 Q F0 .68(The function)69.336 150 R F1
(dwarf_die_CU_offset\(\))3.181 E F0 .681(is similar to)3.181 F F1
(dwarf_dieoffset\(\))3.181 E F0 3.181(,e)C .681(xcept that it puts the)
-3.331 F(of)69.336 162 Q 2.05(fset of the DIE represented by the)-.25 F
F1 -1.45(Dwarf_Die die)4.55 F F0 4.55(,f)C 2.05
(rom the start of the compilation-unit that it)-4.55 F
(belongs to rather than the start of .deb)69.336 174 Q(ug_info \(the)-.2
E F1(return_offset)2.5 E F0(is a CU-relati)2.5 E .3 -.15(ve o)-.25 H
-.25(ff).15 G(set\).).25 E/F2 11/Times-Bold@0 SF 2.75(6.5.5 d)69.336 207
R(warf_die_offsets\(\))-.165 E F1(int dwarf_die_offsets\()69.336 225 Q
(Dwarf_Die die,)117.336 237 Q(Dwarf_Off *global_off,)117.336 249 Q
(Dwarf_Off *cu_off,)117.336 261 Q(Dwarf_Error *error\))117.336 273 Q F0
7.905(The function)69.336 291 R F1(dwarf_die_offsets\(\))10.405 E F0
7.905(is a combination of)10.405 F F1(dwarf_dieoffset\(\))10.405 E F0
(and)10.405 E F1(dwarf_die_cu_offset\(\))69.336 303 Q F0 1.754
(in that it returns both the global .deb)4.255 F 1.754(ug_info of)-.2 F
1.754(fset and the CU-relati)-.25 F -.15(ve)-.25 G(of)69.336 315 Q
(fset of the)-.25 E F1(die)2.5 E F0(in a single call.)2.5 E F2 2.75
(6.5.6 d)69.336 360 R(warf_ptr_CU_offset\(\))-.165 E F1
(int dwarf_ptr_CU_offset\()69.336 378 Q(Dwarf_CU_Context cu_context,)
117.336 390 Q(Dwarf_Byte_ptr di_ptr ,)117.336 402 Q(Dwarf_Off *cu_off\))
117.336 414 Q F0(Gi)69.336 432 Q -.15(ve)-.25 G 10.232(nav).15 G 7.733
(alid CU conte)-10.482 F 7.733
(xt pointer and a pointer into that CU conte)-.15 F 7.733
(xt, the function)-.15 F F1(dwarf_ptr_CU_offset\(\))69.336 444 Q F0 .601
(returns D)3.101 F(W_DL)-.3 E .601(V_OK and sets)-1 F F1(*cu_off)3.101 E
F0 .601(to the CU-relati)3.101 F .901 -.15(ve \()-.25 H .601(local\) of)
.15 F(fset)-.25 E(in that CU.)69.336 456 Q F2 2.75(6.5.7 d)69.336 501 R
(warf_CU_dieoffset_gi)-.165 E -.11(ve)-.11 G(n_die\(\)).11 E F1
(int dwarf_CU_dieoffset_given_die\()69.336 519 Q(Dwarf_Die given_die,)
117.336 531 Q(Dwarf_Off *return_offset,)117.336 543 Q
(Dwarf_Error *error\))117.336 555 Q F0 2.898(The function)69.336 573 R
F1(dwarf_CU_dieoffset_given_die\(\))5.398 E F0 2.898(is similar to)5.398
F F1(dwarf_die_CU_offset\(\))5.399 E F0(,)A -.15(ex)69.336 585 S 4.334
(cept that it puts the global of).15 F 4.333(fset of the CU DIE o)-.25 F
(wning)-.25 E F1(given_die)6.833 E F0 4.333(of .deb)6.833 F 4.333
(ug_info \(the)-.2 F F1(return_offset)69.336 597 Q F0
(is a global section of)2.5 E(fset\).)-.25 E 1.426(This is useful when \
processing a DIE tree and encountering an error or other surprise in a \
DIE, as the)69.336 615 R F1(return_offset)69.336 627 Q F0 .954
(can be passed to)3.454 F F1(dwarf_offdie_b\(\))3.454 E F0 .954
(to return a pointer to the CU die of the CU)3.454 F -.25(ow)69.336 639
S .135(ning the).25 F F1(given_die)2.635 E F0 .135(passed to)2.635 F F1
(dwarf_CU_dieoffset_given_die\(\))2.636 E F0 2.636(.T)C .136
(he consumer can e)-2.636 F(xtract)-.15 E
(information from the CU die and the)69.336 651 Q F1(given_die)2.5 E F0
(\(in the normal w)2.5 E(ay\) and print it.)-.1 E 2.716(An e)69.336 675
R 5.216(xample \(a)-.15 F 2.715
(snippet\) of code using this function follo)5.216 F 2.715
(ws. It assumes that)-.25 F F1(in_die)5.215 E F0 2.715(is a DIE in)5.215
F(.deb)69.336 687 Q 6.271(ug_info that, for some reason, you ha)-.2 F
6.572 -.15(ve d)-.2 H 6.272(ecided needs CU conte).15 F 6.272
(xt printed \(assuming)-.15 F F1(print_die_data)69.336 699 Q F0
(does some reasonable printing\).)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G 2.5(2-)-2.5 G 0 Cg EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(3-)-2.5 G/F1 10
/Courier@0 SF
(void example7\(Dwarf_Debug dbg, Dwarf_Die in_die,Dwarf_Bool is_info\))
89.336 96 Q({)89.336 108 Q(int res = 0;)101.336 120 Q
(Dwarf_Off cudieoff = 0;)101.336 132 Q(Dwarf_Die cudie = 0;)101.336 144
Q(Dwarf_Error error = 0;)101.336 156 Q(print_die_data\(dbg,in_die\);)
101.336 180 Q
(res = dwarf_CU_dieoffset_given_die\(in_die,&cudieoff,&error\);)101.336
192 Q(if\(res != DW_DLV_OK\) {)101.336 204 Q 6(/* FAIL)113.336 216 R(*/)
6 E(return;)113.336 228 Q(})101.336 240 Q
(res = dwarf_offdie_b\(dbg,cudieoff,is_info,&cudie,&error\);)101.336 252
Q(if\(res != DW_DLV_OK\) {)101.336 264 Q(/* FAIL */)113.336 276 Q
(return;)113.336 288 Q(})101.336 300 Q(print_die_data\(dbg,cudie\);)
101.336 312 Q(dwarf_dealloc\(dbg,cudie, DW_DLA_DIE\);)101.336 324 Q(})
89.336 336 Q F0(y)89.336 348 Q/F2 11/Times-Bold@0 SF 2.75(6.5.8 d)69.336
411 R(warf_die_CU_offset_range\(\))-.165 E F1
(int dwarf_die_CU_offset_range\()69.336 429 Q(Dwarf_Die die,)117.336 441
Q(Dwarf_Off *cu_global_offset,)117.336 453 Q(Dwarf_Off *cu_length,)
117.336 465 Q(Dwarf_Error *error\))117.336 477 Q F0 .355(The function)
69.336 495 R F1(dwarf_die_CU_offset_range\(\))2.855 E F0 .355
(returns the of)2.855 F .355(fset of the be)-.25 F .354
(ginning of the CU and the)-.15 F 1.561(length of the CU.)69.336 507 R
1.561(The of)6.561 F 1.562
(fset and length are of the entire CU that this DIE is a part of.)-.25 F
1.562(It is used by)6.562 F(dw)69.336 519 Q .138(arfdump \(for e)-.1 F
.137(xample\) to check the v)-.15 F .137(alidity of of)-.25 F 2.637
(fsets. Most)-.25 F .137(applications will ha)2.637 F .437 -.15(ve n)-.2
H 2.637(or).15 G .137(eason to call this)-2.637 F(function.)69.336 531 Q
F2 2.75(6.5.9 d)69.336 576 R(warf_diename\(\))-.165 E F1
(int dwarf_diename\()69.336 594 Q(Dwarf_Die die,)117.336 606 Q 6
(char **)117.336 618 R(return_name,)6 E(Dwarf_Error *error\))117.336 630
Q F0 .295(When it succeeds, the function)69.336 648 R F1
(dwarf_diename\(\))2.795 E F0(returns)2.795 E F1(DW_DLV_OK)2.795 E F0
.295(and sets)2.795 F F1(*return_name)2.795 E F0 .295(to a)2.795 F 2.193
(pointer to a null-terminated string of characters that represents the \
name attrib)69.336 660 R 2.192(ute of)-.2 F F1(die)4.692 E F0 7.192(.I)C
4.692(tr)-7.192 G(eturns)-4.692 E F1(DW_DLV_NO_ENTRY)69.336 672 Q F0(if)
4.511 E F1(die)4.511 E F0 2.011(does not ha)4.511 F 2.311 -.15(ve a n)
-.2 H 2.011(ame attrib).15 F 4.512(ute. It)-.2 F(returns)4.512 E F1
(DW_DLV_ERROR)4.512 E F0 2.012(if an error)4.512 F 2.768(occurred. The)
69.336 684 R .268(storage pointed to by a successful return of)2.768 F
F1(dwarf_diename\(\))2.768 E F0 .268(should be freed using the)2.768 F
(allocation type)69.336 696 Q F1(DW_DLA_STRING)2.5 E F0
(when no longer of interest \(see)2.5 E F1(dwarf_dealloc\(\))2.5 E F0
(\).)A(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)
120.71 G 2.5(3-)-2.5 G 0 Cg EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(4-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.5.10 d)69.336 99 R(warf_die_ab)-.165 E(br)-.11 E
-.165(ev)-.198 G(_code\(\)).165 E/F2 10/Courier@0 SF
(int dwarf_die_abbrev_code\( Dwarf_Die die\))69.336 117 Q F0 .529
(The function returns the abbre)69.336 135 R .529
(viation code of the DIE.)-.25 F .53(That is, it returns the abbre)5.529
F .53(viation "inde)-.25 F .53(x" into the)-.15 F(abbre)69.336 147 Q
.172(viation table for the compilation unit of which the DIE is a part.)
-.25 F .171(It cannot f)5.171 F .171(ail. No errors are possible.)-.1 F
(The pointer)69.336 159 Q F2(die\(\))2.5 E F0(must not be NULL.)2.5 E F1
2.75(6.5.11 d)69.336 192 R(warf_die_ab)-.165 E(br)-.11 E -.165(ev)-.198
G(_childr).165 E(en_flag\(\))-.198 E F2
(int dwarf_die_abbrev_children_flag\( Dwarf_Die die,)69.336 210 Q
(Dwarf_Half *has_child\))105.336 222 Q F0 .809
(The function returns the has-children flag of the)69.336 240 R F2(die)
3.309 E F0 .81(passed in through the)3.309 F F2(*has_child)3.31 E F0 .81
(passed in and)3.31 F(returns)69.336 252 Q F2(DW_DLV_OK)2.5 E F0
(on success.)2.5 E 2.5(An)5 G(on-zero v)-2.5 E(alue of)-.25 E F2
(*has_child)2.5 E F0(means the)2.5 E F2(die)2.5 E F0(has children.)2.5 E
(On f)69.336 276 Q(ailure it returns)-.1 E F2(DW_DLV_ERROR)2.5 E F0(.)A
.413(The function w)69.336 300 R .413(as de)-.1 F -.15(ve)-.25 G .413(l\
oped to let consumer code do better error reporting in some circumstanc\
es, it is not).15 F(generally needed.)69.336 312 Q F1 2.75(6.5.12 d)
69.336 357 R(warf_get_v)-.165 E(ersion_of_die\(\))-.11 E F2
(int dwarf_get_version_of_die\(Dwarf_Die die,)69.336 375 Q
(Dwarf_Half *version,)93.336 387 Q(Dwarf_Half *offset_size\))93.336 399
Q F0 1.014(The function returns the CU conte)69.336 417 R 1.014(xt v)
-.15 F 1.014(ersion through)-.15 F F2(*version)3.514 E F0 1.015
(and the CU conte)3.514 F 1.015(xt of)-.15 F 1.015(fset-size through)
-.25 F F2(*offset_size)69.336 429 Q F0(and returns)2.5 E F2(DW_DLV_OK)
2.5 E F0(on success.)2.5 E .607(In case of error)69.336 453 R 3.107(,t)
-.4 G .607(he only errors possible in)-3.107 F -.2(vo)-.4 G(lv).2 E
3.107(ea)-.15 G 3.107(ni)-3.107 G .607(nappropriate NULL)-3.107 F F2
(die)3.107 E F0 .606(pointer so no Dw)3.107 F(arf_Deb)-.1 E(ug)-.2 E 3.5
(pointer is a)69.336 465 R -.25(va)-.2 G 6(ilable. Therefore).25 F 3.5
(setting a Dw)6 F 3.5(arf_Error w)-.1 F 3.5(ould not be v)-.1 F 3.5
(ery meaningful \(there is no)-.15 F(Dw)69.336 477 Q(arf_Deb)-.1 E
(ug to attach it to\).)-.2 E(The function returns D)5 E(W_DL)-.3 E
(V_ERR)-1 E(OR on error)-.4 E(.)-.55 E(The v)69.336 501 Q
(alues returned through the pointers are the v)-.25 E(alues tw)-.25 E
2.5(oa)-.1 G -.18(rg)-2.5 G(uments to).18 E(dw)5 E
(arf_get_form_class\(\) requires.)-.1 E F1 2.75(6.5.13 d)69.336 534 R
(warf_attrlist\(\))-.165 E F2(int dwarf_attrlist\()69.336 552 Q
(Dwarf_Die die,)117.336 564 Q(Dwarf_Attribute** attrbuf,)117.336 576 Q
(Dwarf_Signed *attrcount,)117.336 588 Q(Dwarf_Error *error\))117.336 600
Q F0 .737(When it returns)69.336 618 R F2(DW_DLV_OK)3.237 E F0 3.237(,t)
C .737(he function)-3.237 F F2(dwarf_attrlist\(\))3.237 E F0(sets)3.236
E F2(attrbuf)3.236 E F0 .736(to point to an array of)3.236 F F2
(Dwarf_Attribute)69.336 630 Q F0 .459
(descriptors corresponding to each of the attrib)2.959 F .46
(utes in die, and returns the number of)-.2 F 1.647
(elements in the array through)69.336 642 R F2(attrcount)4.147 E F0(.)A
F2(DW_DLV_NO_ENTRY)6.647 E F0 1.646
(is returned if the count is zero \(no)4.146 F F2(attrbuf)69.336 654 Q
F0 1(is allocated in this case\).)3.5 F F2(DW_DLV_ERROR)6.001 E F0 1.001
(is returned on error)3.501 F 6.001(.O)-.55 G 3.501(nas)-6.001 G 1.001
(uccessful return from)-3.501 F F2(dwarf_attrlist\(\))69.336 666 Q F0
3.434(,e)C .934(ach of the)-3.434 F F2(Dwarf_Attribute)3.434 E F0 .934
(descriptors should be indi)3.434 F .934(vidually freed using)-.25 F F2
(dwarf_dealloc\(\))69.336 678 Q F0 .397(with the allocation type)2.896 F
F2(DW_DLA_ATTR)2.897 E F0 2.897(,f)C(ollo)-2.897 E .397
(wed by free-ing the list pointed to by)-.25 F F2(*attrbuf)69.336 690 Q
F0(using)4.694 E F2(dwarf_dealloc\(\))4.694 E F0 2.194
(with the allocation type)4.694 F F2(DW_DLA_LIST)4.694 E F0 4.693(,w)C
2.193(hen no longer of)-4.693 F(interest \(see)69.336 702 Q F2
(dwarf_dealloc\(\))2.5 E F0(\).)A(Freeing the attrlist:)69.336 726 Q(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G 2.5
(4-)-2.5 G 0 Cg EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(5-)-2.5 G/F1 10
/Courier@0 SF(void example8\(Dwarf_Debug dbg, Dwarf_Die somedie\))89.336
96 Q({)89.336 108 Q(Dwarf_Signed atcount = 0;)101.336 120 Q
(Dwarf_Attribute *atlist = 0;)101.336 132 Q(Dwarf_Error error = 0;)
101.336 144 Q(int errv = 0;)101.336 156 Q
(errv = dwarf_attrlist\(somedie, &atlist,&atcount, &error\);)101.336 180
Q(if \(errv == DW_DLV_OK\) {)101.336 192 Q(Dwarf_Signed i = 0;)113.336
204 Q(for \(i = 0; i < atcount; ++i\) {)113.336 228 Q
(/* use atlist[i] */)125.336 240 Q
(dwarf_dealloc\(dbg, atlist[i], DW_DLA_ATTR\);)125.336 252 Q(})113.336
264 Q(dwarf_dealloc\(dbg, atlist, DW_DLA_LIST\);)113.336 276 Q(})101.336
288 Q(})89.336 300 Q/F2 11/Times-Bold@0 SF 2.75(6.5.14 d)69.336 321 R
(warf_hasattr\(\))-.165 E F1(int dwarf_hasattr\()69.336 339 Q
(Dwarf_Die die,)117.336 351 Q(Dwarf_Half attr,)117.336 363 Q
(Dwarf_Bool *return_bool,)117.336 375 Q(Dwarf_Error *error\))117.336 387
Q F0 .952(When it succeeds, the function)69.336 405 R F1
(dwarf_hasattr\(\))3.453 E F0(returns)3.453 E F1(DW_DLV_OK)3.453 E F0
.953(and sets)3.453 F F1(*return_bool)3.453 E F0(to)3.453 E/F3 10
/Times-Italic@0 SF(non-zer)69.336 417 Q(o)-.45 E F0(if)2.5 E F1(die)2.5
E F0(has the attrib)2.5 E(ute)-.2 E F1(attr)2.5 E F0(and)2.5 E F3(zer)
2.5 E(o)-.45 E F0 2.5(otherwise. If)2.5 F(it f)2.5 E(ails, it returns)
-.1 E F1(DW_DLV_ERROR)2.5 E F0(.)A F2 2.75(6.5.15 d)69.336 450 R
(warf_attr\(\))-.165 E F1(int dwarf_attr\()69.336 468 Q(Dwarf_Die die,)
117.336 480 Q(Dwarf_Half attr,)117.336 492 Q
(Dwarf_Attribute *return_attr,)117.336 504 Q(Dwarf_Error *error\))
117.336 516 Q F0 6.874(When it returns)69.336 534 R F1(DW_DLV_OK)9.374 E
F0 9.374(,t)C 6.874(he function)-9.374 F F1(dwarf_attr\(\))9.374 E F0
(sets)9.374 E F1(*return_attr)9.374 E F0 6.874(to the)9.374 F F1
(Dwarf_Attribute)69.336 546 Q F0 1.529(descriptor of)4.029 F F1(die)
4.029 E F0(ha)4.029 E 1.529(ving the attrib)-.2 F(ute)-.2 E F1(attr)
4.029 E F0 6.529(.I)C 4.029(tr)-6.529 G(eturns)-4.029 E F1
(DW_DLV_NO_ENTRY)4.029 E F0(if)4.03 E F1(attr)69.336 558 Q F0
(is not contained in)2.5 E F1(die)2.5 E F0 5(.I)C 2.5(tr)-5 G(eturns)
-2.5 E F1(DW_DLV_ERROR)2.5 E F0(if an error occurred.)2.5 E F2 2.75
(6.5.16 d)69.336 603 R(warf_lo)-.165 E(wpc\(\))-.11 E F1
(int dwarf_lowpc\()69.336 621 Q 24(Dwarf_Die die,)117.336 633 R 6
(Dwarf_Addr *)117.336 645 R(return_lowpc,)6 E(Dwarf_Error * error\))
117.336 657 Q F0 1.799(The function)69.336 675 R F1(dwarf_lowpc\(\))
4.299 E F0(returns)4.298 E F1(DW_DLV_OK)4.298 E F0 1.798(and sets)4.298
F F1(*return_lowpc)4.298 E F0 1.798(to the lo)4.298 F 4.298(wp)-.25 G
(rogram)-4.298 E .342(counter v)69.336 687 R .342
(alue associated with the)-.25 F F1(die)2.842 E F0 .342(descriptor if)
2.842 F F1(die)2.842 E F0 .342(represents a deb)2.842 F .342
(ugging information entry with the)-.2 F F1(DW_AT_low_pc)69.336 699 Q F0
(attrib)2.907 E 2.907(ute. It)-.2 F(returns)2.906 E F1(DW_DLV_NO_ENTRY)
2.906 E F0(if)2.906 E F1(die)2.906 E F0 .406(does not ha)2.906 F .706
-.15(ve t)-.2 H .406(his attrib).15 F 2.906(ute. It)-.2 F(returns)2.906
E F1(DW_DLV_ERROR)69.336 711 Q F0(if an error occurred.)2.5 E(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G 2.5(5-)-2.5
G 0 Cg EP
%%Page: 36 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(6-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.5.17 d)69.336 99 R(warf_highpc_b\(\))-.165 E/F2
10/Courier@0 SF(int dwarf_highpc_b\()69.336 117 Q 84(Dwarf_Die die,)
117.336 129 R 6(Dwarf_Addr *)117.336 141 R(return_highpc,)66 E 6
(Dwarf_Half *)117.336 153 R(return_form*/,)66 E
(enum Dwarf_Form_Class * return_class*/,)117.336 165 Q
(Dwarf_Error *error\))117.336 177 Q F0 1.333(The function)69.336 195 R
F2(dwarf_highpc_b\(\))3.833 E F0(returns)3.833 E F2(DW_DLV_OK)3.833 E F0
1.334(and sets)3.834 F F2(*return_highpc)3.834 E F0 1.334(to the v)3.834
F 1.334(alue of)-.25 F(the)69.336 207 Q F2(DW_AT_high_pc)3.746 E F0
(attrib)3.746 E 3.746(ute. It)-.2 F 1.246(also sets)3.746 F F2
(return_form)3.746 E F0 1.246(to the FORM of the attrib)3.746 F 3.746
(ute. It)-.2 F 1.246(also sets)3.746 F F2(return_class)69.336 219 Q F0
(to the form class of the attrib)2.5 E(ute.)-.2 E .277
(If the form class)69.336 243 R .278(returned is)5.277 F F2
(DW_FORM_CLASS_ADDRESS)2.778 E F0(the)2.778 E F2(return_highpc)2.778 E
F0 .278(is an actual pc address)2.778 F 3.696
(\(1 higher than the address of the last pc in the address range\)..)
69.336 255 R 3.696(If the form class)8.696 F 3.696(returned is)8.696 F
F2(DW_FORM_CLASS_CONSTANT)69.336 267 Q F0(the)3.44 E F2(return_highpc)
3.44 E F0 .941(is an of)3.44 F .941(fset from the v)-.25 F .941
(alue of the the DIE')-.25 F 5.941(sl)-.55 G -.25(ow)-5.941 G
(PC address \(see D)69.336 279 Q -1.2(WA)-.3 G
(RF4 section 2.17.2 Contiguous Address Range\).)1.2 E(It returns)69.336
303 Q F2(DW_DLV_NO_ENTRY)2.5 E F0(if)2.5 E F2(die)2.5 E F0(does not ha)
2.5 E .3 -.15(ve t)-.2 H(he).15 E F2(DW_AT_high_pc)2.5 E F0(attrib)2.5 E
(ute.)-.2 E(It returns)69.336 327 Q F2(DW_DLV_ERROR)2.5 E F0
(if an error occurred.)2.5 E F1 2.75(6.5.18 d)69.336 360 R
(warf_highpc\(\))-.165 E F2(int dwarf_highpc\()69.336 378 Q
(Dwarf_Die die,)117.336 390 Q 6(Dwarf_Addr *)117.336 402 R
(return_highpc,)6 E(Dwarf_Error *error\))117.336 414 Q F0 1.503
(The function)69.336 432 R F2(dwarf_highpc\(\))4.003 E F0(returns)4.003
E F2(DW_DLV_OK)4.003 E F0 1.503(and sets)4.003 F F2(*return_highpc)4.003
E F0 1.503(the high program)4.003 F .342(counter v)69.336 444 R .342
(alue associated with the)-.25 F F2(die)2.842 E F0 .342(descriptor if)
2.842 F F2(die)2.842 E F0 .342(represents a deb)2.842 F .342
(ugging information entry with the)-.2 F F2 3.155
(DW_AT_high_pc attribute)69.336 456 R F0 3.155(and the form is)5.655 F
F2(DW_FORM_addr)5.655 E F0 3.155(\(meaning the form is of class)5.655 F
(address\).)69.336 468 Q .584(This function is useless for a)69.336 492
R F2(DW_AT_high_pc)3.084 E F0 .585
(which is encoded as a constant \(which w)3.084 F .585(as f)-.1 F .585
(irst possible)-.2 F(in D)69.336 504 Q -1.2(WA)-.3 G(RF4\).)1.2 E
(It returns)69.336 528 Q F2(DW_DLV_NO_ENTRY)2.5 E F0(if)2.5 E F2(die)2.5
E F0(does not ha)2.5 E .3 -.15(ve t)-.2 H(his attrib).15 E(ute.)-.2 E
(It returns)69.336 552 Q F2(DW_DLV_ERROR)2.5 E F0
(if an error occurred or if the form is not of class address.)2.5 E F1
2.75(6.5.19 d)69.336 585 R(warf_bytesize\(\))-.165 E F2
(Dwarf_Signed dwarf_bytesize\()69.336 603 Q 42(Dwarf_Die die,)117.336
615 R 6(Dwarf_Unsigned *return_size,)117.336 627 R 24
(Dwarf_Error *error\))117.336 639 R F0 .66(When it succeeds,)69.336 657
R F2(dwarf_bytesize\(\))3.16 E F0(returns)3.16 E F2(DW_DLV_OK)3.16 E F0
.66(and sets)3.16 F F2(*return_size)3.16 E F0 .66(to the number)3.16 F
.037(of bytes needed to contain an instance of the aggre)69.336 669 R
-.05(ga)-.15 G .038(te deb).05 F .038
(ugging information entry represented by)-.2 F F2(die)2.538 E F0 5.038
(.I)C(t)-5.038 E(returns)69.336 681 Q F2(DW_DLV_NO_ENTRY)4.195 E F0(if)
4.195 E F2(die)4.195 E F0 1.695(does not contain the byte size attrib)
4.195 F(ute)-.2 E F2(DW_AT_byte_size)4.195 E F0 6.695(.I)C(t)-6.695 E
(returns)69.336 693 Q F2(DW_DLV_ERROR)2.5 E F0(if an error occurred.)2.5
E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G
2.5(6-)-2.5 G 0 Cg EP
%%Page: 37 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(7-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.5.20 d)69.336 99 R(warf_bitsize\(\))-.165 E/F2
10/Courier@0 SF(int dwarf_bitsize\()69.336 117 Q(Dwarf_Die die,)117.336
129 Q 6(Dwarf_Unsigned *return_size,)117.336 141 R(Dwarf_Error *error\))
117.336 153 Q F0 .202(When it succeeds,)69.336 171 R F2
(dwarf_bitsize\(\))2.702 E F0(returns)2.702 E F2(DW_DLV_OK)2.702 E F0
.203(and sets)2.702 F F2(*return_size)2.703 E F0 .203(to the number of)
2.703 F .573(bits occupied by the bit f)69.336 183 R .573(ield v)-.2 F
.573(alue that is an attrib)-.25 F .573(ute of the gi)-.2 F -.15(ve)-.25
G 3.073(nd).15 G 3.072(ie. It)-3.073 F(returns)3.072 E F2
(DW_DLV_NO_ENTRY)3.072 E F0(if)3.072 E F2(die)69.336 195 Q F0 1.223
(does not contain the bit size attrib)3.723 F(ute)-.2 E F2
(DW_AT_bit_size)3.724 E F0 6.224(.I)C 3.724(tr)-6.224 G(eturns)-3.724 E
F2(DW_DLV_ERROR)3.724 E F0 1.224(if an error)3.724 F(occurred.)69.336
207 Q F1 2.75(6.5.21 d)69.336 240 R(warf_bitoffset\(\))-.165 E F2
(int dwarf_bitoffset\()69.336 258 Q(Dwarf_Die die,)117.336 270 Q 6
(Dwarf_Unsigned *return_size,)117.336 282 R(Dwarf_Error *error\))117.336
294 Q F0 .115(When it succeeds,)69.336 312 R F2(dwarf_bitoffset\(\))
2.615 E F0(returns)2.615 E F2(DW_DLV_OK)2.615 E F0 .114(and sets)2.615 F
F2(*return_size)2.614 E F0 .114(to the number)2.614 F .018
(of bits to the left of the most signif)69.336 324 R .018
(icant bit of the bit f)-.2 F .018(ield v)-.2 F 2.518(alue. This)-.25 F
.018(bit of)2.518 F .019(fset is not necessarily the net bit)-.25 F(of)
69.336 336 Q .635(fset within the structure or class , since)-.25 F F2
(DW_AT_data_member_location)3.135 E F0 .635(may gi)3.135 F .935 -.15
(ve a b)-.25 H .635(yte of).15 F .635(fset to)-.25 F(this)69.336 348 Q
F2(DIE)4.04 E F0 1.54(and the bit of)4.04 F 1.54(fset returned through \
the pointer does not include the bits in the byte of)-.25 F 4.04
(fset. It)-.25 F(returns)69.336 360 Q F2(DW_DLV_NO_ENTRY)3.67 E F0(if)
3.67 E F2(die)3.669 E F0 1.169(does not contain the bit of)3.669 F 1.169
(fset attrib)-.25 F(ute)-.2 E F2(DW_AT_bit_offset)3.669 E F0 6.169(.I)C
(t)-6.169 E(returns)69.336 372 Q F2(DW_DLV_ERROR)2.5 E F0
(if an error occurred.)2.5 E F1 2.75(6.5.22 d)69.336 405 R(warf_sr)-.165
E(clang\(\))-.198 E F2(int dwarf_srclang\()69.336 423 Q(Dwarf_Die die,)
117.336 435 Q 6(Dwarf_Unsigned *return_lang,)117.336 447 R
(Dwarf_Error *error\))117.336 459 Q F0 2.973(When it succeeds,)69.336
477 R F2(dwarf_srclang\(\))5.473 E F0(returns)5.473 E F2(DW_DLV_OK)5.474
E F0 2.974(and sets)5.474 F F2(*return_lang)5.474 E F0 2.974(to a code)
5.474 F 2.394(indicating the source language of the compilation unit re\
presented by the descriptor)69.336 489 R F2(die)4.893 E F0 7.393(.I)C
4.893(tr)-7.393 G(eturns)-4.893 E F2(DW_DLV_NO_ENTRY)69.336 501 Q F0(if)
2.818 E F2(die)2.818 E F0 .318(does not represent a source f)2.818 F
.319(ile deb)-.2 F .319(ugging information entry \(i.e. contain the)-.2
F(attrib)69.336 513 Q(ute)-.2 E F2(DW_AT_language)2.5 E F0 2.5(\). It)B
(returns)2.5 E F2(DW_DLV_ERROR)2.5 E F0(if an error occurred.)2.5 E F1
2.75(6.5.23 d)69.336 546 R(warf_array)-.165 E(order\(\))-.275 E F2
(int dwarf_arrayorder\()69.336 564 Q(Dwarf_Die die,)117.336 576 Q 6
(Dwarf_Unsigned *return_order,)117.336 588 R(Dwarf_Error *error\))
117.336 600 Q F0 1.899(When it succeeds,)69.336 618 R F2
(dwarf_arrayorder\(\))4.399 E F0(returns)4.399 E F2(DW_DLV_OK)4.399 E F0
1.899(and sets)4.399 F F2(*return_order)4.399 E F0 4.399(ac)4.399 G(ode)
-4.399 E .608
(indicating the ordering of the array represented by the descriptor)
69.336 630 R F2(die)3.109 E F0 5.609(.I)C 3.109(tr)-5.609 G(eturns)
-3.109 E F2(DW_DLV_NO_ENTRY)3.109 E F0(if)3.109 E F2(die)69.336 642 Q F0
.115(does not contain the array order attrib)2.615 F(ute)-.2 E F2
(DW_AT_ordering)2.614 E F0 5.114(.I)C 2.614(tr)-5.114 G(eturns)-2.614 E
F2(DW_DLV_ERROR)2.614 E F0 .114(if an error)2.614 F(occurred.)69.336 654
Q/F3 12/Times-Bold@0 SF 3(6.6 Attrib)69.336 688 R(ute Queries)-.24 E F0
1.409(Based on the attrib)69.336 706 R 1.409(utes form, these operation\
s are concerned with returning uninterpreted attrib)-.2 F 1.41
(ute data.)-.2 F 1.337(Since it is not al)69.336 718 R -.1(wa)-.1 G
1.337(ys ob).1 F 1.337(vious from the return v)-.15 F 1.336
(alue of these functions if an error occurred, one should)-.25 F(al)
69.336 730 Q -.1(wa)-.1 G 1.858(ys supply an).1 F F2(error)4.358 E F0
1.858(parameter or ha)4.358 F 2.158 -.15(ve a)-.2 H 1.858(rranged to ha)
.15 F 2.158 -.15(ve a)-.2 H 4.358(ne).15 G 1.858
(rror handling function in)-4.358 F -.2(vo)-.4 G -.1(ke).2 G 4.358(d\()
.1 G(see)-4.358 E F2(dwarf_init\(\))69.336 742 Q F0 2.515(\)t)C 2.515
(od)-2.515 G .015(etermine the v)-2.515 F .015
(alidity of the returned v)-.25 F .015(alue and the nature of an)-.25 F
2.514(ye)-.15 G .014(rrors that may ha)-2.514 F -.15(ve)-.2 G(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G 2.5(7-)-2.5
G 0 Cg EP
%%Page: 38 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(8-)-2.5 G(occurred.)
69.336 96 Q(A)69.336 120 Q/F1 10/Courier@0 SF(Dwarf_Attribute)10.3 E F0
7.8(descriptor describes an attrib)10.3 F 7.8(ute of a specif)-.2 F 7.8
(ic die.)-.2 F 7.8(Thus, each)12.8 F F1(Dwarf_Attribute)69.336 132 Q F0
(descriptor is implicitly associated with a specif)2.5 E(ic die.)-.2 E
/F2 11/Times-Bold@0 SF 2.75(6.6.1 d)69.336 165 R(warf_hasf)-.165 E
(orm\(\))-.275 E F1(int dwarf_hasform\()69.336 183 Q
(Dwarf_Attribute attr,)117.336 195 Q(Dwarf_Half form,)117.336 207 Q 6
(Dwarf_Bool *return_hasform,)117.336 219 R(Dwarf_Error *error\))117.336
231 Q F0(The function)69.336 249 Q F1(dwarf_hasform\(\))2.5 E F0
(returns)2.5 E F1(DW_DLV_OK)2.5 E F0 2.5(and and)2.5 F(puts a)2.5 E/F3
10/Times-Italic@0 SF(non-zer)2.5 E(o)-.45 E F0 -.25(va)71.836 261 S
2.651(lue in the).25 F F1(*return_hasform)5.151 E F0 2.651
(boolean if the attrib)5.151 F 2.651(ute represented by the)-.2 F F1
(Dwarf_Attribute)5.15 E F0(descriptor)69.336 273 Q F1(attr)4.056 E F0
1.556(has the attrib)4.056 F 1.556(ute form)-.2 F F1(form)4.056 E F0
6.557(.I)C 4.057(ft)-6.557 G 1.557(he attrib)-4.057 F 1.557
(ute does not ha)-.2 F 1.857 -.15(ve t)-.2 H 1.557(hat form).15 F F3
(zer)4.057 E(o)-.45 E F0 1.557(is put into)4.057 F F1(*return_hasform)
69.336 285 Q F0(.)A F1(DW_DLV_ERROR)5 E F0(is returned on error)2.5 E(.)
-.55 E F2 2.75(6.6.2 d)69.336 318 R(warf_whatf)-.165 E(orm\(\))-.275 E
F1(int dwarf_whatform\()69.336 336 Q(Dwarf_Attribute attr,)117.336 348 Q
24(Dwarf_Half *return_form,)117.336 360 R(Dwarf_Error *error\))117.336
372 Q F0 .426(When it succeeds,)69.336 390 R F1(dwarf_whatform\(\))2.926
E F0(returns)2.926 E F1(DW_DLV_OK)2.926 E F0 .425(and sets)2.925 F F1
(*return_form)2.925 E F0 .425(to the attrib)2.925 F(ute)-.2 E 4.068
(form code of the attrib)69.336 402 R 4.068(ute represented by the)-.2 F
F1(Dwarf_Attribute)6.568 E F0(descriptor)6.569 E F1(attr)6.569 E F0
9.069(.I)C 6.569(tr)-9.069 G(eturns)-6.569 E F1(DW_DLV_ERROR)69.336 414
Q F0(on error)5 E(.)-.55 E 1.018(An attrib)69.336 438 R 1.018
(ute using D)-.2 F 1.018(W_FORM_indirect ef)-.3 F(fecti)-.25 E -.15(ve)
-.25 G 1.018(ly has tw).15 F 3.518(of)-.1 G 3.518(orms. This)-3.518 F
1.017(function returns the 'f)3.518 F 1.017(inal' form)-.2 F(for)69.336
450 Q F1(DW_FORM_indirect)3.03 E F0 3.031(,n)C .531(ot the)-3.031 F F1
(DW_FORM_indirect)3.031 E F0 .531
(itself. This function is what most applications)3.031 F(will w)69.336
462 Q(ant to call.)-.1 E F2 2.75(6.6.3 d)69.336 495 R(warf_whatf)-.165 E
(orm_dir)-.275 E(ect\(\))-.198 E F1(int dwarf_whatform_direct\()69.336
513 Q(Dwarf_Attribute attr,)117.336 525 Q 24(Dwarf_Half *return_form,)
117.336 537 R(Dwarf_Error *error\))117.336 549 Q F0 1.448
(When it succeeds,)69.336 567 R F1(dwarf_whatform_direct\(\))3.948 E F0
(returns)3.948 E F1(DW_DLV_OK)3.948 E F0 1.448(and sets)3.948 F F1
(*return_form)3.947 E F0(to)3.947 E 2.21(the attrib)69.336 579 R 2.211
(ute form code of the attrib)-.2 F 2.211(ute represented by the)-.2 F F1
(Dwarf_Attribute)4.711 E F0(descriptor)4.711 E F1(attr)4.711 E F0 7.211
(.I)C(t)-7.211 E(returns)69.336 591 Q F1(DW_DLV_ERROR)5.606 E F0 .606
(on error)5.606 F 5.606(.A)-.55 G 3.106(na)-5.606 G(ttrib)-3.106 E .605
(ute using)-.2 F F1(DW_FORM_indirect)3.105 E F0(ef)3.105 E(fecti)-.25 E
-.15(ve)-.25 G .605(ly has tw).15 F 3.105(of)-.1 G(orms.)-3.105 E
(This returns the form ')69.336 603 Q(directly' in the initial form f)
-.5 E 2.5(ield. That)-.2 F
(is, it returns the 'initial' form of the attrib)2.5 E(ute.)-.2 E .273
(So when the form f)69.336 621 R .274(ield is)-.2 F F1(DW_FORM_indirect)
2.774 E F0 .274(this call returns the)2.774 F F1(DW_FORM_indirect)2.774
E F0 .274(form, which)2.774 F(is sometimes useful for dump utilities.)
69.336 633 Q .484
(It is confusing that the _direct\(\) function returns D)69.336 651 R
.484(W_FORM_indirect if an indirect form is in)-.3 F -.2(vo)-.4 G(lv).2
E 2.984(ed. Just)-.15 F .742
(think of this as returning the initial form the f)69.336 663 R .742
(irst form v)-.2 F .742(alue seen for the attrib)-.25 F .742
(ute, which is also the f)-.2 F(inal)-.2 E
(form unless the initial form is)69.336 675 Q F1(DW_FORM_indirect)2.5 E
F0(.)A F2 2.75(6.6.4 d)69.336 708 R(warf_whatattr\(\))-.165 E F0(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G 2.5
(8-)-2.5 G 0 Cg EP
%%Page: 39 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-3)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_whatattr\()69.336 96 Q(Dwarf_Attribute attr,)
117.336 108 Q 24(Dwarf_Half *return_attr,)117.336 120 R
(Dwarf_Error *error\))117.336 132 Q F0 .426(When it succeeds,)69.336 150
R F1(dwarf_whatattr\(\))2.926 E F0(returns)2.926 E F1(DW_DLV_OK)2.926 E
F0 .425(and sets)2.925 F F1(*return_attr)2.925 E F0 .425(to the attrib)
2.925 F(ute)-.2 E(code represented by the)69.336 162 Q F1
(Dwarf_Attribute)2.5 E F0(descriptor)2.5 E F1(attr)2.5 E F0 5(.I)C 2.5
(tr)-5 G(eturns)-2.5 E F1(DW_DLV_ERROR)5 E F0(on error)5 E(.)-.55 E/F2
11/Times-Bold@0 SF 2.75(6.6.5 d)69.336 195 R(warf_f)-.165 E(ormr)-.275 E
(ef\(\))-.198 E F1(int dwarf_formref\()69.336 213 Q
(Dwarf_Attribute attr,)117.336 225 Q 24(Dwarf_Off *return_offset,)
117.336 237 R(Dwarf_Error *error\))117.336 249 Q F0 1.326
(When it succeeds,)69.336 267 R F1(dwarf_formref\(\))3.826 E F0(returns)
3.826 E F1(DW_DLV_OK)3.826 E F0 1.326(and sets)3.826 F F1
(*return_offset)3.827 E F0 1.327(to the CU-)3.827 F(relati)69.336 279 Q
.99 -.15(ve o)-.25 H -.25(ff).15 G .69
(set represented by the descriptor).25 F F1(attr)3.19 E F0 .689
(if the form of the attrib)3.189 F .689(ute belongs to the)-.2 F F1
(REFERENCE)3.189 E F0(class.)69.336 291 Q F1(attr)13.267 E F0 8.267
(must be a CU-local reference, not form)10.767 F F1(DW_FORM_ref_addr)
10.768 E F0 8.268(and not)10.768 F F1(DW_FORM_sec_offset)69.336 303 Q F0
5.673(.I)3.173 G 3.173(ti)-5.673 G 3.173(sa)-3.173 G 3.173(ne)-3.173 G
.672(rror for the form to not belong to the)-3.173 F F1(REFERENCE)3.172
E F0 3.172(class. It)3.172 F(returns)3.172 E F1(DW_DLV_ERROR)69.336 315
Q F0(on error)2.5 E(.)-.55 E(Be)69.336 339 Q 3.564(ginning No)-.15 F
-.15(ve)-.15 G 3.564(mber 2010: All).15 F F1(DW_DLV_ERROR)6.064 E F0
3.564(returns set)6.064 F F1(*return_offset)6.064 E F0 6.064(.M)C 3.564
(ost errors set)-6.064 F F1(*return_offset)69.336 351 Q F0 3.533
(to zero, b)6.033 F 3.532(ut for error)-.2 F F1
(DW_DLE_ATTR_FORM_OFFSET_BAD)6.032 E F0 3.532(the function sets)6.032 F
F1(*return_offset)69.336 363 Q F0(to the in)2.5 E -.25(va)-.4 G(lid of)
.25 E(fset \(which allo)-.25 E
(ws the caller to print a more detailed error message\).)-.25 E
(See also)69.336 387 Q F1(dwarf_global_formref)2.5 E F0(belo)2.5 E -.65
(w.)-.25 G F2 2.75(6.6.6 d)69.336 432 R(warf_global_f)-.165 E(ormr)-.275
E(ef\(\))-.198 E F1(int dwarf_global_formref\()69.336 450 Q
(Dwarf_Attribute attr,)117.336 462 Q 24(Dwarf_Off *return_offset,)
117.336 474 R(Dwarf_Error *error\))117.336 486 Q F0 .781
(When it succeeds,)69.336 504 R F1(dwarf_global_formref\(\))3.281 E F0
(returns)3.281 E F1(DW_DLV_OK)3.281 E F0 .781(and sets)3.281 F F1
(*return_offset)3.281 E F0(to)3.282 E 1.322(the section-relati)69.336
516 R 1.622 -.15(ve o)-.25 H -.25(ff).15 G 1.322
(set represented by the descriptor).25 F F1(attr)3.822 E F0 1.322
(if the form of the attrib)3.822 F 1.321(ute belongs to the)-.2 F F1
(REFERENCE)69.336 528 Q F0(or other section-references classes.)2.5 E F1
(attr)69.336 546 Q F0 11.227(can be an)13.727 F 13.727(yl)-.15 G -2.25
-.15(eg a)-13.727 H(l).15 E F1(REFERENCE)13.727 E F0 11.227
(class form plus)13.727 F F1(DW_FORM_ref_addr)13.727 E F0(or)13.727 E F1
(DW_FORM_sec_offset)69.336 558 Q F0 6.466(.I)C 3.966(ti)-6.466 G 3.966
(sa)-3.966 G 3.966(ne)-3.966 G 1.465
(rror for the form to not belong to one of the reference classes.)-3.966
F(It)6.465 E(returns)69.336 570 Q F1(DW_DLV_ERROR)2.5 E F0(on error)2.5
E 5(.S)-.55 G(ee also)-5 E F1(dwarf_formref)2.5 E F0(abo)2.5 E -.15(ve)
-.15 G(.).15 E 7.831(The caller must determine which section the of)
69.336 588 R 7.832(fset returned applies to.)-.25 F 7.832(The function)
12.832 F F1(dwarf_get_form_class\(\))69.336 600 Q F0
(is useful to determine the applicable section.)5 E(The function con)
69.336 618 Q -.15(ve)-.4 G(rts CU relati).15 E .3 -.15(ve o)-.25 H -.25
(ff).15 G(sets from forms such as D).25 E
(W_FORM_ref4 into global section of)-.3 E(fsets.)-.25 E F2 2.75(6.6.7 d)
69.336 651 R(warf_con)-.165 E -.11(ve)-.44 G(rt_to_global_offset\(\)).11
E F1(int dwarf_convert_to_global_offset\()69.336 669 Q
(Dwarf_Attribute attr,)117.336 681 Q 24(Dwarf_Off offset,)117.336 693 R
24(Dwarf_Off *return_offset,)117.336 705 R(Dwarf_Error *error\))117.336
717 Q F0 6.259(When it succeeds,)69.336 735 R F1
(dwarf_convert_to_global_offset\(\))8.759 E F0(returns)8.759 E F1
(DW_DLV_OK)8.758 E F0 6.258(and sets)8.758 F(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-3)120.71 G 2.5(9-)-2.5 G 0 Cg EP
%%Page: 40 40
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(0-)-2.5 G/F1 10
/Courier@0 SF(*return_offset)69.336 96 Q F0 .367(to the section-relati)
2.866 F .667 -.15(ve o)-.25 H -.25(ff).15 G .367
(set represented by the cu-relati).25 F .667 -.15(ve o)-.25 H -.25(ff)
.15 G(set).25 E F1(offset)2.867 E F0 .367(if the form)2.867 F 1.514
(of the attrib)69.336 108 R 1.514(ute belongs to the)-.2 F F1(REFERENCE)
4.014 E F0(class.)4.014 E F1(attr)6.514 E F0 1.514
(must be a CU-local reference \(D)4.014 F -1.2(WA)-.3 G 1.514(RF class)
1.2 F .687(REFERENCE\) or form)69.336 120 R F1(DW_FORM_ref_addr)3.187 E
F0 .688(and the)3.187 F F1(attr)3.188 E F0 .688(must be directly rele)
3.188 F -.25(va)-.25 G .688(nt for the calculated).25 F F1
(*return_offset)69.336 132 Q F0(to mean an)2.5 E(ything.)-.15 E
(The function returns)69.336 156 Q F1(DW_DLV_ERROR)2.5 E F0(on error)2.5
E(.)-.55 E(The function is not strictly necessary b)69.336 180 Q
(ut may be a con)-.2 E -.15(ve)-.4 G(nience for attrib).15 E
(ute printing)-.2 E(in case of error)5 E(.)-.55 E/F2 11/Times-Bold@0 SF
2.75(6.6.8 d)69.336 225 R(warf_f)-.165 E(ormaddr\(\))-.275 E F1
(int dwarf_formaddr\()69.336 243 Q(Dwarf_Attribute attr,)117.336 255 Q
18(Dwarf_Addr *)117.336 267 R(return_addr,)6 E(Dwarf_Error *error\))
117.336 279 Q F0 .711(When it succeeds,)69.336 297 R F1
(dwarf_formaddr\(\))3.211 E F0(returns)3.211 E F1(DW_DLV_OK)3.211 E F0
.711(and sets)3.211 F F1(*return_addr)3.211 E F0 .711(to the address)
3.211 F .081(represented by the descriptor)69.336 309 R F1(attr)2.581 E
F0 .081(if the form of the attrib)2.581 F .082(ute belongs to the)-.2 F
F1(ADDRESS)2.582 E F0 2.582(class. It)2.582 F .082(is an error)2.582 F
(for the form to not belong to this class.)69.336 321 Q(It returns)5 E
F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E 7.141
(One possible error that can arise \(in a .dw)69.336 345 R 9.641(oo)-.1
G 7.141(bject f)-9.641 F 7.14(ile or a .dwp package f)-.2 F 7.14
(ile\) is)-.2 F F1(DW_DLE_MISSING_NEEDED_DEBUG_ADDR_SECTION)69.336 357 Q
F0 6.41(.S)C 1.41(uch an error means that the)-6.41 F(.dw)6.41 E 3.91
(oo)-.1 G 3.91(r.)-3.91 G(dwp)-3.91 E -.2(fi)69.336 369 S .97
(le is missing the).2 F F1(.debug_addr)3.47 E F0 3.47(section. When)3.47
F .969(opening a .dw)3.47 F 3.469(oo)-.1 G .969(bject f)-3.469 F .969
(ile or a .dwp package f)-.2 F .969(ile one)-.2 F 2.411
(should also open the corresponding e)69.336 381 R -.15(xe)-.15 G 2.411
(cutable and use).15 F F1(dwarf_set_tied_dbg\(\))4.911 E F0 2.411
(to associate the)4.911 F(objects before calling dw)69.336 393 Q
(arf_formaddr\(\).)-.1 E 2.5(H3")69.336 441 S(dw)-2.5 E(arf_get_deb)-.1
E(ug_addr_inde)-.2 E(x\(\)")-.15 E F1(int dwarf_get_debug_addr_index\()
69.336 459 Q(Dwarf_Attribute attr,)117.336 471 Q 6(Dwarf_Unsigned *)
117.336 483 R(return_index,)6 E(Dwarf_Error *error\))117.336 495 Q
(dwarf_get_debug_addr_index\(\))69.336 513 Q F0 16.866(is only v)19.366
F 16.866(alid on attrib)-.25 F 16.865(utes with form)-.2 F F1
(DW_FORM_GNU_addr_index)69.336 525 Q F0(or)2.5 E F1(DW_FORM_addrx)2.5 E
F0(.)A(The function mak)69.336 549 Q(es it possible to print the inde)
-.1 E 2.5(xf)-.15 G(rom a dw)-2.5 E(arf dumper program.)-.1 E 9.687
(When it succeeds,)69.336 573 R F1(dwarf_get_debug_addr_index\(\))12.187
E F0(returns)12.187 E F1(DW_DLV_OK)12.187 E F0 9.688(and sets)12.187 F
F1(*return_index)69.336 585 Q F0(to the attrib)2.5 E(ute')-.2 E 2.5(si)
-.55 G(nde)-2.5 E 2.5(x\()-.15 G(into the)-2.5 E F1(.debug_addr)2.5 E F0
(section\).)2.5 E(It returns)69.336 609 Q F1(DW_DLV_ERROR)2.5 E F0
(on error)2.5 E(.)-.55 E F2 2.75(6.6.9 d)69.336 666 R(warf_get_deb)-.165
E(ug_str_index\(\))-.22 E F1(int dwarf_get_debug_str_index\()69.336 702
Q 6(Dwarf_Attribute attr,)117.336 714 R(Dwarf_Unsigned * return_index,)
117.336 726 Q(Dwarf_Error *)117.336 738 Q(error\);)24 E F0(re)69.336 768
Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(0-)-2.5 G 0
Cg EP
%%Page: 41 41
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(1-)-2.5 G -.15(Fo)69.336
96 S 3.238(ra).15 G 3.238(na)-3.238 G(ttrib)-3.238 E .738(ute with)-.2 F
(form)5.737 E/F1 10/Courier@0 SF(DW_FORM_strx)3.237 E F0(or)3.237 E F1
(DW_FORM_GNU_str_index)3.237 E F0 .737(this function retrie)3.237 F -.15
(ve)-.25 G 3.237(st).15 G(he)-3.237 E(inde)69.336 108 Q 2.5(x\()-.15 G
(which refers to a .deb)-2.5 E(ug_str_of)-.2 E
(fsets section in this .dw)-.25 E(o\).)-.1 E 1.721
(If successful, the function)69.336 126 R F1
(dwarf_get_debug_str_index\(\))4.221 E F0(returns)4.221 E F1(DW_DLV_OK)
4.221 E F0 1.721(and returns the)4.221 F(inde)69.336 138 Q 2.5(xt)-.15 G
(hrough the)-2.5 E F1(return_index\(\))2.5 E F0(pointer)2.5 E(.)-.55 E
1.751(If the passed in attrib)69.336 156 R 1.751(ute does not ha)-.2 F
2.051 -.15(ve t)-.2 H 1.751(his form or there is no v).15 F 1.751
(alid compilation unit conte)-.25 F 1.751(xt for the)-.15 F(attrib)
69.336 168 Q(ute the function returns)-.2 E F1(DW_DLV_ERROR)2.5 E F0(.)A
F1(DW_DLV_NO_ENTRY)69.336 186 Q F0(is not returned.)2.5 E/F2 11
/Times-Bold@0 SF 2.75(6.6.10 d)69.336 219 R(warf_f)-.165 E(ormflag\(\))
-.275 E F1(int dwarf_formflag\()69.336 237 Q(Dwarf_Attribute attr,)
117.336 249 Q(Dwarf_Bool * return_bool,)117.336 261 Q
(Dwarf_Error *error\))117.336 273 Q F0 1.821(When it succeeds,)69.336
291 R F1(dwarf_formflag\(\))4.322 E F0(returns)4.322 E F1(DW_DLV_OK)
4.322 E F0 1.822(and sets)4.322 F F1(*return_bool)4.322 E F0 1.822
(to the \(one)4.322 F(unsigned byte\) flag v)69.336 303 Q 2.5(alue. An)
-.25 F 2.5(yn)-.15 G(on-zero v)-2.5 E(alue means true.)-.25 E 2.5(Az)5 G
(ero v)-2.5 E(alue means f)-.25 E(alse.)-.1 E 1.53(Before 29 No)69.336
327 R -.15(ve)-.15 G 1.53(mber 2012 this w).15 F 1.529
(ould only return 1 or zero through the pointer)-.1 F 4.029(,b)-.4 G
1.529(ut that w)-4.229 F 1.529(as al)-.1 F -.1(wa)-.1 G 1.529(ys a).1 F
.604(strange thing to do.)69.336 339 R .604(The D)5.604 F -1.2(WA)-.3 G
.604(RF specif)1.2 F .604(ication has al)-.2 F -.1(wa)-.1 G .604
(ys been clear that an).1 F 3.105(yn)-.15 G .605(on-zero v)-3.105 F .605
(alue means true.)-.25 F(The function should report the v)69.336 351 Q
(alue found truthfully)-.25 E 2.5(,a)-.65 G(nd no)-2.5 E 2.5(wi)-.25 G
2.5(td)-2.5 G(oes.)-2.5 E(It returns)69.336 375 Q F1(DW_DLV_ERROR)2.5 E
F0(on error or if the)2.5 E F1(attr)2.5 E F0(does not ha)2.5 E .3 -.15
(ve f)-.2 H(orm flag.).15 E F2 2.75(6.6.11 d)69.336 408 R(warf_f)-.165 E
(ormudata\(\))-.275 E F1(int dwarf_formudata\()69.336 426 Q 12
(Dwarf_Attribute attr,)117.336 438 R 6(Dwarf_Unsigned *)117.336 450 R
(return_uvalue,)6 E 24(Dwarf_Error *)117.336 462 R(error\))6 E F0 4.824
(The function)69.336 480 R F1(dwarf_formudata\(\))7.324 E F0(returns)
7.324 E F1(DW_DLV_OK)7.323 E F0 4.823(and sets)7.323 F F1
(*return_uvalue)7.323 E F0 4.823(to the)7.323 F F1(Dwarf_Unsigned)69.336
492 Q F0 -.25(va)3.277 G .777(lue of the attrib).25 F .777
(ute represented by the descriptor)-.2 F F1(attr)3.277 E F0 .778
(if the form of the attrib)3.277 F(ute)-.2 E 2.508(belongs to the)69.336
504 R F1(CONSTANT)5.008 E F0 5.008(class. It)5.008 F 2.508
(is an error for the form to not belong to this class.)5.008 F 2.507
(It returns)7.507 F F1(DW_DLV_ERROR)69.336 516 Q F0(on error)2.5 E(.)
-.55 E(Ne)69.336 540 Q -.15(ve)-.25 G 2.5(rr).15 G(eturns)-2.5 E F1
(DW_DLV_NO_ENTRY)2.5 E F0(.)A -.15(Fo)69.336 564 S 3.617(rD).15 G -1.2
(WA)-3.917 G 1.117(RF2 and D)1.2 F -1.2(WA)-.3 G(RF3,)1.2 E F1
(DW_FORM_data4)3.617 E F0(and)3.617 E F1(DW_FORM_data8)3.617 E F0 1.117
(are possibly class)3.617 F F1(CONSTANT)3.617 E F0(,)A(and for D)69.336
576 Q -1.2(WA)-.3 G(RF4 and later the)1.2 E 2.5(ya)-.15 G(re def)-2.5 E
(initely class)-.2 E F1(CONSTANT)2.5 E F0(.)A F2 2.75(6.6.12 d)69.336
609 R(warf_f)-.165 E(ormsdata\(\))-.275 E F1(int dwarf_formsdata\()
69.336 627 Q(Dwarf_Attribute attr,)117.336 639 Q 6(Dwarf_Signed *)
117.336 651 R(return_svalue,)6 E(Dwarf_Error *error\))117.336 663 Q F0
4.824(The function)69.336 681 R F1(dwarf_formsdata\(\))7.324 E F0
(returns)7.324 E F1(DW_DLV_OK)7.323 E F0 4.823(and sets)7.323 F F1
(*return_svalue)7.323 E F0 4.823(to the)7.323 F F1(Dwarf_Signed)69.336
693 Q F0 -.25(va)4.077 G 1.577(lue of the attrib).25 F 1.577
(ute represented by the descriptor)-.2 F F1(attr)4.077 E F0 1.578
(if the form of the attrib)4.077 F(ute)-.2 E .866(belongs to the)69.336
705 R F1(CONSTANT)3.366 E F0 3.366(class. It)3.366 F .866
(is an error for the form to not belong to this class.)3.366 F .866
(If the size of the)5.866 F .17(data attrib)69.336 717 R .17
(ute referenced is smaller than the size of the)-.2 F F1(Dwarf_Signed)
2.67 E F0 .17(type, its v)2.67 F .17(alue is sign e)-.25 F 2.67
(xtended. It)-.15 F(returns)69.336 729 Q F1(DW_DLV_ERROR)2.5 E F0
(on error)2.5 E(.)-.55 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)
-2.5 E 2.5(-4)120.71 G 2.5(1-)-2.5 G 0 Cg EP
%%Page: 42 42
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(2-)-2.5 G(Ne)69.336 96 Q
-.15(ve)-.25 G 2.5(rr).15 G(eturns)-2.5 E/F1 10/Courier@0 SF
(DW_DLV_NO_ENTRY)2.5 E F0(.)A -.15(Fo)69.336 120 S 3.617(rD).15 G -1.2
(WA)-3.917 G 1.117(RF2 and D)1.2 F -1.2(WA)-.3 G(RF3,)1.2 E F1
(DW_FORM_data4)3.617 E F0(and)3.617 E F1(DW_FORM_data8)3.617 E F0 1.117
(are possibly class)3.617 F F1(CONSTANT)3.617 E F0(,)A(and for D)69.336
132 Q -1.2(WA)-.3 G(RF4 and later the)1.2 E 2.5(ya)-.15 G(re def)-2.5 E
(initely class)-.2 E F1(CONSTANT)2.5 E F0(.)A/F2 11/Times-Bold@0 SF 2.75
(6.6.13 d)69.336 165 R(warf_f)-.165 E(ormblock\(\))-.275 E F1
(int dwarf_formblock\()69.336 183 Q(Dwarf_Attribute attr,)117.336 195 Q
6(Dwarf_Block **)117.336 207 R(return_block,)6 E(Dwarf_Error *)117.336
219 Q(error\))18 E F0 .761(The function)69.336 237 R F1
(dwarf_formblock\(\))3.261 E F0(returns)3.261 E F1(DW_DLV_OK)3.261 E F0
.762(and sets)3.262 F F1(*return_block)3.262 E F0 .762
(to a pointer to a)3.262 F F1(Dwarf_Block)69.336 249 Q F0 1.132
(structure containing the v)3.633 F 1.132(alue of the attrib)-.25 F
1.132(ute represented by the descriptor)-.2 F F1(attr)3.632 E F0 1.132
(if the)3.632 F .152(form of the attrib)69.336 261 R .152
(ute belongs to the)-.2 F F1(BLOCK)2.653 E F0 2.653(class. It)2.653 F
.153(is an error for the form to not belong to this class.)2.653 F(The)
5.153 E .758(storage pointed to by a successful return of)69.336 273 R
F1(dwarf_formblock\(\))3.258 E F0 .758
(should be freed using the allocation)3.258 F(type)69.336 285 Q F1
(DW_DLA_BLOCK)9.449 E F0 11.949(,w)C 6.949
(hen no longer of interest \(see)-11.949 F F1(dwarf_dealloc\(\))9.449 E
F0 9.449(\). It)B(returns)9.449 E F1(DW_DLV_ERROR)69.336 297 Q F0
(on error)2.5 E(.)-.55 E F2 2.75(6.6.14 d)69.336 342 R(warf_f)-.165 E
(ormstring\(\))-.275 E F1(int dwarf_formstring\()69.336 378 Q
(Dwarf_Attribute attr,)117.336 390 Q 42(char **)117.336 402 R
(return_string,)12 E(Dwarf_Error *error\))117.336 414 Q F0 .371
(The function)69.336 432 R F1(dwarf_formstring\(\))2.871 E F0(returns)
2.871 E F1(DW_DLV_OK)2.871 E F0 .371(and sets)2.871 F F1(*return_string)
2.871 E F0 .371(to a pointer to)2.871 F 2.563(an)69.336 444 S .063
(ull-terminated string containing)-2.563 F .064(the v)5.063 F .064
(alue of the attrib)-.25 F .064(ute represented by the descriptor)-.2 F
F1(attr)2.564 E F0 .064(if the form)2.564 F .92(of the attrib)69.336 456
R .919(ute belongs to the)-.2 F F1(STRING)3.419 E F0 3.419(class. It)
3.419 F .919(is an error for the form to not belong to this class.)3.419
F(The)5.919 E 1.163(storage pointed to by a successful return of)69.336
468 R F1(dwarf_formstring\(\))3.663 E F0 1.163(should not be freed.)
3.663 F 1.163(The pointer)6.163 F 5.91(points into e)69.336 480 R 5.91
(xisting D)-.15 F -1.2(WA)-.3 G 5.91
(RF memory and the pointer becomes stale/in)1.2 F -.25(va)-.4 G 5.91
(lid after a call to).25 F F1(dwarf_finish)69.336 492 Q F0(.)A F1
(dwarf_formstring\(\))5 E F0(returns)2.5 E F1(DW_DLV_ERROR)2.5 E F0
(on error)2.5 E(.)-.55 E F2 2.75(6.6.15 d)69.336 525 R(warf_f)-.165 E
(ormsig8\(\))-.275 E F1(int dwarf_formsig8\()69.336 543 Q
(Dwarf_Attribute attr,)117.336 555 Q 6(Dwarf_Sig8 *)117.336 567 R
(return_sig8,)6 E(Dwarf_Error *)117.336 579 Q(error\))18 E F0 4.336
(The function)69.336 597 R F1(dwarf_formsig8\(\))6.836 E F0(returns)
6.836 E F1(DW_DLV_OK)6.836 E F0 4.337
(and copies the 8 byte signature to a)6.837 F F1(Dwarf_Sig8)69.336 609 Q
F0 6.878(structure pro)9.378 F 6.878
(vided by the caller if the form of the attrib)-.15 F 6.877
(ute is of form)-.2 F F1(DW_FORM_ref_sig8)69.336 621 Q F0 3.3(\(am)3.3 G
.8(ember of the)-3.3 F F1(REFERENCE)3.3 E F0 3.3(class\). It)3.3 F .8
(is an error for the form to be an)3.3 F(ything)-.15 E -.2(bu)69.336 633
S(t).2 E F1(DW_FORM_ref_sig8)2.5 E F0 5(.I)C 2.5(tr)-5 G(eturns)-2.5 E
F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E
(This form is used to refer to a type unit.)69.336 651 Q F2 2.75
(6.6.16 d)69.336 684 R(warf_f)-.165 E(ormsig8\(\))-.275 E F0(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(2-)-2.5
G 0 Cg EP
%%Page: 43 43
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(3-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_formexprloc\()69.336 96 Q(Dwarf_Attribute attr,)
117.336 108 Q(Dwarf_Unsigned * return_exprlen,)117.336 120 Q 6
(Dwarf_Ptr *)117.336 132 R(block_ptr,)6 E(Dwarf_Error *)117.336 144 Q
(error\))18 E F0 .359(The function)69.336 162 R F1
(dwarf_formexprloc\(\))2.859 E F0(returns)2.859 E F1(DW_DLV_OK)2.859 E
F0 .358(and sets the tw)2.859 F 2.858(ov)-.1 G .358
(alues thru the pointers to)-3.108 F 4.231
(the length and bytes of the D)69.336 174 R(W_FORM_e)-.3 E 4.231
(xprloc entry if the form of the attrib)-.15 F 4.232(ute is of form)-.2
F F1(DW_FORM_experloc)69.336 186 Q F0 6.25(.I)C 3.75(ti)-6.25 G 3.75(sa)
-3.75 G 3.75(ne)-3.75 G 1.25(rror for the form to be an)-3.75 F 1.25
(ything b)-.15 F(ut)-.2 E F1(DW_FORM_exprloc)3.75 E F0 6.25(.I)C 3.75
(tr)-6.25 G(eturns)-3.75 E F1(DW_DLV_ERROR)69.336 198 Q F0(on error)2.5
E(.)-.55 E .674(On success the v)69.336 216 R .674(alue set through the)
-.25 F F1(return_exprlen)3.174 E F0 .674
(pointer is the length of the location e)3.174 F(xpression.)-.15 E 2.563
(On success the v)69.336 228 R 2.563(alue set through the)-.25 F F1
(block_ptr)5.063 E F0 2.563
(pointer is a pointer to the bytes of the location)5.063 F -.15(ex)
69.336 240 S(pression itself.).15 E/F2 11/Times-Bold@0 SF 2.75(6.6.17 d)
69.336 273 R(warf_get_f)-.165 E(orm_class\(\))-.275 E F1
(enum Dwarf_Form_Class dwarf_get_form_class\()69.336 291 Q
(Dwarf_Half dwversion,)93.336 303 Q(Dwarf_Half attrnum,)93.336 315 Q
(Dwarf_Half offset_size,)93.336 327 Q(Dwarf_Half form\))93.336 339 Q F0
.899(The function is just for the con)69.336 357 R -.15(ve)-.4 G .899
(nience of libdw).15 F .9(arf clients that might wish to cate)-.1 F .9
(gorize the FORM of a)-.15 F .617(particular attrib)69.336 369 R 3.117
(ute. The)-.2 F -.3(DW)3.117 G .617(ARF specif)-.9 F .617(ication di)-.2
F .616(vides FORMs into classes in Chapter 7 and this function)-.25 F
-.2(fi)69.336 381 S(gures out the correct class for a form.).2 E(The)
69.336 399 Q F1(dwversion)2.924 E F0 .424(passed in shall be the dw)
2.924 F .424(arf v)-.1 F .424(ersion of the compilation unit in)-.15 F
-.2(vo)-.4 G(lv).2 E .424(ed \(2 for D)-.15 F -1.2(WA)-.3 G .425(RF2, 3)
1.2 F 1.249(for D)69.336 411 R -1.2(WA)-.3 G 1.249(RF3, 4 for D)1.2 F
-1.2(WA)-.3 G 1.249(RF 4\).)1.2 F(The)6.249 E F1(attrnum)3.749 E F0
1.249(passed in shall be the attrib)3.749 F 1.248
(ute number of the attrib)-.2 F(ute)-.2 E(in)69.336 423 Q -.2(vo)-.4 G
(lv).2 E .536(ed \(for e)-.15 F(xample,)-.15 E F1(DW_AT_name)3.037 E F0
3.037(\). The)3.037 F F1(offset_size)3.037 E F0 .537
(passed in shall be the length of an of)3.037 F .537(fset in)-.25 F
1.327(the current compilation unit \(4 for 32bit dw)69.336 435 R 1.327
(arf or 8 for 64bit dw)-.1 F 3.827(arf\). The)-.1 F F1(form)3.827 E F0
1.326(passed in shall be the)3.827 F(attrib)69.336 447 Q 1.01
(ute form number)-.2 F 6.01(.I)-.55 G(f)-6.01 E F1 -2.49
(form DW_FORM_indirect)3.51 F F0 1.01(is passed in)3.51 F F1
(DW_FORM_CLASS_UNKNOWN)3.51 E F0(will)3.51 E
(be returned as this form has no def)69.336 459 Q(ined 'class'.)-.2 E
1.382(When it returns)69.336 477 R F1(DW_FORM_CLASS_UNKNOWN)3.882 E F0
1.381(the function is simply saying it could not determine the)3.882 F
(correct class gi)69.336 489 Q -.15(ve)-.25 G 2.5(nt).15 G(he ar)-2.5 E
(guments presented.)-.18 E(Some user)5 E(-def)-.2 E(ined attrib)-.2 E
(utes might ha)-.2 E .3 -.15(ve t)-.2 H(his problem.).15 E 1.155
(The function)69.336 513 R F1(dwarf_get_version_of_die\(\))3.655 E F0
1.155(may be helpful in f)3.655 F 1.155(illing out ar)-.2 F 1.156
(guments for a call to)-.18 F F1(dwarf_get_form_class\(\))69.336 525 Q
F0(.)A F2 2.75(6.6.18 d)69.336 558 R(warf_loclist_n\(\))-.165 E F1
(int dwarf_loclist_n\()69.336 576 Q(Dwarf_Attribute attr,)117.336 588 Q
(Dwarf_Locdesc ***llbuf,)117.336 600 Q 6(Dwarf_Signed *listlen,)117.336
612 R(Dwarf_Error *error\))117.336 624 Q F0 1.29(The function)69.336 642
R F1(dwarf_loclist_n\(\))3.79 E F0(sets)3.789 E F1(*llbuf)3.789 E F0
1.289(to point to an array of)3.789 F F1(Dwarf_Locdesc)3.789 E F0
(pointers)3.789 E .671(corresponding to each of the location e)69.336
654 R .672(xpressions in a location list, and sets)-.15 F F1(*listlen)
3.172 E F0 .672(to the number of)3.172 F
(elements in the array and returns)69.336 666 Q F1(DW_DLV_OK)2.5 E F0
(if the attrib)2.5 E(ute is appropriate.)-.2 E .739
(This is the preferred function for Dw)69.336 684 R .738
(arf_Locdesc as it is the interf)-.1 F .738(ace allo)-.1 F .738
(wing access to an entire loclist.)-.25 F .728(\(use of)69.336 696 R F1
(dwarf_loclist_n\(\))3.228 E F0 .728(is suggested as the better interf)
3.228 F .729(ace, though)-.1 F F1(dwarf_loclist\(\))3.229 E F0 .729
(is still)3.229 F(supported.\))69.336 708 Q .876(If the attrib)69.336
726 R .876(ute is a reference to a location list \(D)-.2 F .876
(W_FORM_data4 or D)-.3 F .876(W_FORM_data8\) the location list)-.3 F
(entries are used to f)69.336 738 Q(ill in all the f)-.2 E(ields of the)
-.2 E F1(Dwarf_Locdesc)2.5 E F0(\(s\) returned.)A(re)69.336 768 Q 2.5
(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(3-)-2.5 G 0 Cg EP
%%Page: 44 44
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(4-)-2.5 G 1.693
(If the attrib)69.336 96 R 1.693(ute is a location description \(D)-.2 F
1.693(W_FORM_block2 or D)-.3 F 1.693(W_FORM_block4\) then some of the)
-.3 F/F1 10/Courier@0 SF(Dwarf_Locdesc)69.336 108 Q F0 -.25(va)2.807 G
.306(lues of the single).25 F F1(Dwarf_Locdesc)2.806 E F0 .306
(record are set to ')2.806 F .306(sensible' b)-.55 F .306
(ut arbitrary v)-.2 F(alues.)-.25 E(Specif)69.336 120 Q(ically)-.2 E 2.5
(,l)-.65 G(d_lopc is set to 0 and ld_hipc is set to all-bits-on. And)
-2.5 E F1(*listlen)2.5 E F0(is set to 1.)2.5 E 3.936(If the attrib)
69.336 138 R 3.936(ute is a reference to a location e)-.2 F 3.937
(xpression \(D)-.15 F(W_FORM_loce)-.3 E 3.937(xper\) then some of the)
-.15 F F1(Dwarf_Locdesc)69.336 150 Q F0 -.25(va)2.807 G .306
(lues of the single).25 F F1(Dwarf_Locdesc)2.806 E F0 .306
(record are set to ')2.806 F .306(sensible' b)-.55 F .306
(ut arbitrary v)-.2 F(alues.)-.25 E(Specif)69.336 162 Q(ically)-.2 E 2.5
(,l)-.65 G(d_lopc is set to 0 and ld_hipc is set to all-bits-on. And)
-2.5 E F1(*listlen)2.5 E F0(is set to 1.)2.5 E(It returns)69.336 180 Q
F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E F1(dwarf_loclist_n\(\))
69.336 198 Q F0 -.1(wo)12.665 G 10.165(rks on).1 F F1(DW_AT_location)
12.665 E F0(,)A F1(DW_AT_data_member_location)12.665 E F0(,)A F1
(DW_AT_vtable_elem_location)69.336 210 Q F0(,)A F1(DW_AT_string_length)
10.687 E F0(,)A F1(DW_AT_use_location)10.687 E F0 10.686(,a)C(nd)-10.686
E F1(DW_AT_return_addr)69.336 222 Q F0(attrib)2.5 E(utes.)-.2 E 4.327
(If the attrib)69.336 240 R 4.327(ute is)-.2 F F1
(DW_AT_data_member_location)6.827 E F0 4.327(the v)6.827 F 4.328
(alue may be of class CONST)-.25 F(ANT)-.93 E(.)-.74 E F1
(dwarf_loclist_n\(\))69.336 252 Q F0 .054(is unable to read class CONST)
2.554 F(ANT)-.93 E 2.553(,s)-.74 G 2.553(oy)-2.553 G .053(ou need to f)
-2.553 F .053(irst determine the class using)-.2 F F1
(dwarf_get_form_class\(\))69.336 264 Q F0 5.345
(and if it is class CONST)7.845 F 5.346(ANT call)-.93 F F1
(dwarf_formsdata\(\))7.846 E F0(or)7.846 E F1(dwarf_formudata\(\))69.336
276 Q F0 .298(to get the constant v)2.799 F .298
(alue \(you may need to call both as D)-.25 F -1.2(WA)-.3 G .298
(RF4 does not def)1.2 F(ine)-.2 E(the signedness of the constant v)
69.336 288 Q(alue\).)-.25 E .203
(Storage allocated by a successful call of)69.336 306 R F1
(dwarf_loclist_n\(\))2.704 E F0 .204
(should be deallocated when no longer of)2.704 F 1.176(interest \(see)
69.336 318 R F1(dwarf_dealloc\(\))3.676 E F0 3.676(\). The)B 1.176
(block of)3.676 F F1(Dwarf_Loc)3.676 E F0 1.176
(structs pointed to by the)3.676 F F1(ld_s)3.675 E F0 -.2(fi)3.675 G
1.175(eld of).2 F(each)69.336 330 Q F1(Dwarf_Locdesc)3.388 E F0 .888
(structure should be deallocated with the allocation type)3.388 F F1
(DW_DLA_LOC_BLOCK)3.388 E F0(.)A 2.922(and the)69.336 342 R F1(llbuf[])
2.922 E F0 .422
(space pointed to should be deallocated with allocation type)2.922 F F1
(DW_DLA_LOCDESC)2.921 E F0 5.421(.T)C(his)-5.421 E(should be follo)
69.336 354 Q(wed by deallocation of the)-.25 E F1(llbuf)2.5 E F0
(using the allocation type)2.5 E F1(DW_DLA_LIST)2.5 E F0(.)A F1(void)
89.336 372 Q(example9\(Dwarf_Debug dbg,Dwarf_Attribute someattr\))89.336
384 Q({)89.336 396 Q(Dwarf_Signed lcount = 0;)101.336 408 Q
(Dwarf_Locdesc **llbuf = 0;)101.336 420 Q(Dwarf_Error error = 0;)101.336
432 Q(int lres = 0;)101.336 444 Q
(lres = dwarf_loclist_n\(someattr, &llbuf,&lcount,&error\);)101.336 468
Q(if \(lres == DW_DLV_OK\) {)101.336 480 Q(Dwarf_Signed i = 0;)113.336
492 Q(for \(i = 0; i < lcount; ++i\) {)113.336 504 Q(/* use llbuf[i] */)
125.336 516 Q(dwarf_dealloc\(dbg, llbuf[i]->ld_s, DW_DLA_LOC_BLOCK\);)
125.336 528 Q(dwarf_dealloc\(dbg,llbuf[i], DW_DLA_LOCDESC\);)125.336 540
Q(})113.336 552 Q(dwarf_dealloc\(dbg, llbuf, DW_DLA_LIST\);)113.336 564
Q(})101.336 576 Q(})89.336 588 Q/F2 11/Times-Bold@0 SF 2.75(6.6.19 d)
69.336 627 R(warf_loclist\(\))-.165 E F1(int dwarf_loclist\()69.336 645
Q(Dwarf_Attribute attr,)117.336 657 Q(Dwarf_Locdesc **llbuf,)117.336 669
Q 6(Dwarf_Signed *listlen,)117.336 681 R(Dwarf_Error *error\))117.336
693 Q F0 1.15(The function)69.336 711 R F1(dwarf_loclist\(\))3.65 E F0
(sets)3.65 E F1(*llbuf)3.651 E F0 1.151(to point to a)3.651 F F1
(Dwarf_Locdesc)3.651 E F0 1.151(pointer for the single)3.651 F 1.726
(location e)69.336 723 R 1.726(xpression it can return.)-.15 F 1.726
(It sets)6.726 F F1(*listlen)4.226 E F0 1.726(to 1.)4.226 F 1.725
(and returns)6.726 F F1(DW_DLV_OK)4.225 E F0 1.725(if the attrib)4.225 F
1.725(ute is)-.2 F(appropriate.)69.336 735 Q(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 45 45
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(5-)-2.5 G 1.188
(It is less fle)69.336 96 R 1.188(xible than)-.15 F/F1 10/Courier@0 SF
(dwarf_loclist_n\(\))3.688 E F0 1.188(in that)3.688 F F1
(dwarf_loclist\(\))3.689 E F0 1.189(can handle a maximum of)3.689 F .303
(one location e)69.336 108 R .302(xpression, not a full location list.)
-.15 F .302(If a location-list is present it returns only the f)5.302 F
.302(irst location-)-.2 F(list entry location description.)69.336 120 Q
(Use)5 E F1(dwarf_loclist_n\(\))2.5 E F0(instead.)2.5 E 7.675
(It returns)69.336 138 R F1(DW_DLV_ERROR)10.175 E F0 7.675(on error)
10.175 F(.)-.55 E F1(dwarf_loclist\(\))12.675 E F0 -.1(wo)10.175 G 7.675
(rks on).1 F F1(DW_AT_location)10.175 E F0(,)A F1
(DW_AT_data_member_location)69.336 150 Q F0(,)A F1
(DW_AT_vtable_elem_location)115 E F0(,)A F1(DW_AT_string_length)69.336
162 Q F0(,)A F1(DW_AT_use_location)2.5 E F0 2.5(,a)C(nd)-2.5 E F1
(DW_AT_return_addr)2.5 E F0(attrib)2.5 E(utes.)-.2 E 1.06
(Storage allocated by a successful call of)69.336 180 R F1
(dwarf_loclist\(\))3.561 E F0 1.061
(should be deallocated when no longer of)3.561 F 1.176(interest \(see)
69.336 192 R F1(dwarf_dealloc\(\))3.676 E F0 3.676(\). The)B 1.176
(block of)3.676 F F1(Dwarf_Loc)3.676 E F0 1.176
(structs pointed to by the)3.676 F F1(ld_s)3.675 E F0 -.2(fi)3.675 G
1.175(eld of).2 F(each)69.336 204 Q F1(Dwarf_Locdesc)3.388 E F0 .888
(structure should be deallocated with the allocation type)3.388 F F1
(DW_DLA_LOC_BLOCK)3.388 E F0(.)A(This should be follo)69.336 216 Q
(wed by deallocation of the)-.25 E F1(llbuf)2.5 E F0
(using the allocation type)2.5 E F1(DW_DLA_LOCDESC)2.5 E F0(.)A F1
(void examplea\(Dwarf_Debug dbg,Dwarf_Attribute someattr\))89.336 234 Q
({)89.336 246 Q(Dwarf_Signed lcount = 0;)101.336 258 Q
(Dwarf_Locdesc *llbuf = 0;)101.336 270 Q(Dwarf_Error error = 0;)101.336
282 Q(int lres = 0;)101.336 294 Q
(lres = dwarf_loclist\(someattr, &llbuf,&lcount,&error\);)101.336 318 Q
(if \(lres == DW_DLV_OK\) {)101.336 330 Q
(/* lcount is always 1, \(and has always been 1\) */)113.336 342 Q
(/* Use llbuf here. */)113.336 354 Q
(dwarf_dealloc\(dbg, llbuf->ld_s, DW_DLA_LOC_BLOCK\);)113.336 378 Q
(dwarf_dealloc\(dbg, llbuf, DW_DLA_LOCDESC\);)113.336 390 Q(})101.336
402 Q(})89.336 414 Q/F2 11/Times-Bold@0 SF 2.75(6.6.20 d)69.336 453 R
(warf_loclist_fr)-.165 E(om_expr\(\))-.198 E F1
(int dwarf_loclist_from_expr\()69.336 471 Q(Dwarf_Debug dbg,)117.336 483
Q(Dwarf_Ptr bytes_in,)117.336 495 Q(Dwarf_Unsigned bytes_len,)117.336
507 Q(Dwarf_Locdesc **llbuf,)117.336 519 Q 6(Dwarf_Signed *listlen,)
117.336 531 R(Dwarf_Error *error\))117.336 543 Q F0(Use)69.336 561 Q F1
(dwarf_loclist_from_expr_b\(\))2.5 E F0 2.5(instead. This)2.5 F
(function is obsolete.)2.5 E 1.023(The function)69.336 579 R F1
(dwarf_loclist_from_expr\(\))3.523 E F0(sets)3.523 E F1(*llbuf)3.523 E
F0 1.023(to point to a)3.523 F F1(Dwarf_Locdesc)3.523 E F0(pointer)3.523
E .267(for the single location e)69.336 591 R .267
(xpression which is pointed to by)-.15 F F1(*bytes_in)2.767 E F0 .268
(\(whose length is)2.768 F F1(*bytes_len)2.768 E F0 2.768(\). It)B(sets)
69.336 603 Q F1(*listlen)4.596 E F0 2.096(to 1.)4.596 F 2.096
(and returns)7.096 F F1(DW_DLV_OK)4.595 E F0 2.095
(if decoding is successful.)4.595 F 2.095(Some sources of bytes of)7.095
F -.15(ex)69.336 615 S 5.423(pressions are dw).15 F 5.424(arf e)-.1 F
5.424(xpressions in frame operations lik)-.15 F(e)-.1 E F1
(DW_CFA_def_cfa_expression)7.924 E F0(,)A F1(DW_CFA_expression)69.336
627 Q F0 2.5(,a)C(nd)-2.5 E F1(DW_CFA_val_expression)5 E F0(.)A(An)
69.336 645 Q 2.793(ya)-.15 G .293(ddress_size data in the location e)
-2.793 F .293(xpression is assumed to be the same size as the def)-.15 F
.292(ault address_size)-.1 F
(for the object being read \(normally 4 or 8\).)69.336 657 Q(It returns)
69.336 675 Q F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E .566
(Storage allocated by a successful call of)69.336 693 R F1
(dwarf_loclist_from_expr\(\))3.066 E F0 .567(should be deallocated when)
3.067 F 1.646(no longer of interest \(see)69.336 705 R F1
(dwarf_dealloc\(\))4.146 E F0 4.146(\). The)B 1.646(block of)4.146 F F1
(Dwarf_Loc)4.146 E F0 1.645(structs pointed to by the)4.146 F F1(ld_s)
69.336 717 Q F0 -.2(fi)6.826 G 4.326(eld of each).2 F F1(Dwarf_Locdesc)
6.826 E F0 4.327
(structure should be deallocated with the allocation type)6.827 F F1
(DW_DLA_LOC_BLOCK)69.336 729 Q F0 5.718(.T)C .718(his should be follo)
-5.718 F .718(wed by deallocation of the)-.25 F F1(llbuf)3.218 E F0 .717
(using the allocation type)3.217 F F1(DW_DLA_LOCDESC)69.336 741 Q F0(.)A
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G
2.5(5-)-2.5 G 0 Cg EP
%%Page: 46 46
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(6-)-2.5 G/F1 10
/Courier@0 SF
(void exampleb\(Dwarf_Debug dbg,Dwarf_Ptr data, Dwarf_Unsigned len\))
89.336 96 Q({)89.336 108 Q(Dwarf_Signed lcount = 0;)101.336 120 Q
(Dwarf_Locdesc *llbuf = 0;)101.336 132 Q(Dwarf_Error error = 0;)101.336
144 Q(int lres = 0;)101.336 156 Q(lres = dwarf_loclist_from_expr\(dbg,d\
ata,len, &llbuf,&lcount, &error\);)101.336 180 Q
(if \(lres == DW_DLV_OK\) {)101.336 192 Q(/* lcount is always 1 */)
113.336 204 Q(/* Use llbuf)113.336 216 Q(here.*/)12 E
(dwarf_dealloc\(dbg, llbuf->ld_s, DW_DLA_LOC_BLOCK\);)113.336 240 Q
(dwarf_dealloc\(dbg, llbuf, DW_DLA_LOCDESC\);)113.336 252 Q(})101.336
264 Q(})89.336 276 Q/F2 11/Times-Bold@0 SF 2.75(6.6.21 d)69.336 297 R
(warf_loclist_fr)-.165 E(om_expr_b\(\))-.198 E F1
(int dwarf_loclist_from_expr_a\()69.336 315 Q(Dwarf_Ptr bytes_in,)
117.336 327 Q(Dwarf_Unsigned bytes_len,)117.336 339 Q
(Dwarf_Half addr_size,)117.336 351 Q(Dwarf_Half offset_size,)117.336 363
Q(Dwarf_Half version_stamp,)117.336 375 Q(Dwarf_Locdesc **llbuf,)117.336
387 Q 6(Dwarf_Signed *listlen,)117.336 399 R(Dwarf_Error *error\))
117.336 411 Q F0 31.946(The function)69.336 429 R F1
(dwarf_loclist_from_expr_b\(\))34.446 E F0 31.946(is identical to)34.446
F F1(dwarf_loclist_from_expr_a\(\))69.336 441 Q F0 .763(in e)3.263 F
-.15(ve)-.25 G .763(ry w).15 F .763(ay e)-.1 F .763
(xcept that the caller passes an additional ar)-.15 F(gument)-.18 E F1
(version_stamp)69.336 453 Q F0 2.25(containing the v)4.75 F 2.251
(ersion stamp \(2 for D)-.15 F -1.2(WA)-.3 G 2.251
(RF2, etc\) of the CU using this location)1.2 F -.15(ex)69.336 465 S
1.459(pression and an additional ar).15 F 1.459(gument of the of)-.18 F
1.459(fset size of the CU using this location e)-.25 F 3.958
(xpression. The)-.15 F -.3(DW)69.336 477 S 2.609
(_OP_GNU_implicit_pointer operation requires this v).3 F 2.609
(ersion and of)-.15 F 2.609(fset information to be correctly)-.25 F
(processed.)69.336 489 Q(The)69.336 507 Q F1(addr_size)4.716 E F0(ar)
4.716 E 2.216(gument \(from 27April2009\) is needed to correctly interp\
ret frame information as)-.18 F(dif)69.336 519 Q
(ferent compilation units can ha)-.25 E .3 -.15(ve d)-.2 H(if).15 E
(ferent address sizes.)-.25 E -.3(DW)5 G
(ARF4 adds address_size to the CIE header)-.9 E(.)-.55 E F2 2.75
(6.6.22 d)69.336 552 R(warf_loclist_fr)-.165 E(om_expr_a\(\))-.198 E F1
(int dwarf_loclist_from_expr_a\()69.336 570 Q(Dwarf_Ptr bytes_in,)
117.336 582 Q(Dwarf_Unsigned bytes_len,)117.336 594 Q
(Dwarf_Half addr_size,)117.336 606 Q(Dwarf_Locdesc **llbuf,)117.336 618
Q 6(Dwarf_Signed *listlen,)117.336 630 R(Dwarf_Error *error\))117.336
642 Q F0(Use)69.336 660 Q F1(dwarf_loclist_from_expr_b\(\))2.5 E F0 2.5
(instead. This)2.5 F(function is obsolete.)2.5 E .788(The function)
69.336 678 R F1(dwarf_loclist_from_expr_a\(\))3.288 E F0 .788
(is identical to)3.288 F F1(dwarf_loclist_from_expr\(\))5.789 E F0 .242
(in e)69.336 690 R -.15(ve)-.25 G .242(ry w).15 F .242(ay e)-.1 F .242
(xcept that the caller passes the additional ar)-.15 F(gument)-.18 E F1
(addr_size)2.742 E F0 .242(containing the address size)2.742 F
(\(normally 4 or 8\) applying this location e)69.336 702 Q(xpression.)
-.15 E(The)69.336 720 Q F1(addr_size)4.345 E F0(ar)4.345 E 1.846(gument\
 \(added 27April2009\) is needed to correctly interpret frame informati\
on as)-.18 F(dif)69.336 732 Q(ferent compilation units can ha)-.25 E .3
-.15(ve d)-.2 H(if).15 E(ferent address sizes.)-.25 E -.3(DW)5 G
(ARF4 adds address_size to the CIE header)-.9 E(.)-.55 E(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(6-)-2.5 G 0 Cg
EP
%%Page: 47 47
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(7-)-2.5 G/F1 12
/Times-Bold@0 SF 3(6.7 Line)69.336 100 R(Number Operations)3 E F0 1(The\
se functions are concerned with accessing line number entries, mapping \
deb)69.336 118 R 1(ugging information entry)-.2 F .058
(objects to their corresponding source lines, and pro)69.336 130 R .058
(viding a mechanism for obtaining information about line)-.15 F .453
(number entries.)69.336 142 R .453(Although, the interf)5.453 F .452
(ace talks of "lines" what is really meant is "statements".)-.1 F .452
(In case there)5.452 F .297(is more than one statement on the same line\
, there will be at least one descriptor per statement, all with the)
69.336 154 R .723(same line number)69.336 166 R 5.723(.I)-.55 G 3.223
(fc)-5.723 G .722(olumn number is also being represented the)-3.223 F
3.222(yw)-.15 G .722(ill ha)-3.222 F 1.022 -.15(ve t)-.2 H .722
(he column numbers of the).15 F
(start of the statements also represented.)69.336 178 Q 1.122
(There can also be more than one Dw)69.336 196 R 1.123
(arf_Line per statement.)-.1 F -.15(Fo)6.123 G 3.623(re).15 G 1.123
(xample, if a f)-3.773 F 1.123(ile is preprocessed by a)-.2 F 2.061
(language translator)69.336 208 R 4.561(,t)-.4 G 2.061
(his could result in translator output sho)-4.561 F 2.06
(wing 2 or more sets of line numbers per)-.25 F
(translated line of output.)69.336 220 Q .292
(As of October 2015 there are tw)69.336 262 R 2.792(os)-.1 G .293
(ets of o)-2.792 F -.15(ve)-.15 G .293
(rall access and release functions.).15 F .293
(The older set of functions is)5.293 F/F2 10/Courier@0 SF
(dwarf_srclines\(\))69.336 274 Q F0(with)5.347 E F2
(dwarf_srclines_dealloc\(\))5.347 E F0 7.847(.T)C 2.847
(his set does not handle line table)-7.847 F(headers with no lines.)
69.336 286 Q 6.371(An)69.336 304 S -.25(ew)-6.371 G 3.871(er set is).25
F F2(dwarf_srclines_b\(\))6.371 E F0(with)6.372 E F2
(dwarf_srclines_from_linecontext\(\))6.372 E F0(and)6.372 E F2
(dwarf_srclines_dealloc_b\(\))69.336 316 Q F0 8.043(.T)C 3.043
(hese functions pro)-8.043 F 3.042(vide for handling both D)-.15 F -1.2
(WA)-.3 G 3.042(RF2 through)1.2 F -.3(DW)69.336 328 S 2.006
(ARF5 details and gi)-.9 F 2.306 -.15(ve a)-.25 H 2.006
(ccess to line header information e).15 F -.15(ve)-.25 G 4.507(ni).15 G
4.507(ft)-4.507 G 2.007(here are no lines in a particular)-4.507 F
(compilation unit')69.336 340 Q 2.5(sl)-.55 G(ine table.)-2.5 E/F3 11
/Times-Bold@0 SF 2.75(6.7.1 Get)69.336 403 R 2.75(AS)2.75 G
(et of Lines \(including sk)-2.75 E(eleton line tables\))-.11 E F0 .13
(This set of functions w)69.336 421 R .13(orks on an)-.1 F 2.63(yD)-.15
G -1.2(WA)-2.93 G .13(RF v)1.2 F 2.63(ersion. D)-.15 F -1.2(WA)-.3 G .13
(RF2,3,4,5 and the D)1.2 F -1.2(WA)-.3 G .13(RF4 based e)1.2 F
(xperimental)-.15 E(tw)69.336 433 Q(o-le)-.1 E -.15(ve)-.25 G 3.523(ll)
.15 G 1.023(ine tables are all supported.)-3.523 F 1.023(What w)6.023 F
1.023(as once done by dw)-.1 F 1.023(arf_srclines\(\) alone is no)-.1 F
3.524(wd)-.25 G 1.024(one with)-3.524 F(tw)69.336 445 Q 2.5(oc)-.1 G
(alls as described here.)-2.5 E .478(The interf)69.336 463 R .477
(aces support reading GNU tw)-.1 F(o-le)-.1 E -.15(ve)-.25 G 2.977(ll)
.15 G .477(ine tables.)-2.977 F .477
(The format of such tables is a topic be)5.477 F .477(yond the)-.15 F
(scope of this document.)69.336 475 Q F3 2.75(6.7.2 d)69.336 514 R
(warf_sr)-.165 E(clines_b\(\))-.198 E F0(This is the)69.336 532 Q F2
(int dwarf_srclines_b\()69.336 550 Q(Dwarf_Die die,)117.336 562 Q
(Dwarf_Unsigned *version_out,)117.336 574 Q 24
(Dwarf_Bool *is_single_table,)117.336 586 R
(Dwarf_Line_Context *context_out,)117.336 598 Q(Dwarf_Error *error\))
117.336 610 Q(dwarf_srclines_b\(\))69.336 628 Q F0(tak)4.028 E 1.528
(es a single ar)-.1 F 1.529
(gument as input, a pointer to a compilation-unit \(CU\))-.18 F(DIE.)
6.529 E .108(The other ar)69.336 640 R .107
(guments are used to return v)-.18 F .107(alues to the caller)-.25 F
5.107(.O)-.55 G 2.607(ns)-5.107 G(uccess)-2.607 E F2(DW_DLV_OK)2.607 E
F0 .107(is returned and v)2.607 F(alues)-.25 E .526
(are returned through the pointers.)69.336 652 R .527
(If there is no line table)5.527 F F2(DW_DLV_NO_ENTRY)3.027 E F0 .527
(is returned and no v)3.027 F(alues)-.25 E 1.844
(are returned though the pointers.)69.336 664 R(If)6.844 E F2
(DW_DLV_ERROR)4.344 E F0 1.843(is returned the in)4.344 F -.2(vo)-.4 G
(lv).2 E 1.843(ed is returned through the)-.15 F F2(error)69.336 676 Q
F0(pointer)2.5 E(.)-.55 E(The v)69.336 694 Q
(alues returned on success are:)-.25 E F2(*version_out\(\))69.336 712 Q
F0 .313(is set to the v)2.813 F .314
(ersion number from the line table header for this CU.)-.15 F .314
(The e)5.314 F(xperimental)-.15 E(tw)69.336 724 Q(o-le)-.1 E -.15(ve)
-.25 G 2.5(ll).15 G(ine table v)-2.5 E(alue is 0xf006.)-.25 E
(Standard numbers are 2,3,4 and 5.)5 E F2(*is_single_table\(\))69.336
742 Q F0 1.202
(is set to non-zero if the line table is an ordinary single line table.)
3.702 F 1.201(If the line)6.201 F(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(7-)-2.5 G 0 Cg EP
%%Page: 48 48
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(8-)-2.5 G .662
(table is an)69.336 96 R .663
(ything else \(either a line table header with no lines or an e)-.15 F
.663(xperimental tw)-.15 F(o-le)-.1 E -.15(ve)-.25 G 3.163(ll).15 G .663
(ine table\) it is)-3.163 F(set to zero.)69.336 108 Q/F1 10/Courier@0 SF
(*context_out\(\))69.336 126 Q F0 1.431
(is set to an opaque pointer to a)3.931 F F1(Dwarf_Line_Context)3.931 E
F0 1.43(record which in turn is)3.931 F
(used to get other data from this line table.)69.336 138 Q(See belo)5 E
-.65(w.)-.25 G(See)69.336 156 Q F1(*dwarf_srclines_dealloc_b\(\))2.5 E
F0(for e)2.5 E(xamples sho)-.15 E(wing correct use.)-.25 E/F2 11
/Times-Bold@0 SF 2.75(6.7.3 d)69.336 213 R(warf_sr)-.165 E(clines_fr)
-.198 E(om_linecontext\(\))-.198 E F1
(int dwarf_srclines_from_linecontext\()69.336 231 Q
(Dwarf_Line_Context line_context,)117.336 243 Q(Dwarf_Line ** linebuf,)
117.336 255 Q(Dwarf_Signed *linecount,)117.336 267 Q
(Dwarf_Error *error\))117.336 279 Q
(*dwarf_srclines_from_linecontext\(\))69.336 297 Q F0(gi)4.288 E -.15
(ve)-.25 G 4.288(sa).15 G 1.788(ccess to the line tables.)-4.288 F 1.788
(On success it returns)6.788 F F1(DW_DLV_OK)69.336 309 Q F0
(and passes back line tables through the pointers.)2.5 E(Though)69.336
327 Q F1(DW_DLV_OK)2.5 E F0
(will not be returned callers should assume it is possible.)2.5 E
(On error)69.336 345 Q F1(DW_DLV_ERROR)2.5 E F0
(is returned and the error code set through the)2.5 E F1(error)2.5 E F0
(pointer)2.5 E(.)-.55 E(On success:)69.336 363 Q F1(*linebuf)69.336 381
Q F0(is set to an array of Dw)2.5 E(arf_Line pointers.)-.1 E F1
(*linecount)69.336 399 Q F0
(is set to the number of pointers in the array)2.5 E(.)-.65 E F2 2.75
(6.7.4 d)69.336 438 R(warf_sr)-.165 E(clines_tw)-.198 E(o_le)-.11 E -.11
(ve)-.165 G(lfr).11 E(om_linecontext\(\))-.198 E F1
(int dwarf_srclines_from_linecontext\()69.336 456 Q
(Dwarf_Line_Context line_context,)117.336 468 Q(Dwarf_Line ** linebuf,)
117.336 480 Q(Dwarf_Signed *linecount,)117.336 492 Q
(Dwarf_Line ** linebuf_actuals,)117.336 504 Q
(Dwarf_Signed *linecount_actuals,)117.336 516 Q(Dwarf_Error *error\))
117.336 528 Q(*dwarf_srclines_two_levelfrom_linecontext\(\))69.336 546 Q
F0(gi)2.777 E -.15(ve)-.25 G 2.777(sa).15 G .276
(ccess to the line tables.)-2.777 F .276(On success)5.276 F(it returns)
69.336 558 Q F1(DW_DLV_OK)2.5 E F0
(and passes back line tables through the pointers.)2.5 E(Though)69.336
576 Q F1(DW_DLV_OK)2.5 E F0
(will not be returned callers should assume it is possible.)2.5 E
(On error)69.336 594 Q F1(DW_DLV_ERROR)2.5 E F0
(is returned and the error code set through the)2.5 E F1(error)2.5 E F0
(pointer)2.5 E(.)-.55 E(On success:)69.336 612 Q F1(*linebuf)69.336 630
Q F0(is set to an array of Dw)2.5 E(arf_Line pointers.)-.1 E F1
(*linecount)69.336 648 Q F0
(is set to the number of pointers in the array)2.5 E(.)-.65 E 1.973
(If one is not intending that the e)69.336 666 R 1.973(xperimental tw)
-.15 F(o-le)-.1 E -.15(ve)-.25 G 4.474(ll).15 G 1.974
(ine tables are of interest then pass NULL for)-4.474 F F1
(*linebuf_actuals)69.336 678 Q F0(and)4.414 E F1(*linecount_actuals)
4.414 E F0 6.914(.T)C 1.914
(he NULL pointers notify the library that the)-6.914 F
(second table is not to be passed back.)69.336 690 Q 2.081
(If a line table is actually a tw)69.336 708 R(o-le)-.1 E -.15(ve)-.25 G
4.581(lt).15 G(ables)-4.581 E F1(*linebuf)4.582 E F0 2.082
(is set to point to an array of Logicals lines.)4.582 F F1(*linecount)
69.336 720 Q F0 .038(is set to the number of Logicals.)2.538 F F1
(*linebuf_actals)5.038 E F0 .037(is set to point to an array of Actuals)
2.538 F(lines.)69.336 732 Q F1(*linecount_actuals)5 E F0
(is set to the number of Actuals.)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(8-)-2.5 G 0 Cg EP
%%Page: 49 49
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-4)274.506 48 S 2.5(9-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.7.5 d)69.336 99 R(warf_sr)-.165 E
(clines_dealloc_b\(\))-.198 E/F2 10/Courier@0 SF
(void dwarf_srclines_dealloc_b\()69.336 117 Q
(Dwarf_Line_Context line_context,)117.336 129 Q(Dwarf_Error *error\))
117.336 141 Q F0 .332
(This does a complete deallocation of the memory of the)69.336 159 R F2
(Dwarf_Line_Context)2.833 E F0 .333(and the)2.833 F F2(Dwarf_Line)2.833
E F0 2.405(array \(or arrays\) that came from the)69.336 171 R F2
(Dwarf_Line_Context)4.905 E F0 7.405(.O)C 4.905(nr)-7.405 G 2.405
(eturn you should set an)-4.905 F 4.905(yl)-.15 G(ocal)-4.905 E 1.973
(pointers to these b)69.336 183 R(uf)-.2 E 1.973
(fers to NULL as a reminder that an)-.25 F 4.473(yu)-.15 G 1.973
(se of the local pointers w)-4.473 F 1.974(ould be to stale)-.1 F
(memory)69.336 195 Q(.)-.65 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-4)120.71 G 2.5(9-)-2.5 G 0 Cg EP
%%Page: 50 50
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(0-)-2.5 G/F1 10
/Courier@0 SF(void examplec\(Dwarf_Die cu_die\))89.336 96 Q({)89.336 108
Q(/* EXAMPLE: DWARF5 style access.)101.336 120 Q(*/)12 E 6
(Dwarf_Line *linebuf)101.336 132 R 6(=0)6 G(;)-6 E
(Dwarf_Signed linecount = 0;)101.336 144 Q 6
(Dwarf_Line *linebuf_actuals)101.336 156 R 6(=0)6 G(;)-6 E
(Dwarf_Signed linecount_actuals = 0;)101.336 168 Q
(Dwarf_Line_Context line_context = 0;)101.336 180 Q
(Dwarf_Signed linecount_total = 0;)101.336 192 Q
(Dwarf_Unsigned table_count = 0;)101.336 204 Q
(Dwarf_Unsigned lineversion = 0;)101.336 216 Q(Dwarf_Error err = 0;)
101.336 228 Q(int sres = 0;)101.336 240 Q(/* ... */)101.336 252 Q 6
(/* we)101.336 264 R
(use 'return' here to signify we can do nothing more)6 E
(at this point in the code. */)125.336 276 Q
(sres = dwarf_srclines_b\(cu_die,&lineversion,)101.336 288 Q
(&table_count,&line_context,&err\);)113.336 300 Q
(if \(sres != DW_DLV_OK\) {)101.336 312 Q 6(/* Handle)113.336 324 R
(the DW_DLV_NO_ENTRY)6 E(or DW_DLV_ERROR)12 E
(No memory was allocated so there nothing)137.336 336 Q(to dealloc. */)
137.336 348 Q(return;)113.336 360 Q(})101.336 372 Q
(if \(table_count == 0\) {)101.336 384 Q 6(/* A)113.336 396 R
(line table with no actual lines.)6 E(But with a line table header. */)
137.336 408 Q(/*...do something, see dwarf_srclines_files_count\(\))
113.336 420 Q(etc below. */)131.336 432 Q
(dwarf_srclines_dealloc_b\(line_context\);)113.336 456 Q 6(/* All)
113.336 468 R(the memory is released, the line_context)6 E
(and linebuf zeroed now)137.336 480 Q(as a reminder they are stale. */)
137.336 492 Q(linebuf = 0;)113.336 504 Q(line_context = 0;)113.336 516 Q
6(}e)101.336 528 S(lse if \(table_count == 1\) {)-6 E
(Dwarf_Signed i = 0;)113.336 540 Q 6(/* Standard)113.336 552 R
(dwarf 2,3,4, or 5 line table */)6 E 6(/* Do)113.336 564 R
(something. */)6 E 6(/* For)113.336 576 R
(this case where we have a line table we will likely)6 E
(wish to get the line details: */)137.336 588 Q
(sres = dwarf_srclines_from_linecontext\(line_context,)113.336 600 Q
(&linebuf,&linecount,)137.336 612 Q(&err\);)137.336 624 Q
(if \(sres != DW_DLV_OK\) {)113.336 636 Q
(/* Error. Clean up the context information. */)137.336 648 Q
(dwarf_srclines_dealloc_b\(line_context\);)137.336 660 Q(return;)137.336
672 Q(})113.336 684 Q(/* The lines are normal line table lines. */)
113.336 696 Q(for \(i = 0; i < linecount; ++i\) {)113.336 708 Q
(/* use linebuf[i] */)185.336 720 Q(})113.336 732 Q F0(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5(0-)-2.5 G 0 Cg
EP
%%Page: 51 51
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(1-)-2.5 G/F1 10
/Courier@0 SF(dwarf_srclines_dealloc_b\(line_context\);)113.336 96 Q 6
(/* All)113.336 108 R(the memory is released, the line_context)6 E
(and linebuf zeroed now as a reminder they are stale */)137.336 120 Q
(linebuf = 0;)113.336 132 Q(line_context = 0;)113.336 144 Q
(linecount = 0;)113.336 156 Q 6(}e)101.336 168 S(lse {)-6 E
(/* EXPERIMENTAL. NOT IN STANDARD DWARF */)113.336 180 Q
(Dwarf_Signed i = 0;)113.336 192 Q(/* ASSERT: table_count == 2,)113.336
204 Q(Experimental two-level line table. Version 0xf006)131.336 216 Q
(We do not define the meaning of this non-standard)131.336 228 Q
(set of tables here. */)131.336 240 Q 6(/* For)113.336 264 R
('something C' \(two-level line tables\))6 E
(one codes something like this)137.336 276 Q
(Note that we do not define the meaning or use of two-level line)137.336
288 Q(tables as these are experimental, not standard DWARF. */)137.336
300 Q(sres = dwarf_srclines_two_level_from_linecontext\(line_context,)
113.336 312 Q(&linebuf,&linecount,)161.336 324 Q
(&linebuf_actuals,&linecount_actuals,)161.336 336 Q(&err\);)161.336 348
Q(if \(sres == DW_DLV_OK\) {)113.336 360 Q
(for \(i = 0; i < linecount; ++i\) {)137.336 372 Q
(/* use linebuf[i], these are the 'logicals' entries. */)161.336 384 Q
(})137.336 396 Q(for \(i = 0; i < linecount_actuals; ++i\) {)137.336 408
Q(/* use linebuf_actuals[i], these are the actuals entries */)209.336
420 Q(})137.336 432 Q(dwarf_srclines_dealloc_b\(line_context\);)137.336
444 Q(line_context = 0;)137.336 456 Q(linebuf = 0;)137.336 468 Q
(linecount = 0;)137.336 480 Q(linebuf_actuals = 0;)137.336 492 Q
(linecount_actuals = 0;)137.336 504 Q 6(}e)113.336 516 S
(lse if \(sres == DW_DLV_NO_ENTRY\) {)-6 E
(/* This should be impossible, but do something.)137.336 528 Q(*/)18 E
(/* Then Free the line_context */)137.336 540 Q
(dwarf_srclines_dealloc_b\(line_context\);)137.336 552 Q
(line_context = 0;)137.336 564 Q(linebuf = 0;)137.336 576 Q
(linecount = 0;)137.336 588 Q(linebuf_actuals = 0;)137.336 600 Q
(linecount_actuals = 0;)137.336 612 Q 6(}e)113.336 624 S(lse {)-6 E
(/* ERROR, show the error or something.)137.336 636 Q
(Free the line_context. */)155.336 648 Q
(dwarf_srclines_dealloc_b\(line_context\);)137.336 660 Q
(line_context = 0;)137.336 672 Q(linebuf = 0;)137.336 684 Q
(linecount = 0;)137.336 696 Q(linebuf_actuals = 0;)137.336 708 Q
(linecount_actuals = 0;)137.336 720 Q(})113.336 732 Q F0(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5(1-)-2.5 G 0 Cg
EP
%%Page: 52 52
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(2-)-2.5 G/F1 10
/Courier@0 SF(})101.336 96 Q(})89.336 108 Q/F2 12/Times-Bold@0 SF 3
(6.8 Line)69.336 148 R(Context Details \(D)3 E -1.44(WA)-.48 G
(RF5 style\))1.44 E F0(Ne)69.336 166 Q 13.303(wi)-.25 G 13.303(nO)
-13.303 G 10.803(ctober 2015.)-13.303 F 10.803(When a)15.803 F F1
(Dwarf_Line_Context)16.803 E F0 10.803(has been returned by)13.303 F F1
(dwarf_srclines_b\(\))69.336 178 Q F0(that line conte)2.5 E(xt data')
-.15 E 2.5(sd)-.55 G(etails can be retrie)-2.5 E -.15(ve)-.25 G 2.5(dw)
.15 G(ith the follo)-2.5 E(wing set of calls.)-.25 E/F3 11/Times-Bold@0
SF 2.75(6.8.1 d)69.336 199 R(warf_sr)-.165 E(clines_table_offset\(\))
-.198 E F1
(int dwarf_srclines_table_offset\(Dwarf_Line_Context line_context,)
69.336 217 Q(Dwarf_Unsigned * offset,)93.336 229 Q 18(Dwarf_Error *)
93.336 241 R(error\);)6 E F0 .63
(On success, this function returns the of)69.336 259 R .63
(fset \(in the object f)-.25 F .631
(ile line section\) of the actual line data \(i.e. after)-.2 F 1.678
(the line header for this compilation unit\) through the)69.336 271 R F1
(offset)4.177 E F0(pointer)4.177 E 6.677(.T)-.55 G 1.677(he of)-6.677 F
1.677(fset is probably only of)-.25 F
(interest when printing detailed information about a line table header)
69.336 283 Q(.)-.55 E 3.975(In case of error)69.336 301 R(,)-.4 E F1
(DW_DLV_ERROR)6.475 E F0 3.975
(is returned and the error is set through the)6.475 F F1(error)6.476 E
F0(pointer)6.476 E(.)-.55 E F1(DW_DLV_NO_ENTRY)69.336 313 Q F0
(will not be returned.)2.5 E F3 2.75(6.8.2 d)69.336 346 R(warf_sr)-.165
E(clines_v)-.198 E(ersion\(\))-.11 E F1
(int dwarf_srclines_version\(Dwarf_Line_Context line_context,)69.336 364
Q(Dwarf_Unsigned * version,)93.336 376 Q 18(Dwarf_Error *)93.336 388 R
(error\);)6 E F0 .636(On success)69.336 406 R F1(DW_DLV_OK)3.136 E F0
.636(is returned and the line table v)3.136 F .636
(ersion number is returned through)-.15 F(the)5.636 E F1(version)3.136 E
F0(pointer)69.336 418 Q(.)-.55 E 3.975(In case of error)69.336 436 R(,)
-.4 E F1(DW_DLV_ERROR)6.475 E F0 3.975
(is returned and the error is set through the)6.475 F F1(error)6.476 E
F0(pointer)6.476 E(.)-.55 E F1(DW_DLV_NO_ENTRY)69.336 448 Q F0
(will not be returned.)2.5 E F3 2.75(6.8.3 d)69.336 493 R(warf_sr)-.165
E(clines_comp_dir\(\))-.198 E F1
(int dwarf_srclines_comp_dir\(Dwarf_Line_Context line_context,)69.336
511 Q(const char ** compilation_directory,)93.336 523 Q
(Dwarf_Error * error\);)93.336 535 Q F0 5.487(On success this returns a\
 pointer to the compilation directory string for this line table in)
69.336 553 R F1(*compilation_directory)69.336 565 Q F0 5(.T)C
(hat compilation string may be NULL or the empty string.)-5 E 3.975
(In case of error)69.336 583 R(,)-.4 E F1(DW_DLV_ERROR)6.475 E F0 3.975
(is returned and the error is set through the)6.475 F F1(error)6.476 E
F0(pointer)6.476 E(.)-.55 E F1(DW_DLV_NO_ENTRY)69.336 595 Q F0
(will not be returned.)2.5 E F3 2.75(6.8.4 d)69.336 628 R(warf_sr)-.165
E(clines_f)-.198 E(iles_count\(\))-.275 E F1
(int dwarf_srclines_files_count\(Dwarf_Line_Context line_context,)69.336
646 Q 6(Dwarf_Signed * count,)93.336 658 R 12(Dwarf_Error *)93.336 670 R
(error\);)12 E F0(On success, the number of f)69.336 688 Q
(iles in the f)-.2 E
(iles list of a line table header will be returned through)-.2 E F1
(count)2.5 E F0(.)A 3.976(In case of error)69.336 706 R(,)-.4 E F1
(DW_DLV_ERROR)6.476 E F0 3.975
(is returned and the error is set through the)6.476 F F1(error)6.475 E
F0(pointer)6.475 E(.)-.55 E F1(DW_DLV_NO_ENTRY)69.336 718 Q F0
(will not be returned.)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5(2-)-2.5 G 0 Cg EP
%%Page: 53 53
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(3-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.8.5 d)69.336 99 R(warf_sr)-.165 E(clines_f)-.198
E(iles_data\(\))-.275 E/F2 10/Courier@0 SF
(int dwarf_srclines_files_data\(Dwarf_Line_Context line_context,)69.336
117 Q 24(Dwarf_Signed index,)93.336 129 R(const char **)93.336 141 Q
(name,)24 E(Dwarf_Unsigned * directory_index,)93.336 153 Q
(Dwarf_Unsigned * last_mod_time,)93.336 165 Q
(Dwarf_Unsigned * file_length,)93.336 177 Q 18(Dwarf_Error *)93.336 189
R(error\);)6 E F0 1.376(On success, data about a single f)69.336 207 R
1.377(ile in the f)-.2 F 1.377
(iles list will be returned through the pointers.)-.2 F 1.377(See D)
6.377 F -1.2(WA)-.3 G(RF)1.2 E 1.865
(documentation for the meaning of these f)69.336 219 R(ields.)-.2 E F2
(count)6.865 E F0 6.865(.V)C(alid)-7.975 E F2(index)4.365 E F0 6.865(.v)
C 1.865(alues are 1 through)-7.115 F F2(count)4.365 E F0(,)A
(reflecting the w)69.336 231 Q(ay the table is def)-.1 E(ined by D)-.2 E
-1.2(WA)-.3 G(RF)1.2 E(.)-.8 E(This returns the ra)69.336 249 Q 2.5(wf)
-.15 G(iles data from the line table header)-2.7 E(.)-.55 E 3.975
(In case of error)69.336 267 R(,)-.4 E F2(DW_DLV_ERROR)6.475 E F0 3.975
(is returned and the error is set through the)6.475 F F2(error)6.476 E
F0(pointer)6.476 E(.)-.55 E F2(DW_DLV_NO_ENTRY)69.336 279 Q F0
(will not be returned.)2.5 E F1 2.75(6.8.6 d)69.336 300 R(warf_sr)-.165
E(clines_include_dir_count\(\))-.198 E F2
(int dwarf_srclines_include_dir_count\(Dwarf_Line_Context line_context,)
69.336 318 Q(Dwarf_Signed * count,)93.336 330 Q 6(Dwarf_Error *)93.336
342 R(error\);)6 E F0(On success, the number of f)69.336 360 Q(iles in \
the includes list of a line table header will be returned through)-.2 E
F2(count)2.5 E F0(.)A -1.11(Va)69.336 378 S(lid)1.11 E F2(index)2.5 E F0
5(.v)C(alues are 1 through)-5.25 E F2(count)2.5 E F0 2.5(,r)C
(eflecting the w)-2.5 E(ay the table is def)-.1 E(ined by D)-.2 E -1.2
(WA)-.3 G(RF)1.2 E(.)-.8 E 3.976(In case of error)69.336 396 R(,)-.4 E
F2(DW_DLV_ERROR)6.476 E F0 3.975
(is returned and the error is set through the)6.476 F F2(error)6.475 E
F0(pointer)6.475 E(.)-.55 E F2(DW_DLV_NO_ENTRY)69.336 408 Q F0
(will not be returned.)2.5 E F1 2.75(6.8.7 d)69.336 429 R(warf_sr)-.165
E(clines_include_dir_data\(\))-.198 E F2
(int dwarf_srclines_include_dir_data\(Dwarf_Line_Context line_context,)
69.336 447 Q 18(Dwarf_Signed index,)93.336 459 R(const char **)93.336
471 Q(name,)18 E 6(Dwarf_Error * error\);)93.336 483 R F0 1.664
(On success, data about a single f)69.336 501 R 1.664
(ile in the include f)-.2 F 1.664
(iles list will be returned through the pointers.)-.2 F(See)6.664 E -.3
(DW)69.336 513 S(ARF documentation for the meaning of these f)-.9 E
(ields.)-.2 E -1.11(Va)69.336 531 S(lid)1.11 E F2(index)2.5 E F0 5(.v)C
(alues are 1 through)-5.25 E F2(count)2.5 E F0 2.5(,r)C(eflecting the w)
-2.5 E(ay the table is def)-.1 E(ined by D)-.2 E -1.2(WA)-.3 G(RF)1.2 E
(.)-.8 E 3.976(In case of error)69.336 549 R(,)-.4 E F2(DW_DLV_ERROR)
6.476 E F0 3.975(is returned and the error is set through the)6.476 F F2
(error)6.475 E F0(pointer)6.475 E(.)-.55 E F2(DW_DLV_NO_ENTRY)69.336 561
Q F0(will not be returned.)2.5 E F1 2.75(6.8.8 d)69.336 582 R(warf_sr)
-.165 E(clines_subpr)-.198 E(og_count\(\))-.198 E F2
(int dwarf_srclines_subprog_count\(Dwarf_Line_Context line_context,)
75.336 600 Q(Dwarf_Signed * count,)93.336 612 Q 6(Dwarf_Error *)93.336
624 R(error\);)6 E F0(This is only useful with e)2.5 E(xperimental tw)
-.15 E(o-le)-.1 E -.15(ve)-.25 G 2.5(ll).15 G(ine tables.)-2.5 E F1 2.75
(6.8.9 d)69.336 645 R(warf_sr)-.165 E(clines_subpr)-.198 E(og_data\(\))
-.198 E F2
(int dwarf_srclines_subprog_data\(Dwarf_Line_Context line_context,)
75.336 663 Q 24(Dwarf_Signed index,)93.336 675 R(const char **)93.336
687 Q(name,)24 E(Dwarf_Unsigned * decl_file,)93.336 699 Q
(Dwarf_Unsigned * decl_line,)93.336 711 Q 12(Dwarf_Error *)93.336 723 R
(error\);)12 E F0(This is only useful with e)2.5 E(xperimental tw)-.15 E
(o-le)-.1 E -.15(ve)-.25 G 2.5(ll).15 G(ine tables.)-2.5 E(re)69.336 768
Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5(3-)-2.5 G 0
Cg EP
%%Page: 54 54
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(4-)-2.5 G/F1 12
/Times-Bold@0 SF 3(6.9 Get)69.336 100 R 3(AS)3 G(et of Lines \(D)-3 E
-1.44(WA)-.48 G(RF2,3,4 style\))1.44 E F0 4.28
(The function returns information about e)69.336 118 R -.15(ve)-.25 G
4.28(ry source line for a particular compilation-unit.).15 F(The)9.28 E
1.017(compilation-unit is specif)69.336 130 R 1.017
(ied by the corresponding die.)-.2 F 1.017
(It does not support line tables with no lines v)6.017 F(ery)-.15 E
(well nor does it support e)69.336 142 Q(xperimental tw)-.15 E(o-le)-.1
E -.15(ve)-.25 G 2.5(ll).15 G(inetables.)-2.5 E/F2 11/Times-Bold@0 SF
2.75(6.9.1 d)69.336 163 R(warf_sr)-.165 E(clines\(\))-.198 E/F3 10
/Courier@0 SF(int dwarf_srclines\()69.336 181 Q(Dwarf_Die die,)117.336
193 Q(Dwarf_Line **linebuf,)117.336 205 Q(Dwarf_Signed *linecount,)
117.336 217 Q(Dwarf_Error *error\))117.336 229 Q F0 1.41
(This function is not useful for D)69.336 247 R -1.2(WA)-.3 G 1.41
(RF5 sk)1.2 F 1.41(eleton line tables nor for tw)-.1 F(o-le)-.1 E -.15
(ve)-.25 G 3.91(ll).15 G 1.41(ine tables.)-3.91 F 1.41(It w)6.41 F 1.41
(orks for)-.1 F -.3(DW)69.336 259 S 1.443
(ARF2,3,4,5 ordinary single line tables.)-.9 F 1.443(The function)6.443
F F3(dwarf_srclines\(\))3.943 E F0 1.442(places all line number)3.943 F
1.167
(descriptors for a single compilation unit into a single block, sets)
69.336 271 R F3(*linebuf)3.667 E F0 1.167(to point to that block, sets)
3.667 F F3(*linecount)69.336 283 Q F0
(to the number of descriptors in this block and returns)2.5 E F3
(DW_DLV_OK)2.5 E F0(.)A 1.719 -.8(To g)89.336 301 T .119
(et a more detailed vie).8 F 2.619(wo)-.25 G 2.619(ft)-2.619 G .119
(he contents of a dw)-2.619 F .118(arf line table header see)-.1 F F3
(dwarf_srclines_b\(\))2.618 E F0 14.266
(and the routines that use the Dw)89.336 313 R(arf_Line_Conte)-.1 E
14.267(xt information, such as)-.15 F F3(dwarf_srcfiles_comp_dir\(\))
89.336 325 Q F0(,)A F3(dwarf_srclines_files_count\(\))89 E F0(,)A F3
(dwarf_srclines_include_dir_count\(\))89.336 337 Q F0
(and similar functions.)2.5 E 2.091
(The compilation-unit is indicated by the gi)69.336 379 R -.15(ve)-.25 G
(n).15 E F3(die)4.591 E F0 2.092(which must be a compilation-unit die.)
4.591 F 2.092(It returns)7.092 F F3(DW_DLV_ERROR)69.336 391 Q F0 3.778
(on error)6.278 F 8.778(.O)-.55 G 6.278(ns)-8.778 G 3.777
(uccessful return, line number information should be freed using)-6.278
F F3(dwarf_srclines_dealloc\(\))69.336 403 Q F0
(when no longer of interest.)2.5 E F3
(void exampled\(Dwarf_Debug dbg,Dwarf_Die somedie\))89.336 421 Q({)
89.336 433 Q(Dwarf_Signed count = 0;)101.336 445 Q
(Dwarf_Line *linebuf = 0;)101.336 457 Q(Dwarf_Signed i = 0;)101.336 469
Q(Dwarf_Error error = 0;)101.336 481 Q(int sres = 0;)101.336 493 Q
(sres = dwarf_srclines\(somedie, &linebuf,&count, &error\);)101.336 517
Q(if \(sres == DW_DLV_OK\) {)101.336 529 Q
(for \(i = 0; i < count; ++i\) {)113.336 541 Q(/* use linebuf[i] */)
125.336 553 Q(})113.336 565 Q
(dwarf_srclines_dealloc\(dbg, linebuf, count\);)113.336 577 Q(})101.336
589 Q(})89.336 601 Q F0 1.06(An alternati)69.336 637 R 1.36 -.15(ve u)
-.25 H(sing).15 E F3(dwarf_dealloc\(\))3.56 E F0 1.06
(directly is no longer \(as of 2015\) described here. It w)3.56 F 1.06
(orks as)-.1 F .002(well as e)69.336 649 R -.15(ve)-.25 G .802 -.4(r, b)
.15 H .002(ut it has been obsolete since 2005.).2 F .002(still w)5.002 F
.001(orks, b)-.1 F .001(ut does not completely free all data allocated.)
-.2 F(The)69.336 661 Q F3(dwarf_srclines_dealloc\(\))2.5 E F0(routine w)
2.5 E(as created to f)-.1 E(ix the problem of incomplete deallocation.)
-.2 E F1 3(6.10 Get)69.336 695 R(the set of Sour)3 E(ce File Names)-.216
E F0 .318(The function returns the names of the source f)69.336 725 R
.318(iles that ha)-.2 F .618 -.15(ve c)-.2 H(ontrib).15 E .318
(uted to the compilation-unit represented)-.2 F(by the gi)69.336 737 Q
-.15(ve)-.25 G 2.5(nD).15 G 2.5(IE. Only)-2.5 F(the source f)2.5 E
(iles named in the statement program prologue are returned.)-.2 E(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5
(4-)-2.5 G 0 Cg EP
%%Page: 55 55
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(5-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.10.1 d)69.336 99 R(warf_sr)-.165 E(cf)-.198 E
(iles\(\))-.275 E F0(This w)69.336 117 Q(orks for for all line tables.)
-.1 E/F2 10/Courier@0 SF(int dwarf_srcfiles\()69.336 135 Q
(Dwarf_Die die,)117.336 147 Q(char ***srcfiles,)117.336 159 Q
(Dwarf_Signed *srccount,)117.336 171 Q(Dwarf_Error *error\))117.336 183
Q F0 .367(When it succeeds)69.336 201 R F2(dwarf_srcfiles\(\))2.866 E F0
(returns)2.866 E F2(DW_DLV_OK)2.866 E F0 .366
(and puts the number of source f)2.866 F .366(iles named)-.2 F .741
(in the statement program prologue indicated by the gi)69.336 213 R -.15
(ve)-.25 G(n).15 E F2(die)3.241 E F0(into)3.241 E F2(*srccount)3.242 E
F0 5.742(.S)C .742(ource f)-5.742 F .742(iles def)-.2 F .742(ined in)-.2
F 2.359(the statement program are ignored.)69.336 225 R 2.358(The gi)
7.358 F -.15(ve)-.25 G(n).15 E F2(die)4.858 E F0 2.358(should ha)4.858 F
2.658 -.15(ve t)-.2 H 2.358(he tag).15 F F2(DW_TAG_compile_unit)4.858 E
F0(,)A F2(DW_TAG_partial_unit)69.336 237 Q F0 3.823(,o)C(r)-3.823 E F2
(DW_TAG_type_unit)3.823 E F0 1.324(The location pointed to by)3.823 F F2
(srcfiles)3.824 E F0 1.324(is set to)3.824 F(point to a list of pointer\
s to null-terminated strings that name the source f)69.336 249 Q(iles.)
-.2 E 1.297(On a successful return from)69.336 267 R F2
(dwarf_srcfiles\(\))6.297 E F0 1.297
(each of the strings returned should be indi)3.797 F(vidually)-.25 E
.637(freed using)69.336 279 R F2(dwarf_dealloc\(\))3.137 E F0 .637
(with the allocation type)3.137 F F2(DW_DLA_STRING)3.138 E F0 .638
(when no longer of interest.)3.138 F 3.53(This should be follo)69.336
291 R 3.529(wed by free-ing the list using)-.25 F F2(dwarf_dealloc\(\))
6.029 E F0 3.529(with the allocation type)6.029 F F2(DW_DLA_LIST)69.336
303 Q F0 7.049(.I)C 4.549(tr)-7.049 G(eturns)-4.549 E F2(DW_DLV_ERROR)
4.549 E F0 2.049(on error)4.549 F 7.049(.I)-.55 G 4.549(tr)-7.049 G
(eturns)-4.549 E F2(DW_DLV_NO_ENTRY)4.549 E F0 2.05(if there is no)4.549
F(corresponding statement program \(i.e., if there is no line informati\
on\).)69.336 315 Q F2
(void examplee\(Dwarf_Debug dbg,Dwarf_Die somedie\))89.336 333 Q({)
89.336 345 Q(Dwarf_Signed count = 0;)101.336 357 Q(char **srcfiles = 0;)
101.336 369 Q(Dwarf_Signed i = 0;)101.336 381 Q(Dwarf_Error error = 0;)
101.336 393 Q(int res = 0;)101.336 405 Q
(res = dwarf_srcfiles\(somedie, &srcfiles,&count,&error\);)101.336 429 Q
(if \(res == DW_DLV_OK\) {)101.336 441 Q
(for \(i = 0; i < count; ++i\) {)113.336 453 Q(/* use srcfiles[i] */)
125.336 465 Q(dwarf_dealloc\(dbg, srcfiles[i], DW_DLA_STRING\);)125.336
477 Q(})113.336 489 Q(dwarf_dealloc\(dbg, srcfiles, DW_DLA_LIST\);)
113.336 501 Q(})101.336 513 Q(})89.336 525 Q(})89.336 537 Q/F3 12
/Times-Bold@0 SF 3(6.11 Get)69.336 559 R(Inf)3 E
(ormation About a Single Line T)-.3 E(able Line)-1.104 E F0 .294
(The follo)69.336 577 R .294(wing functions can be used on the)-.25 F F2
(Dwarf_Line)2.793 E F0 .293(descriptors returned by)2.793 F F2
(dwarf_srclines\(\))2.793 E F0(or)69.336 589 Q F2
(dwarf_srclines_from_linecontext\(\))2.5 E F0
(to obtain information about the source lines.)2.5 E F1 2.75(6.11.1 d)
69.336 622 R(warf_linebeginstatement\(\))-.165 E F2
(int dwarf_linebeginstatement\()69.336 640 Q(Dwarf_Line line,)117.336
652 Q(Dwarf_Bool *return_bool,)117.336 664 Q(Dwarf_Error *error\))
117.336 676 Q F0 2.016(The function)69.336 694 R F2
(dwarf_linebeginstatement\(\))4.516 E F0(returns)4.516 E F2(DW_DLV_OK)
4.516 E F0 2.016(and sets)4.516 F F2(*return_bool)4.517 E F0(to)4.517 E
/F4 10/Times-Italic@0 SF(non-zer)69.336 706 Q(o)-.45 E F0(\(if)3.746 E
F2(line)3.746 E F0 1.245(represents a line number entry that is mark)
3.746 F 1.245(ed as be)-.1 F 1.245(ginning a statement\).)-.15 F(or)
6.245 E F4(zer)3.745 E(o)-.45 E F0(\(\(if)3.745 E F2(line)69.336 718 Q
F0 4.128(represents a line number entry that is not mark)6.628 F 4.128
(ed as be)-.1 F 4.128(ginning a statement\).)-.15 F 4.128(It returns)
9.128 F F2(DW_DLV_ERROR)69.336 730 Q F0(on error)2.5 E 5(.I)-.55 G 2.5
(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr).25 G(eturns)-2.5 E F2
(DW_DLV_NO_ENTRY)2.5 E F0(.)A(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5(5-)-2.5 G 0 Cg EP
%%Page: 56 56
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(6-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.11.2 d)69.336 99 R(warf_lineendsequence\(\))
-.165 E/F2 10/Courier@0 SF(int dwarf_lineendsequence\()69.336 117 Q
(Dwarf_Line line,)117.336 129 Q(Dwarf_Bool *return_bool,)117.336 141 Q
(Dwarf_Error *error\))117.336 153 Q F0 .852(The function)69.336 171 R F2
(dwarf_lineendsequence\(\))3.352 E F0(returns)3.351 E F2(DW_DLV_OK)3.351
E F0 .851(and sets)3.351 F F2(*return_bool)3.351 E/F3 10/Times-Italic@0
SF(non-zer)3.351 E(o)-.45 E F0 .74(\(in which case)69.336 183 R F2(line)
3.24 E F0 .74(represents a line number entry that is mark)3.24 F .741
(ed as ending a te)-.1 F .741(xt sequence\) or)-.15 F F3(zer)3.241 E(o)
-.45 E F0(\(in)3.241 E 1.328(which case)69.336 195 R F2(line)3.828 E F0
1.327(represents a line number entry that is not mark)3.828 F 1.327
(ed as ending a te)-.1 F 1.327(xt sequence\).)-.15 F 3.827(Al)6.327 G
(ine)-3.827 E .612(number entry that is mark)69.336 207 R .612
(ed as ending a te)-.1 F .613
(xt sequence is an entry with an address one be)-.15 F .613
(yond the highest)-.15 F 6.015(address used by the current sequence of \
line table entries \(that is, the table entry is a)69.336 219 R -.3(DW)
69.336 231 S(_LNE_end_sequence entry \(see the D).3 E -1.2(WA)-.3 G
(RF specif)1.2 E(ication\)\).)-.2 E 3.697(The function)69.336 249 R F2
(dwarf_lineendsequence\(\))6.197 E F0(returns)6.198 E F2(DW_DLV_ERROR)
6.198 E F0 3.698(on error)6.198 F 8.698(.I)-.55 G 6.198(tn)-8.698 G
-2.15 -.25(ev e)-6.198 H 6.198(rr).25 G(eturns)-6.198 E F2
(DW_DLV_NO_ENTRY)69.336 261 Q F0(.)A F1 2.75(6.11.3 d)69.336 294 R
(warf_lineno\(\))-.165 E F2(int dwarf_lineno\()69.336 312 Q 36
(Dwarf_Line line,)117.336 324 R(Dwarf_Unsigned * returned_lineno,)
117.336 336 Q 18(Dwarf_Error *)117.336 348 R(error\))6 E F0 3.281
(The function)69.336 366 R F2(dwarf_lineno\(\))5.781 E F0(returns)5.781
E F2(DW_DLV_OK)5.781 E F0 3.281(and sets)5.781 F F2(*return_lineno)5.781
E F0 3.281(to the source)5.781 F 1.811
(statement line number corresponding to the descriptor)69.336 378 R F2
(line)4.312 E F0 6.812(.I)C 4.312(tr)-6.812 G(eturns)-4.312 E F2
(DW_DLV_ERROR)4.312 E F0 1.812(on error)4.312 F 6.812(.I)-.55 G(t)-6.812
E(ne)69.336 390 Q -.15(ve)-.25 G 2.5(rr).15 G(eturns)-2.5 E F2
(DW_DLV_NO_ENTRY)2.5 E F0(.)A F1 2.75(6.11.4 d)69.336 423 R
(warf_line_sr)-.165 E(cf)-.198 E(ileno\(\))-.275 E F2
(int dwarf_line_srcfileno\()69.336 441 Q 36(Dwarf_Line line,)117.336 453
R(Dwarf_Unsigned * returned_fileno,)117.336 465 Q 18(Dwarf_Error *)
117.336 477 R(error\))6 E F0 .157(The function)69.336 495 R F2
(dwarf_line_srcfileno\(\))2.657 E F0(returns)2.657 E F2(DW_DLV_OK)2.657
E F0 .157(and sets)2.657 F F2(*returned_fileno)2.656 E F0 .156(to the)
2.656 F .296
(source statement line number corresponding to the descriptor)69.336 507
R F2 .296(file number)2.796 F F0 5.296(.W)C .297
(hen the number returned)-5.296 F(through)69.336 519 Q F2
(*returned_fileno)3.274 E F0 .774(is zero it means the f)3.274 F .773
(ile name is unkno)-.2 F .773(wn \(see the D)-.25 F -1.2(WA)-.3 G .773
(RF2/3 line table)1.2 F(specif)69.336 531 Q 3.103(ication\). When)-.2 F
.604(the number returned through)3.103 F F2(*returned_fileno)3.104 E F0
.604(is non-zero it is a f)3.104 F .604(ile number:)-.2 F .066
(subtract 1 from this f)69.336 543 R .066(ile number to get an inde)-.2
F 2.566(xi)-.15 G .066(nto the array of strings returned by)-2.566 F F2
(dwarf_srcfiles\(\))2.565 E F0(\(v)69.336 555 Q .235
(erify the resulting inde)-.15 F 2.735(xi)-.15 G 2.736(si)-2.735 G 2.736
(nr)-2.736 G .236(ange for the array of strings before inde)-2.736 F
.236(xing into the array of strings\).)-.15 F(The)5.236 E -.2(fi)69.336
567 S 2.405(le number may e).2 F 2.404
(xceed the size of the array of strings returned by)-.15 F F2
(dwarf_srcfiles\(\))4.904 E F0(because)4.904 E F2(dwarf_srcfiles\(\))
69.336 579 Q F0 .538(does not return f)3.038 F .538(iles names def)-.2 F
.538(ined with the)-.2 F F2(DW_DLE_define_file)5.538 E F0(operator)5.538
E(.)-.55 E 4.365(The function)69.336 591 R F2(dwarf_line_srcfileno\(\))
6.865 E F0(returns)6.865 E F2(DW_DLV_ERROR)6.865 E F0 4.364(on error)
6.864 F 9.364(.I)-.55 G 6.864(tn)-9.364 G -2.15 -.25(ev e)-6.864 H 6.864
(rr).25 G(eturns)-6.864 E F2(DW_DLV_NO_ENTRY)69.336 603 Q F0(.)A F1 2.75
(6.11.5 d)69.336 636 R(warf_lineaddr\(\))-.165 E F2
(int dwarf_lineaddr\()69.336 654 Q 12(Dwarf_Line line,)117.336 666 R 6
(Dwarf_Addr *return_lineaddr,)117.336 678 R(Dwarf_Error *error\))117.336
690 Q F0 .492(The function)69.336 708 R F2(dwarf_lineaddr\(\))2.992 E F0
(returns)2.992 E F2(DW_DLV_OK)2.992 E F0 .492(and sets)2.992 F F2
(*return_lineaddr)2.992 E F0 .492(to the address)2.992 F 5.33
(associated with the descriptor)69.336 720 R F2(line)7.83 E F0 10.33(.I)
C 7.83(tr)-10.33 G(eturns)-7.83 E F2(DW_DLV_ERROR)7.83 E F0 5.33
(on error)10.33 F 10.33(.I)-.55 G 7.83(tn)-10.33 G -2.15 -.25(ev e)-7.83
H 7.83(rr).25 G(eturns)-7.83 E F2(DW_DLV_NO_ENTRY)69.336 732 Q F0(.)A
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G
2.5(6-)-2.5 G 0 Cg EP
%%Page: 57 57
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(7-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.11.6 d)69.336 99 R(warf_lineoff\(\))-.165 E/F2
10/Courier@0 SF(int dwarf_lineoff\()69.336 117 Q(Dwarf_Line line,)
117.336 129 Q 12(Dwarf_Signed *)117.336 141 R(return_lineoff,)6 E
(Dwarf_Error *error\))117.336 153 Q F0 1.691(The function)69.336 171 R
F2(dwarf_lineoff\(\))4.191 E F0(returns)4.191 E F2(DW_DLV_OK)4.191 E F0
1.691(and sets)4.191 F F2(*return_lineoff)4.191 E F0 1.691
(to the column)4.191 F(number at which the statement represented by)
69.336 183 Q F2(line)2.5 E F0(be)2.5 E(gins.)-.15 E .539(It sets)69.336
201 R F2(return_lineoff)3.039 E F0 .538(to zero if the column number of\
 the statement is not represented \(meaning the)3.038 F .423
(producer library call w)69.336 213 R .423(as gi)-.1 F -.15(ve)-.25 G
2.923(nz).15 G .423(ero as the column number\).)-2.923 F .424
(Zero is the correct v)5.424 F .424(alue meaning "left edge")-.25 F
(as def)69.336 225 Q(ined in the D)-.2 E -1.2(WA)-.3 G
(RF2/3/4 specication \(section 6.2.2\).)1.2 E 1.16
(Before December 2011 zero w)69.336 243 R 1.16
(as not returned through the)-.1 F F2(return_lineoff)6.16 E F0(pointer)
3.66 E 3.66(,-)-.4 G 3.66(1w)-3.66 G 1.16(as returned)-3.76 F
(through the pointer)69.336 255 Q 5(.T)-.55 G
(he reason for this oddity is unclear)-5 E 2.5(,l)-.4 G(ost in history)
-2.5 E 5(.B)-.65 G(ut there is no good reason for -1.)-5 E 1.28
(The type of)69.336 273 R F2(return_lineoff)6.28 E F0 1.28(is a pointer)
3.78 F 1.28(-to-signed, b)-.2 F 1.28
(ut there is no good reason for the v)-.2 F 1.28(alue to be)-.25 F 1.378
(signed, the D)69.336 285 R -1.2(WA)-.3 G 1.378(RF specif)1.2 F 1.378
(ication does not deal with ne)-.2 F -.05(ga)-.15 G(ti).05 E 1.678 -.15
(ve c)-.25 H 1.377(olumn numbers.).15 F(Ho)6.377 E(we)-.25 E -.15(ve)
-.25 G 2.177 -.4(r, c).15 H 1.377(hanging the).4 F(declaration w)69.336
297 Q(ould cause compilation errors for little benef)-.1 E
(it, so the pointer)-.2 E(-to-signed is left unchanged.)-.2 E
(On error it returns)69.336 315 Q F2(DW_DLV_ERROR)2.5 E F0 5(.I)C 2.5
(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr).25 G(eturns)-2.5 E F2
(DW_DLV_NO_ENTRY)2.5 E F0(.)A F1 2.75(6.11.7 d)69.336 348 R(warf_linesr)
-.165 E(c\(\))-.198 E F2(int dwarf_linesrc\()69.336 366 Q
(Dwarf_Line line,)117.336 378 Q 6(char **)117.336 390 R(return_linesrc,)
18 E(Dwarf_Error *error\))117.336 402 Q F0 .761(The function)69.336 420
R F2(dwarf_linesrc\(\))3.261 E F0(returns)3.261 E F2(DW_DLV_OK)3.261 E
F0 .762(and sets)3.262 F F2(*return_linesrc)3.262 E F0 .762
(to a pointer to a)3.262 F 1.824(null-terminated string of characters t\
hat represents the name of the source-f)69.336 432 R 1.823(ile where)-.2
F F2(line)4.323 E F0 4.323(occurs. It)4.323 F(returns)69.336 444 Q F2
(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E .28(If the applicable f)
69.336 462 R .281(ile name in the line table Statement Program Prolog d\
oes not start with a '/' character the)-.2 F 1.37(string in)69.336 474 R
F2(DW_AT_comp_dir)3.87 E F0 1.37(\(if applicable and present\) or the a\
pplicable directory name from the line)3.87 F .023
(Statement Program Prolog is prepended to the f)69.336 486 R .023
(ile name in the line table Statement Program Prolog to mak)-.2 F(e)-.1
E 2.5(af)69.336 498 S(ull path.)-2.5 E 4.709
(The storage pointed to by a successful return of)69.336 516 R F2
(dwarf_linesrc\(\))7.209 E F0 4.709(should be freed using)7.209 F F2
(dwarf_dealloc\(\))69.336 528 Q F0 1.62(with the allocation type)4.12 F
F2(DW_DLA_STRING)4.12 E F0 1.62(when no longer of interest.)4.12 F 1.62
(It ne)6.62 F -.15(ve)-.25 G(r).15 E(returns)69.336 540 Q F2
(DW_DLV_NO_ENTRY)2.5 E F0(.)A F1 2.75(6.11.8 d)69.336 573 R
(warf_lineblock\(\))-.165 E F2(int dwarf_lineblock\()69.336 591 Q
(Dwarf_Line line,)117.336 603 Q(Dwarf_Bool *return_bool,)117.336 615 Q
(Dwarf_Error *error\))117.336 627 Q F0 1.566(The function)69.336 645 R
F2(dwarf_lineblock\(\))4.066 E F0(returns)4.066 E F2(DW_DLV_OK)4.066 E
F0 1.565(and sets)4.066 F F2(*return_linesrc)4.065 E F0 1.565
(to non-zero)4.065 F .742(\(i.e. true\)\(if the line is mark)69.336 657
R .743(ed as be)-.1 F .743(ginning a basic block\) or zero \(i.e. f)-.15
F .743(alse\) \(if the line is mark)-.1 F .743(ed as not)-.1 F(be)69.336
669 Q(ginning a basic block\).)-.15 E(It returns)5 E F2(DW_DLV_ERROR)2.5
E F0(on error)2.5 E 5(.I)-.55 G 2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5
(rr).25 G(eturns)-2.5 E F2(DW_DLV_NO_ENTRY)2.5 E F0(.)A F1 2.75
(6.11.9 d)69.336 702 R(warf_is_addr_set\(\))-.165 E F0(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5(7-)-2.5 G 0 Cg
EP
%%Page: 58 58
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(8-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_line_is_addr_set\()69.336 96 Q(Dwarf_Line line,)
117.336 108 Q(Dwarf_Bool *return_bool,)117.336 120 Q
(Dwarf_Error *error\))117.336 132 Q F0 .812(The function)69.336 150 R F1
(dwarf_line_is_addr_set\(\))3.311 E F0(returns)3.311 E F1(DW_DLV_OK)
3.311 E F0 .811(and sets)3.311 F F1(*return_bool)3.311 E F0 .811
(to non-)3.311 F .693(zero \(i.e. true\)\(if the line is mark)69.336 162
R .693(ed as being a D)-.1 F .694
(W_LNE_set_address operation\) or zero \(i.e. f)-.3 F .694
(alse\) \(if the)-.1 F .986(line is mark)69.336 174 R .986
(ed as not being a D)-.1 F .986(W_LNE_set_address operation\).)-.3 F
.986(It returns)5.986 F F1(DW_DLV_ERROR)3.485 E F0 .985(on error)3.485 F
5.985(.I)-.55 G(t)-5.985 E(ne)69.336 186 Q -.15(ve)-.25 G 2.5(rr).15 G
(eturns)-2.5 E F1(DW_DLV_NO_ENTRY)2.5 E F0(.)A .491
(This is intended to allo)69.336 210 R 2.991(wc)-.25 G .491
(onsumers to do a more useful job printing and analyzing D)-2.991 F -1.2
(WA)-.3 G .491(RF data, it is not)1.2 F(strictly necessary)69.336 222 Q
(.)-.65 E/F2 11/Times-Bold@0 SF 2.75(6.11.10 d)69.336 255 R(warf_pr)
-.165 E(ologue_end_etc\(\))-.198 E F1
(int dwarf_prologue_end_etc\(Dwarf_Line)69.336 273 Q(line,)12 E 6
(Dwarf_Bool *)117.336 285 R(prologue_end,)24 E 6(Dwarf_Bool *)117.336
297 R(epilogue_begin,)24 E(Dwarf_Unsigned * isa,)117.336 309 Q
(Dwarf_Unsigned * discriminator,)117.336 321 Q(Dwarf_Error *)117.336 333
Q(error\))24 E F0 2.507(The function)69.336 351 R F1
(dwarf_prologue_end_etc\(\))5.007 E F0(returns)5.007 E F1(DW_DLV_OK)
5.007 E F0 2.507(and sets)5.007 F 2.507(the returned f)7.507 F 2.507
(ields to)-.2 F -.25(va)69.336 363 S .305(lues currently set.).25 F .306
(While it is pretty safe to assume that the)5.305 F F1(isa)2.806 E F0
(and)2.806 E F1(discriminator)2.806 E F0 -.25(va)2.806 G .306
(lues returned).25 F .013(are v)69.336 375 R .013(ery small inte)-.15 F
.013(gers, there is no restriction in the standard.)-.15 F .013
(It returns)5.013 F F1(DW_DLV_ERROR)2.513 E F0 .013(on error)2.513 F
5.013(.I)-.55 G 2.512(tn)-5.013 G -2.15 -.25(ev e)-2.512 H(r).25 E
(returns)69.336 387 Q F1(DW_DLV_NO_ENTRY)2.5 E F0(.)A
(This function is ne)69.336 411 Q 2.5(wi)-.25 G 2.5(nD)-2.5 G
(ecember 2011.)-2.5 E/F3 12/Times-Bold@0 SF 3(6.12 Global)69.336 457 R
(Name Space Operations)3 E F0(These operations operate on the .deb)
69.336 475 Q(ug_pubnames section of the deb)-.2 E(ugging information.)
-.2 E F2 2.75(6.12.1 Deb)69.336 508 R(ugger Interface Operations)-.22 E
/F4 9/Times-Bold@0 SF 2.25(6.12.1.1 d)69.336 543 R(warf_get_globals\(\))
-.135 E F1(int dwarf_get_globals\()69.336 561 Q(Dwarf_Debug dbg,)117.336
573 Q(Dwarf_Global **globals,)117.336 585 Q
(Dwarf_Signed * return_count,)117.336 597 Q(Dwarf_Error *error\))117.336
609 Q F0 .169(The function)69.336 627 R F1(dwarf_get_globals\(\))2.669 E
F0(returns)2.669 E F1(DW_DLV_OK)2.669 E F0 .169(and sets)2.669 F F1
(*return_count)2.669 E F0 .169(to the count of)2.669 F 3.499
(pubnames represented in the section containing pubnames i.e. .deb)
69.336 639 R 5.998(ug_pubnames. It)-.2 F 3.498(also stores at)5.998 F F1
(*globals)69.336 651 Q F0 4.503(,ap)C 2.003(ointer to a list of)-4.503 F
F1(Dwarf_Global)4.503 E F0 2.003
(descriptors, one for each of the pubnames in the)4.503 F(.deb)69.336
663 Q .834(ug_pubnames section.)-.2 F .833
(The returned results are for the entire section.)5.833 F .833
(It returns)5.833 F F1(DW_DLV_ERROR)3.333 E F0(on)3.333 E(error)69.336
675 Q 5(.I)-.55 G 2.5(tr)-5 G(eturns)-2.5 E F1(DW_DLV_NO_ENTRY)2.5 E F0
(if the .deb)2.5 E(ug_pubnames section does not e)-.2 E(xist.)-.15 E
.197(On a successful return from)69.336 705 R F1(dwarf_get_globals\(\))
2.697 E F0 2.697(,t)C(he)-2.697 E F1(Dwarf_Global)2.697 E F0 .198
(descriptors should be freed)2.697 F(using)69.336 717 Q F1
(dwarf_globals_dealloc\(\))2.598 E F0(.)A F1(dwarf_globals_dealloc\(\))
5.098 E F0 .098(is ne)2.598 F 2.598(wa)-.25 G 2.598(so)-2.598 G 2.598
(fJ)-2.598 G .098(uly 15, 2005 and)-2.598 F
(is the preferred approach to freeing this memory)69.336 729 Q(..)-.65 E
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G
2.5(8-)-2.5 G 0 Cg EP
%%Page: 59 59
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-5)274.506 48 S 2.5(9-)-2.5 G .302
(Global names refer e)69.336 96 R(xclusi)-.15 E -.15(ve)-.25 G .302
(ly to names and of).15 F .303(fsets in the .deb)-.25 F .303
(ug_info section.)-.2 F .303(See section 6.1.1 "Lookup)5.303 F
(by Name" in the dw)69.336 108 Q(arf standard.)-.1 E/F1 10/Courier@0 SF
(void examplef\(Dwarf_Debug dbg\))89.336 138 Q({)89.336 150 Q
(Dwarf_Signed count = 0;)101.336 162 Q(Dwarf_Global *globs = 0;)101.336
174 Q(Dwarf_Signed i = 0;)101.336 186 Q 6(Dwarf_Error error)101.336 198
R 6(=0)6 G(;)-6 E(int res = 0;)101.336 210 Q
(res = dwarf_get_globals\(dbg, &globs,&count, &error\);)101.336 234 Q
(if \(res == DW_DLV_OK\) {)101.336 246 Q
(for \(i = 0; i < count; ++i\) {)113.336 258 Q(/* use globs[i] */)
185.336 270 Q(})113.336 282 Q
(dwarf_globals_dealloc\(dbg, globs, count\);)113.336 294 Q(})101.336 306
Q(})89.336 318 Q F0 .067(The follo)69.336 336 R .066(wing code is depre\
cated as of July 15, 2005 as it does not free all rele)-.25 F -.25(va)
-.25 G .066(nt memory).25 F 5.066(.T)-.65 G .066(his approach)-5.066 F
3.844(still w)69.336 348 R 3.844(orks as well as it e)-.1 F -.15(ve)-.25
G 6.344(rd).15 G 6.344(id. On)-6.344 F 6.344(as)6.344 G 3.845
(uccessful return from)-6.344 F F1(dwarf_get_globals\(\))6.345 E F0
6.345(,t)C(he)-6.345 E F1(Dwarf_Global)69.336 360 Q F0 .527
(descriptors should be indi)3.027 F .527(vidually freed using)-.25 F F1
(dwarf_dealloc\(\))3.027 E F0 .527(with the allocation)3.027 F(type)
69.336 372 Q F1(DW_DLA_GLOBAL_CONTEXT)3.577 E F0 3.577(,\()C(or)-3.577 E
F1(DW_DLA_GLOBAL)3.578 E F0 3.578(,a)C 3.578(no)-3.578 G 1.078
(lder name, supported for compatibility\))-3.578 F(follo)69.336 384 Q
.327
(wed by the deallocation of the list itself with the allocation type)
-.25 F F1(DW_DLA_LIST)2.826 E F0 .326(when the descriptors)2.826 F
(are no longer of interest.)69.336 396 Q F1(Dwarf_Signed cnt;)89.336 426
Q(Dwarf_Global *globs;)89.336 438 Q(int res;)89.336 450 Q
(res = dwarf_get_globals\(dbg, &globs,&cnt, &error\);)89.336 474 Q
(if \(res == DW_DLV_OK\) {)89.336 486 Q
(/* OBSOLETE: DO NOT USE to deallocate*/)137.336 510 Q
(for \(i = 0; i < cnt; ++i\) {)137.336 522 Q(/* use globs[i] */)185.336
534 Q(dwarf_dealloc\(dbg, globs[i], DW_DLA_GLOBAL_CONTEXT\);)185.336 546
Q(})137.336 558 Q(dwarf_dealloc\(dbg, globs, DW_DLA_LIST\);)137.336 570
Q(})89.336 582 Q/F2 9/Times-Bold@0 SF 2.25(6.12.1.2 d)69.336 617 R
(warf_globname\(\))-.135 E F1(int dwarf_globname\()69.336 635 Q
(Dwarf_Global global,)117.336 647 Q(char **)117.336 659 Q(return_name,)
36 E(Dwarf_Error *error\))117.336 671 Q F0 1.761(The function)69.336 689
R F1(dwarf_globname\(\))4.261 E F0(returns)4.261 E F1(DW_DLV_OK)4.261 E
F0 1.762(and sets)4.262 F F1(*return_name)4.262 E F0 1.762
(to a pointer to a)4.262 F .885
(null-terminated string that names the pubname represented by the)69.336
701 R F1(Dwarf_Global)3.384 E F0(descriptor)3.384 E(,)-.4 E F1(global)
3.384 E F0(.)A .576(It returns)69.336 713 R F1(DW_DLV_ERROR)3.076 E F0
.577(on error)3.077 F 5.577(.O)-.55 G 3.077(nas)-5.577 G .577
(uccessful return from this function, the string should be freed)-3.077
F(using)69.336 725 Q F1(dwarf_dealloc\(\))3.924 E F0 3.924(,w)C 1.424
(ith the allocation type)-3.924 F F1(DW_DLA_STRING)3.923 E F0 1.423
(when no longer of interest.)3.923 F(It)6.423 E(ne)69.336 737 Q -.15(ve)
-.25 G 2.5(rr).15 G(eturns)-2.5 E F1(DW_DLV_NO_ENTRY)2.5 E F0(.)A(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-5)120.71 G 2.5
(9-)-2.5 G 0 Cg EP
%%Page: 60 60
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(0-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.12.1.3 d)69.336 95 R(warf_global_die_offset\(\))
-.135 E/F2 10/Courier@0 SF(int dwarf_global_die_offset\()69.336 113 Q
(Dwarf_Global global,)117.336 125 Q 12(Dwarf_Off *return_offset,)117.336
137 R(Dwarf_Error *error\))117.336 149 Q F0 1.266(The function)69.336
167 R F2(dwarf_global_die_offset\(\))3.766 E F0(returns)3.766 E F2
(DW_DLV_OK)3.766 E F0 1.266(and sets)3.766 F F2(*return_offset)3.767 E
F0(to)3.767 E 1.494(the of)69.336 179 R 1.494
(fset in the section containing DIEs, i.e. .deb)-.25 F 1.494
(ug_info, of the DIE representing the pubname that is)-.2 F .032
(described by the)69.336 191 R F2(Dwarf_Global)2.532 E F0(descriptor)
2.532 E(,)-.4 E F2(glob)2.532 E F0 5.032(.I)C 2.532(tr)-5.032 G(eturns)
-2.532 E F2(DW_DLV_ERROR)2.532 E F0 .033(on error)2.532 F 5.033(.I)-.55
G 2.533(tn)-5.033 G -2.15 -.25(ev e)-2.533 H 2.533(rr).25 G(eturns)
-2.533 E F2(DW_DLV_NO_ENTRY)69.336 203 Q F0(.)A F1 2.25(6.12.1.4 d)
69.336 232 R(warf_global_cu_offset\(\))-.135 E F2
(int dwarf_global_cu_offset\()69.336 250 Q(Dwarf_Global global,)117.336
262 Q 12(Dwarf_Off *return_offset,)117.336 274 R(Dwarf_Error *error\))
117.336 286 Q F0 .157(The function)69.336 304 R F2
(dwarf_global_cu_offset\(\))2.657 E F0(returns)2.657 E F2(DW_DLV_OK)
2.657 E F0 .157(and sets)2.657 F F2(*return_offset)2.656 E F0 .156
(to the)2.656 F(of)69.336 316 Q .913
(fset in the section containing DIEs, i.e. .deb)-.25 F .913
(ug_info, of the compilation-unit header of the compilation-)-.2 F 3.31
(unit that contains the pubname described by the)69.336 328 R F2
(Dwarf_Global)5.81 E F0(descriptor)5.81 E(,)-.4 E F2(global)5.81 E F0
8.31(.I)C 5.81(tr)-8.31 G(eturns)-5.81 E F2(DW_DLV_ERROR)69.336 340 Q F0
(on error)2.5 E 5(.I)-.55 G 2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr)
.25 G(eturns)-2.5 E F2(DW_DLV_NO_ENTRY)2.5 E F0(.)A F1 2.25(6.12.1.5 d)
69.336 369 R(warf_get_cu_die_offset_gi)-.135 E -.09(ve)-.09 G
(n_cu_header_offset\(\)).09 E F2
(int dwarf_get_cu_die_offset_given_cu_header_offset_b\()69.336 387 Q
(Dwarf_Debug dbg,)117.336 399 Q 12(Dwarf_Off in_cu_header_offset,)
117.336 411 R 6(Dwarf_Bool is_info,)117.336 423 R
(Dwarf_Off * out_cu_die_offset,)117.336 435 Q(Dwarf_Error *error\))
117.336 447 Q F0 .837(The function)69.336 465 R F2
(dwarf_get_cu_die_offset_given_cu_header_offset\(\))3.337 E F0(returns)
3.338 E F2(DW_DLV_OK)3.338 E F0 5.134(and sets)69.336 477 R F2
(*out_cu_die_offset)7.634 E F0 5.134(to the of)7.634 F 5.133
(fset of the compilation-unit DIE gi)-.25 F -.15(ve)-.25 G 7.633(nt).15
G 5.133(he of)-7.633 F(fset)-.25 E F2(in_cu_header_offset)69.336 489 Q
F0 1.116(of a compilation-unit header)3.616 F 6.116(.I)-.55 G 3.616(tr)
-6.116 G(eturns)-3.616 E F2(DW_DLV_ERROR)3.616 E F0 1.117(on error)3.617
F 6.117(.I)-.55 G 3.617(tn)-6.117 G -2.15 -.25(ev e)-3.617 H(r).25 E
(returns)69.336 501 Q F2(DW_DLV_NO_ENTRY)2.5 E F0(.)A(If)69.336 519 Q F2
(is_info)4.155 E F0 1.655(is non-zero the)4.155 F F2
(in_cu_header_offset)4.155 E F0 1.655(must refer to a .deb)4.155 F 1.654
(ug_info section of)-.2 F 4.154(fset. If)-.25 F F2(is_info)69.336 531 Q
F0 1.259(zero the)3.759 F F2(in_cu_header_offset)3.759 E F0 1.259
(must refer to a .deb)3.759 F 1.259(ug_types section of)-.2 F 3.76
(fset. Chaos)-.25 F(may)3.76 E(result if the)69.336 543 Q F2(is_info)2.5
E F0(flag is incorrect.)2.5 E 1.337(This ef)69.336 567 R(fecti)-.25 E
-.15(ve)-.25 G 1.337(ly turns a compilation-unit-header of).15 F 1.337
(fset into a compilation-unit DIE of)-.25 F 1.337(fset \(by adding the)
-.25 F 7.87(size of the applicable CU header\).)69.336 579 R 7.871
(This function is also sometimes useful with the)12.871 F F2
(dwarf_weak_cu_offset\(\))69.336 591 Q F0(,)A F2
(dwarf_func_cu_offset\(\))4.687 E F0(,)A F2(dwarf_type_cu_offset\(\))
4.687 E F0 4.686(,a)C(nd)-4.686 E F2 .67(int dwarf_var_cu_offset\(\))
69.336 603 R F0 .671
(functions, though for those functions the data is only in .deb)3.17 F
(ug_info)-.2 E(by def)69.336 615 Q(inition.)-.2 E F1 2.25(6.12.1.6 d)
69.336 644 R(warf_get_cu_die_offset_gi)-.135 E -.09(ve)-.09 G
(n_cu_header_offset\(\)).09 E F2
(int dwarf_get_cu_die_offset_given_cu_header_offset\()69.336 662 Q
(Dwarf_Debug dbg,)117.336 674 Q 12(Dwarf_Off in_cu_header_offset,)
117.336 686 R(Dwarf_Off * out_cu_die_offset,)117.336 698 Q
(Dwarf_Error *error\))117.336 710 Q F0 .958
(This function is superseded by)69.336 728 R F2
(dwarf_get_cu_die_offset_given_cu_header_offset_b\(\))3.458 E F0(,)A 2.5
(af)69.336 740 S
(unction which is still supported thought it refers only to the .deb)
-2.5 E(ug_info section.)-.2 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(0-)-2.5 G 0 Cg EP
%%Page: 61 61
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(1-)-2.5 G/F1 10
/Courier@0 SF(dwarf_get_cu_die_offset_given_cu_header_offset\(\))69.336
96 Q F0(added Re)2.5 E 2.5(v1)-.25 G(.45, June, 2001.)-2.5 E .334
(This function is declared as 'optional' in libdw)69.336 120 R .334
(arf.h on IRIX systems so the _MIPS_SYMBOL_PRESENT)-.1 F .259
(predicate may be used at run time to determine if the v)69.336 132 R
.258(ersion of libdw)-.15 F .258(arf link)-.1 F .258
(ed into an application has this)-.1 F(function.)69.336 144 Q/F2 9
/Times-Bold@0 SF 2.25(6.12.1.7 d)69.336 173 R
(warf_global_name_offsets\(\))-.135 E F1
(int dwarf_global_name_offsets\()69.336 191 Q(Dwarf_Global global,)
117.336 203 Q 24(char **return_name,)117.336 215 R
(Dwarf_Off *die_offset,)117.336 227 Q(Dwarf_Off *cu_offset,)117.336 239
Q(Dwarf_Error *error\))117.336 251 Q F0 .354(The function)69.336 269 R
F1(dwarf_global_name_offsets\(\))2.854 E F0(returns)2.854 E F1
(DW_DLV_OK)2.854 E F0 .355(and sets)2.854 F F1(*return_name)2.855 E F0
.355(to a)2.855 F .678(pointer to a null-terminated string that gi)
69.336 281 R -.15(ve)-.25 G 3.178(st).15 G .678
(he name of the pubname described by the)-3.178 F F1(Dwarf_Global)3.178
E F0(descriptor)69.336 293 Q F1(global)3.195 E F0 5.695(.I)C 3.195(tr)
-5.695 G(eturns)-3.195 E F1(DW_DLV_ERROR)3.195 E F0 .695(on error)3.195
F 5.695(.I)-.55 G 3.195(tn)-5.695 G -2.15 -.25(ev e)-3.195 H 3.195(rr)
.25 G(eturns)-3.195 E F1(DW_DLV_NO_ENTRY)3.195 E F0 5.695(.I)C 3.195(ta)
-5.695 G(lso)-3.195 E .276(returns in the locations pointed to by)69.336
305 R F1(die_offset)2.775 E F0 2.775(,a)C(nd)-2.775 E F1(cu_offset)2.775
E F0 2.775(,t)C .275(he of)-2.775 F .275(fsets of the DIE representing)
-.25 F 1.073(the pubname, and the DIE representing the compilation-unit\
 containing the pubname, respecti)69.336 317 R -.15(ve)-.25 G(ly).15 E
6.073(.O)-.65 G 3.574(na)-6.073 G .912(successful return from)69.336 329
R F1(dwarf_global_name_offsets\(\))3.411 E F0 .911
(the storage pointed to by)3.411 F F1(return_name)3.411 E F0 .775
(should be freed using)69.336 341 R F1(dwarf_dealloc\(\))3.276 E F0
3.276(,w)C .776(ith the allocation type)-3.276 F F1(DW_DLA_STRING)3.276
E F0 .776(when no longer)3.276 F(of interest.)69.336 353 Q/F3 12
/Times-Bold@0 SF 3(6.13 D)69.336 399 R -1.44(WA)-.48 G(RF3 T)1.44 E
(ype Names Operations)-.408 E F0(Section ".deb)69.336 417 Q
(ug_pubtypes" is ne)-.2 E 2.5(wi)-.25 G 2.5(nD)-2.5 G -1.2(WA)-2.8 G
(RF3.)1.2 E 5.93(These functions operate on the .deb)69.336 435 R 5.93
(ug_pubtypes section of the deb)-.2 F 5.93(ugging information.)-.2 F
(The)10.93 E(.deb)69.336 447 Q .921
(ug_pubtypes section contains the names of f)-.2 F .921(ile-scope user)
-.2 F(-def)-.2 E .922(ined types, the of)-.2 F .922(fsets of the)-.25 F
F1(DIE)3.422 E F0 3.422(st)C(hat)-3.422 E .439(represent the def)69.336
459 R .439(initions of those types, and the of)-.2 F .438
(fsets of the compilation-units that contain the def)-.25 F(initions)-.2
E(of those types.)69.336 471 Q/F4 11/Times-Bold@0 SF 2.75(6.13.1 Deb)
69.336 504 R(ugger Interface Operations)-.22 E F2 2.25(6.13.1.1 d)69.336
539 R(warf_get_pubtypes\(\))-.135 E F1(int dwarf_get_pubtypes\()69.336
557 Q(Dwarf_Debug dbg,)117.336 569 Q(Dwarf_Type **types,)117.336 581 Q
(Dwarf_Signed *typecount,)117.336 593 Q(Dwarf_Error *error\))117.336 605
Q F0 1.26(The function)69.336 623 R F1(dwarf_get_pubtypes\(\))3.76 E F0
(returns)3.76 E F1(DW_DLV_OK)3.76 E F0 1.26(and sets)3.76 F F1
(*typecount)3.76 E F0 1.26(to the count of)3.76 F(user)69.336 635 Q
(-def)-.2 E 6.222
(ined type names represented in the section containing user)-.2 F(-def)
-.2 E 6.221(ined type names, i.e.)-.2 F(.deb)69.336 647 Q 2.541
(ug_pubtypes. It)-.2 F .041(also stores at)2.541 F F1(*types)2.541 E F0
2.541(,ap)C .041(ointer to a list of)-2.541 F F1(Dwarf_Type)2.541 E F0
.042(descriptors, one for each of)2.541 F .272(the user)69.336 659 R
(-def)-.2 E .272(ined type names in the .deb)-.2 F .272
(ug_pubtypes section.)-.2 F .272
(The returned results are for the entire section.)5.272 F 1.304
(It returns)69.336 671 R F1(DW_DLV_NOCOUNT)3.804 E F0 1.304(on error)
3.804 F 6.304(.I)-.55 G 3.805(tr)-6.304 G(eturns)-3.805 E F1
(DW_DLV_NO_ENTRY)3.805 E F0 1.305(if the .deb)3.805 F 1.305
(ug_pubtypes section)-.2 F(does not e)69.336 683 Q(xist.)-.15 E .743
(On a successful return from)69.336 713 R F1(dwarf_get_pubtypes\(\))
3.243 E F0 3.243(,t)C(he)-3.243 E F1(Dwarf_Type)3.243 E F0 .742
(descriptors should be freed)3.243 F(using)69.336 725 Q F1
(dwarf_types_dealloc\(\))16.481 E F0(.)A F1(dwarf_types_dealloc\(\))
18.981 E F0 13.982(is used for both)16.482 F F1(dwarf_get_pubtypes\(\))
69.336 737 Q F0(and)2.5 E F1(dwarf_get_types\(\))2.5 E F0
(as the data types are the same.)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(1-)-2.5 G 0 Cg EP
%%Page: 62 62
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(2-)-2.5 G 1.501
(Global type names refer e)69.336 96 R(xclusi)-.15 E -.15(ve)-.25 G
1.501(ly to names and of).15 F 1.501(fsets in the .deb)-.25 F 1.5
(ug_info section.)-.2 F 1.5(See section 6.1.1)6.5 F
("Lookup by Name" in the dw)69.336 108 Q(arf standard.)-.1 E/F1 10
/Courier@0 SF(void exampleg\(Dwarf_Debug dbg\))89.336 150 Q({)89.336 162
Q(Dwarf_Error error = 0;)101.336 174 Q(Dwarf_Signed count = 0;)101.336
186 Q(Dwarf_Type *types = 0;)101.336 198 Q(Dwarf_Signed i = 0;)101.336
210 Q(int res = 0;)101.336 222 Q
(res = dwarf_get_pubtypes\(dbg, &types,&count, &error\);)101.336 246 Q
(if \(res == DW_DLV_OK\) {)101.336 258 Q
(for \(i = 0; i < count; ++i\) {)113.336 270 Q(/* use types[i] */)
125.336 282 Q(})113.336 294 Q(dwarf_types_dealloc\(dbg, types, count\);)
113.336 306 Q(})101.336 318 Q(})89.336 330 Q/F2 9/Times-Bold@0 SF 2.25
(6.13.1.2 d)69.336 365 R(warf_pubtypename\(\))-.135 E F1
(int dwarf_pubtypename\()69.336 383 Q 12(Dwarf_Type type,)117.336 395 R
36(char **return_name,)117.336 407 R(Dwarf_Error *error\))117.336 419 Q
F0 .261(The function)69.336 437 R F1(dwarf_pubtypename\(\))2.761 E F0
(returns)2.761 E F1(DW_DLV_OK)2.761 E F0 .262(and sets)2.762 F F1
(*return_name)2.762 E F0 .262(to a pointer to a)2.762 F .091
(null-terminated string that names the user)69.336 449 R(-def)-.2 E .091
(ined type represented by the)-.2 F F1(Dwarf_Type)2.591 E F0(descriptor)
2.59 E(,)-.4 E F1(type)2.59 E F0(.)A .613(It returns)69.336 461 R F1
(DW_DLV_ERROR)3.113 E F0 .613(on error)3.113 F 5.613(.I)-.55 G 3.113(tn)
-5.613 G -2.15 -.25(ev e)-3.113 H 3.113(rr).25 G(eturns)-3.113 E F1
(DW_DLV_NO_ENTRY)3.113 E F0 5.613(.O)C 3.113(nas)-5.613 G .613
(uccessful return from)-3.113 F 4.937
(this function, the string should be freed using)69.336 473 R F1
(dwarf_dealloc\(\))7.437 E F0 7.436(,w)C 4.936(ith the allocation type)
-7.436 F F1(DW_DLA_STRING)69.336 485 Q F0(when no longer of interest.)
2.5 E F2 2.25(6.13.1.3 d)69.336 514 R(warf_pubtype_die_offset\(\))-.135
E F1(int dwarf_pubtype_die_offset\()69.336 532 Q(Dwarf_Type type,)
117.336 544 Q 6(Dwarf_Off *return_offset,)117.336 556 R
(Dwarf_Error *error\))117.336 568 Q F0 .516(The function)69.336 586 R F1
(dwarf_pubtype_die_offset\(\))3.016 E F0(returns)3.016 E F1(DW_DLV_OK)
3.016 E F0 .516(and sets)3.016 F F1(*return_offset)3.017 E F0(to)3.017 E
.027(the of)69.336 598 R .027
(fset in the section containing DIEs, i.e. .deb)-.25 F .027
(ug_info, of the DIE representing the user)-.2 F(-def)-.2 E .026
(ined type that)-.2 F .232(is described by the)69.336 610 R F1
(Dwarf_Type)2.732 E F0(descriptor)2.732 E(,)-.4 E F1(type)2.732 E F0
5.232(.I)C 2.732(tr)-5.232 G(eturns)-2.732 E F1(DW_DLV_ERROR)2.732 E F0
.232(on error)2.732 F 5.232(.I)-.55 G 2.733(tn)-5.232 G -2.15 -.25(ev e)
-2.733 H 2.733(rr).25 G(eturns)-2.733 E F1(DW_DLV_NO_ENTRY)69.336 622 Q
F0(.)A F2 2.25(6.13.1.4 d)69.336 651 R(warf_pubtype_cu_offset\(\))-.135
E F1(int dwarf_pubtype_cu_offset\()69.336 669 Q(Dwarf_Type type,)117.336
681 Q 6(Dwarf_Off *return_offset,)117.336 693 R(Dwarf_Error *error\))
117.336 705 Q F0 1.267(The function)69.336 723 R F1
(dwarf_pubtype_cu_offset\(\))3.767 E F0(returns)3.766 E F1(DW_DLV_OK)
3.766 E F0 1.266(and sets)3.766 F F1(*return_offset)3.766 E F0(to)3.766
E 3.69(the of)69.336 735 R 3.691
(fset in the section containing DIEs, i.e. .deb)-.25 F 3.691
(ug_info, of the compilation-unit header of the)-.2 F(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(2-)-2.5 G 0 Cg
EP
%%Page: 63 63
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(3-)-2.5 G .854
(compilation-unit that contains the user)69.336 96 R(-def)-.2 E .853
(ined type described by the)-.2 F/F1 10/Courier@0 SF(Dwarf_Type)3.353 E
F0(descriptor)3.353 E(,)-.4 E F1(type)3.353 E F0 5.853(.I)C(t)-5.853 E
(returns)69.336 108 Q F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E 5(.I)-.55
G 2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr).25 G(eturns)-2.5 E F1
(DW_DLV_NO_ENTRY)2.5 E F0(.)A/F2 9/Times-Bold@0 SF 2.25(6.13.1.5 d)
69.336 137 R(warf_pubtype_name_offsets\(\))-.135 E F1
(int dwarf_pubtype_name_offsets\()69.336 155 Q 12(Dwarf_Type type,)
117.336 167 R 30(char **)117.336 179 R(returned_name,)6 E(Dwarf_Off *)
117.336 191 Q(die_offset,)12 E(Dwarf_Off *)117.336 203 Q(cu_offset,)12 E
(Dwarf_Error *error\))117.336 215 Q F0 .344(The function)69.336 233 R F1
(dwarf_pubtype_name_offsets\(\))2.844 E F0(returns)2.844 E F1(DW_DLV_OK)
2.844 E F0 .345(and sets)2.844 F F1(*returned_name)2.845 E F0 2.048
(to a pointer to a null-terminated string that gi)69.336 245 R -.15(ve)
-.25 G 4.548(st).15 G 2.048(he name of the user)-4.548 F(-def)-.2 E
2.047(ined type described by the)-.2 F F1(Dwarf_Type)69.336 257 Q F0
(descriptor)5.553 E F1(type)5.553 E F0 8.053(.I)C 5.553(ta)-8.053 G
3.053(lso returns in the locations pointed to by)-5.553 F F1(die_offset)
5.553 E F0 5.554(,a)C(nd)-5.554 E F1(cu_offset)69.336 269 Q F0 4.553(,t)
C 2.053(he of)-4.553 F 2.053(fsets of the DIE representing the user)-.25
F(-def)-.2 E 2.053(ined type, and the DIE representing the)-.2 F 1.45
(compilation-unit containing the user)69.336 281 R(-def)-.2 E 1.45
(ined type, respecti)-.2 F -.15(ve)-.25 G(ly).15 E 6.45(.I)-.65 G 3.95
(tr)-6.45 G(eturns)-3.95 E F1(DW_DLV_ERROR)3.95 E F0 1.45(on error)3.95
F 6.45(.I)-.55 G(t)-6.45 E(ne)69.336 293 Q -.15(ve)-.25 G 26.62(rr).15 G
(eturns)-26.62 E F1(DW_DLV_NO_ENTRY)26.62 E F0 29.12(.O)C 26.62(nas)
-29.12 G 24.12(uccessful return from)-26.62 F F1
(dwarf_pubtype_name_offsets\(\))69.336 305 Q F0 1.996
(the storage pointed to by)4.496 F F1(returned_name)4.497 E F0 1.997
(should be freed)4.497 F(using)69.336 317 Q F1(dwarf_dealloc\(\))2.5 E
F0 2.5(,w)C(ith the allocation type)-2.5 E F1(DW_DLA_STRING)2.5 E F0
(when no longer of interest.)2.5 E/F3 12/Times-Bold@0 SF 3(6.14 User)
69.336 363 R(Def)3 E(ined Static V)-.3 E(ariable Names Operations)-1.104
E F0(This section is SGI specif)69.336 381 Q
(ic and is not part of standard D)-.2 E -1.2(WA)-.3 G(RF v)1.2 E
(ersion 2.)-.15 E 5.752(These functions operate on the .deb)69.336 399 R
(ug_v)-.2 E 5.752(arnames section of the deb)-.25 F 5.751
(ugging information.)-.2 F(The)10.751 E(.deb)69.336 411 Q(ug_v)-.2 E
1.762(arnames section contains the names of f)-.25 F 1.762
(ile-scope static v)-.2 F 1.762(ariables, the of)-.25 F 1.762
(fsets of the)-.25 F F1(DIE)4.263 E F0 4.263(st)C(hat)-4.263 E 2.638
(represent the def)69.336 423 R 2.637(initions of those v)-.2 F 2.637
(ariables, and the of)-.25 F 2.637
(fsets of the compilation-units that contain the)-.25 F(def)69.336 435 Q
(initions of those v)-.2 E(ariables.)-.25 E F3 3(6.15 W)69.336 487 R
(eak Name Space Operations)-.78 E F0
(These operations operate on the .deb)69.336 505 Q
(ug_weaknames section of the deb)-.2 E(ugging information.)-.2 E
(These operations are SGI specif)69.336 523 Q
(ic, not part of standard D)-.2 E -1.2(WA)-.3 G(RF)1.2 E(.)-.8 E/F4 11
/Times-Bold@0 SF 2.75(6.15.1 Deb)69.336 562 R
(ugger Interface Operations)-.22 E F2 2.25(6.15.1.1 d)69.336 597 R
(warf_get_weaks\(\))-.135 E F1(int dwarf_get_weaks\()69.336 615 Q
(Dwarf_Debug dbg,)117.336 627 Q(Dwarf_Weak **weaks,)117.336 639 Q
(Dwarf_Signed *weak_count,)117.336 651 Q(Dwarf_Error *error\))117.336
663 Q F0 .188(The function)69.336 681 R F1(dwarf_get_weaks\(\))2.688 E
F0(returns)2.688 E F1(DW_DLV_OK)2.688 E F0 .188(and sets)2.688 F F1
(*weak_count)2.688 E F0 .189(to the count of weak)2.688 F 6.016
(names represented in the section containing weak names i.e. .deb)69.336
693 R 8.515(ug_weaknames. It)-.2 F(returns)8.515 E F1(DW_DLV_ERROR)
69.336 705 Q F0 .66(on error)3.16 F 5.66(.I)-.55 G 3.16(tr)-5.66 G
(eturns)-3.16 E F1(DW_DLV_NO_ENTRY)3.16 E F0 .66
(if the section does not e)3.16 F 3.16(xist. It)-.15 F .66
(also stores in)3.16 F F1(*weaks)69.336 717 Q F0 5.292(,ap)C 2.791
(ointer to a list of)-5.292 F F1(Dwarf_Weak)5.291 E F0 2.791
(descriptors, one for each of the weak names in the)5.291 F(.deb)69.336
729 Q(ug_weaknames section.)-.2 E
(The returned results are for the entire section.)5 E(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(3-)-2.5 G 0 Cg
EP
%%Page: 64 64
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(4-)-2.5 G 4.132
(On a successful return from this function, the)69.336 96 R/F1 10
/Courier@0 SF(Dwarf_Weak)6.632 E F0 4.133
(descriptors should be freed using)6.632 F F1(dwarf_weaks_dealloc\(\))
69.336 108 Q F0 1.7(when the data is no longer of interest.)4.2 F F1
(dwarf_weaks_dealloc\(\))6.7 E F0(is)A(ne)69.336 120 Q 2.5(wa)-.25 G 2.5
(so)-2.5 G 2.5(fJ)-2.5 G(uly 15, 2005.)-2.5 E F1
(void exampleh\(Dwarf_Debug dbg\))89.336 150 Q({)89.336 162 Q
(Dwarf_Error error = 0;)101.336 174 Q(Dwarf_Signed count = 0;)101.336
186 Q(Dwarf_Weak *weaks = 0;)101.336 198 Q(Dwarf_Signed i = 0;)101.336
210 Q(int res = 0;)101.336 222 Q
(res = dwarf_get_weaks\(dbg, &weaks, &count, &error\);)101.336 246 Q
(if \(res == DW_DLV_OK\) {)101.336 258 Q
(for \(i = 0; i < count; ++i\) {)113.336 270 Q(/* use weaks[i] */)
125.336 282 Q(})113.336 294 Q(dwarf_weaks_dealloc\(dbg, weaks, count\);)
113.336 306 Q(})101.336 318 Q(})89.336 330 Q F0 .066(The follo)69.336
390 R .066(wing code is deprecated as of July 15, 2005 as it does not f\
ree all rele)-.25 F -.25(va)-.25 G .067(nt memory).25 F 5.067(.T)-.65 G
.067(his approach)-5.067 F .388(still w)69.336 402 R .388
(orks as well as it e)-.1 F -.15(ve)-.25 G 2.888(rd).15 G 2.888(id. On)
-2.888 F 2.888(as)2.888 G .388(uccessful return from)-2.888 F F1
(dwarf_get_weaks\(\))2.888 E F0(the)2.888 E F1(Dwarf_Weak)2.888 E F0
6.005(descriptors should be indi)69.336 414 R 6.005
(vidually freed using)-.25 F F1(dwarf_dealloc\(\))8.505 E F0 6.005
(with the allocation type)8.505 F F1(DW_DLA_WEAK_CONTEXT)69.336 426 Q F0
2.812(,\()C(or)-2.812 E F1(DW_DLA_WEAK)2.812 E F0 2.812(,a)C 2.812(no)
-2.812 G .312(lder name, supported for compatibility\) follo)-2.812 F
.312(wed by)-.25 F 1.866
(the deallocation of the list itself with the allocation type)69.336 438
R F1(DW_DLA_LIST)4.366 E F0 1.866(when the descriptors are no)4.366 F
(longer of interest.)69.336 450 Q F1(void examplei\(Dwarf_Debug dbg\))
89.336 480 Q({)89.336 492 Q(Dwarf_Error error = 0;)101.336 504 Q
(Dwarf_Signed count = 0;)101.336 516 Q(Dwarf_Weak *weaks = 0;)101.336
528 Q(Dwarf_Signed i = 0;)101.336 540 Q(int res = 0;)101.336 552 Q
(res = dwarf_get_weaks\(dbg, &weaks, &count, &error\);)101.336 576 Q
(if \(res == DW_DLV_OK\) {)101.336 588 Q
(/* OBSOLETE: do not use dealloc for this.)113.336 600 Q(See above */)
131.336 612 Q(for \(i = 0; i < count; ++i\) {)113.336 624 Q
(/* use weaks[i] */)125.336 636 Q
(dwarf_dealloc\(dbg, weaks[i], DW_DLA_WEAK\);)125.336 648 Q(})113.336
660 Q(dwarf_dealloc\(dbg, weaks, DW_DLA_LIST\);)113.336 672 Q(})101.336
684 Q(})89.336 696 Q F0(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)
-2.5 E 2.5(-6)120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 65 65
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(5-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.15.1.2 d)69.336 95 R(warf_weakname\(\))-.135 E
/F2 10/Courier@0 SF(int dwarf_weakname\()69.336 113 Q(Dwarf_Weak weak,)
117.336 125 Q 18(char **)117.336 137 R(return_name,)6 E
(Dwarf_Error *error\))117.336 149 Q F0 1.762(The function)69.336 167 R
F2(dwarf_weakname\(\))4.262 E F0(returns)4.262 E F2(DW_DLV_OK)4.262 E F0
1.762(and sets)4.262 F F2(*return_name)4.262 E F0 1.761
(to a pointer to a)4.262 F 1.078
(null-terminated string that names the weak name represented by the)
69.336 179 R F2(Dwarf_Weak)3.579 E F0(descriptor)3.579 E(,)-.4 E F2
(weak)3.579 E F0 6.079(.I)C(t)-6.079 E(returns)69.336 191 Q F2
(DW_DLV_ERROR)3.882 E F0 1.382(on error)3.882 F 6.382(.I)-.55 G 3.882
(tn)-6.382 G -2.15 -.25(ev e)-3.882 H 3.882(rr).25 G(eturns)-3.882 E F2
(DW_DLV_NO_ENTRY)3.882 E F0 6.382(.O)C 3.881(nas)-6.382 G 1.381
(uccessful return from)-3.881 F 4.936
(this function, the string should be freed using)69.336 203 R F2
(dwarf_dealloc\(\))7.437 E F0 7.437(,w)C 4.937(ith the allocation type)
-7.437 F F2(DW_DLA_STRING)69.336 215 Q F0(when no longer of interest.)
2.5 E F2(int dwarf_weak_die_offset\()69.336 245 Q(Dwarf_Weak weak,)
117.336 257 Q 6(Dwarf_Off *return_offset,)117.336 269 R
(Dwarf_Error *error\))117.336 281 Q F0 .824(The function)69.336 299 R F2
(dwarf_weak_die_offset\(\))3.324 E F0(returns)3.324 E F2(DW_DLV_OK)3.323
E F0 .823(and sets)3.323 F F2(*return_offset)3.323 E F0 .823(to the)
3.323 F(of)69.336 311 Q 1.876
(fset in the section containing DIEs, i.e. .deb)-.25 F 1.876
(ug_info, of the DIE representing the weak name that is)-.2 F .956
(described by the)69.336 323 R F2(Dwarf_Weak)3.456 E F0(descriptor)3.456
E(,)-.4 E F2(weak)3.456 E F0 5.955(.I)C 3.455(tr)-5.955 G(eturns)-3.455
E F2(DW_DLV_ERROR)3.455 E F0 .955(on error)3.455 F 5.955(.I)-.55 G 3.455
(tn)-5.955 G -2.15 -.25(ev e)-3.455 H 3.455(rr).25 G(eturns)-3.455 E F2
(DW_DLV_NO_ENTRY)69.336 335 Q F0(.)A F1 2.25(6.15.1.3 d)69.336 364 R
(warf_weak_cu_offset\(\))-.135 E F2(int dwarf_weak_cu_offset\()69.336
382 Q(Dwarf_Weak weak,)117.336 394 Q 6(Dwarf_Off *return_offset,)117.336
406 R(Dwarf_Error *error\))117.336 418 Q F0 1.49(The function)69.336 436
R F2(dwarf_weak_cu_offset\(\))3.99 E F0(returns)3.99 E F2(DW_DLV_OK)3.99
E F0 1.49(and sets)3.99 F F2(*return_offset)3.99 E F0 1.49(to the)3.99 F
(of)69.336 448 Q .913(fset in the section containing DIEs, i.e. .deb)
-.25 F .913(ug_info, of the compilation-unit header of the compilation-)
-.2 F 4.24(unit that contains the weak name described by the)69.336 460
R F2(Dwarf_Weak)6.74 E F0(descriptor)6.74 E(,)-.4 E F2(weak)6.74 E F0
9.24(.I)C 6.74(tr)-9.24 G(eturns)-6.74 E F2(DW_DLV_ERROR)69.336 472 Q F0
(on error)2.5 E 5(.I)-.55 G 2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr)
.25 G(eturns)-2.5 E F2(DW_DLV_NO_ENTRY)2.5 E F0(.)A F1 2.25(6.15.1.4 d)
69.336 501 R(warf_weak_name_offsets\(\))-.135 E F2
(int dwarf_weak_name_offsets\()69.336 519 Q(Dwarf_Weak weak,)117.336 531
Q(char **)117.336 543 Q(weak_name,)12 E(Dwarf_Off *die_offset,)117.336
555 Q(Dwarf_Off *cu_offset,)117.336 567 Q(Dwarf_Error *error\))117.336
579 Q F0 3.022(The function)69.336 597 R F2(dwarf_weak_name_offsets\(\))
5.521 E F0(returns)5.521 E F2(DW_DLV_OK)5.521 E F0 3.021(and sets)5.521
F F2(*weak_name)5.521 E F0 3.021(to a)5.521 F .848
(pointer to a null-terminated string that gi)69.336 609 R -.15(ve)-.25 G
3.348(st).15 G .848(he name of the weak name described by the)-3.348 F
F2(Dwarf_Weak)3.349 E F0(descriptor)69.336 621 Q F2(weak)4.534 E F0
7.034(.I)C 4.534(ta)-7.034 G 2.034
(lso returns in the locations pointed to by)-4.534 F F2(die_offset)4.533
E F0 4.533(,a)C(nd)-4.533 E F2(cu_offset)4.533 E F0 4.533(,t)C(he)-4.533
E(of)69.336 633 Q .028(fsets of the DIE representing the weakname, and \
the DIE representing the compilation-unit containing the)-.25 F .391
(weakname, respecti)69.336 645 R -.15(ve)-.25 G(ly).15 E 5.391(.I)-.65 G
2.891(tr)-5.391 G(eturns)-2.891 E F2(DW_DLV_ERROR)2.891 E F0 .391
(on error)2.891 F 5.391(.I)-.55 G 2.891(tn)-5.391 G -2.15 -.25(ev e)
-2.891 H 2.891(rr).25 G(eturns)-2.891 E F2(DW_DLV_NO_ENTRY)2.891 E F0
5.39(.O)C(n)-5.39 E 5.026(as)69.336 657 S 2.526(uccessful return from)
-5.026 F F2(dwarf_weak_name_offsets\(\))5.026 E F0 2.526
(the storage pointed to by)5.026 F F2(weak_name)5.026 E F0 .776
(should be freed using)69.336 669 R F2(dwarf_dealloc\(\))3.276 E F0
3.276(,w)C .776(ith the allocation type)-3.276 F F2(DW_DLA_STRING)3.276
E F0 .775(when no longer)3.276 F(of interest.)69.336 681 Q/F3 12
/Times-Bold@0 SF 3(6.16 Static)69.336 715 R(Function Names Operations)3
E F0(This section is SGI specif)69.336 733 Q
(ic and is not part of standard D)-.2 E -1.2(WA)-.3 G(RF v)1.2 E
(ersion 2.)-.15 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E
2.5(-6)120.71 G 2.5(5-)-2.5 G 0 Cg EP
%%Page: 66 66
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(6-)-2.5 G 5.628
(These function operate on the .deb)69.336 96 R 5.628
(ug_funcnames section of the deb)-.2 F 5.629(ugging information.)-.2 F
(The)10.629 E(.deb)69.336 108 Q 1.163
(ug_funcnames section contains the names of static functions def)-.2 F
1.162(ined in the object, the of)-.2 F 1.162(fsets of the)-.25 F/F1 10
/Courier@0 SF(DIE)69.336 120 Q F0 4.674(st)C 2.174
(hat represent the def)-4.674 F 2.174
(initions of the corresponding functions, and the of)-.2 F 2.175
(fsets of the start of the)-.25 F
(compilation-units that contain the def)69.336 132 Q
(initions of those functions.)-.2 E/F2 11/Times-Bold@0 SF 2.75
(6.16.1 Deb)69.336 165 R(ugger Interface Operations)-.22 E/F3 9
/Times-Bold@0 SF 2.25(6.16.1.1 d)69.336 200 R(warf_get_funcs\(\))-.135 E
F1(int dwarf_get_funcs\()69.336 218 Q(Dwarf_Debug dbg,)117.336 230 Q
(Dwarf_Func **funcs,)117.336 242 Q(Dwarf_Signed *func_count,)117.336 254
Q(Dwarf_Error *error\))117.336 266 Q F0 .188(The function)69.336 284 R
F1(dwarf_get_funcs\(\))2.688 E F0(returns)2.688 E F1(DW_DLV_OK)2.688 E
F0 .188(and sets)2.688 F F1(*func_count)2.687 E F0 .187
(to the count of static)2.687 F .538(function names represented in the \
section containing static function names, i.e. .deb)69.336 296 R 3.038
(ug_funcnames. It)-.2 F(also)3.038 E .692(stores, at)69.336 308 R F1
(*funcs)3.192 E F0 3.191(,ap)C .691(ointer to a list of)-3.191 F F1
(Dwarf_Func)3.191 E F0 .691
(descriptors, one for each of the static functions in)3.191 F .449
(the .deb)69.336 320 R .449(ug_funcnames section.)-.2 F .449
(The returned results are for the entire section.)5.449 F .45
(It returns)5.45 F F1(DW_DLV_ERROR)2.95 E F0(on error)69.336 332 Q 5(.I)
-.55 G 2.5(tr)-5 G(eturns)-2.5 E F1(DW_DLV_NO_ENTRY)2.5 E F0
(if the .deb)2.5 E(ug_funcnames section does not e)-.2 E(xist.)-.15 E
.167(On a successful return from)69.336 350 R F1(dwarf_get_funcs\(\))
2.667 E F0 2.667(,t)C(he)-2.667 E F1(Dwarf_Func)2.667 E F0 .166
(descriptors should be freed using)2.667 F F1(dwarf_funcs_dealloc\(\))
69.336 362 Q F0(.)A F1(dwarf_funcs_dealloc\(\))5 E F0(is ne)2.5 E 2.5
(wa)-.25 G 2.5(so)-2.5 G 2.5(fJ)-2.5 G(uly 15, 2005.)-2.5 E F1
(void examplej\(Dwarf_Debug dbg\))89.336 392 Q({)89.336 404 Q
(Dwarf_Error error = 0;)101.336 416 Q(Dwarf_Signed count = 0;)101.336
428 Q(Dwarf_Func *funcs = 0;)101.336 440 Q(Dwarf_Signed i = 0;)101.336
452 Q(int fres = 0;)101.336 464 Q
(fres = dwarf_get_funcs\(dbg, &funcs, &count, &error\);)101.336 488 Q
(if \(fres == DW_DLV_OK\) {)101.336 500 Q
(for \(i = 0; i < count; ++i\) {)113.336 512 Q(/* use funcs[i] */)
125.336 524 Q(})113.336 536 Q(dwarf_funcs_dealloc\(dbg, funcs, count\);)
113.336 548 Q(})101.336 560 Q(})89.336 572 Q F0 .066(The follo)69.336
620 R .066(wing code is deprecated as of July 15, 2005 as it does not f\
ree all rele)-.25 F -.25(va)-.25 G .067(nt memory).25 F 5.067(.T)-.65 G
.067(his approach)-5.067 F .222(still w)69.336 632 R .222
(orks as well as it e)-.1 F -.15(ve)-.25 G 2.721(rd).15 G 2.721(id. On)
-2.721 F 2.721(as)2.721 G .221(uccessful return from)-2.721 F F1
(dwarf_get_funcs\(\))2.721 E F0 2.721(,t)C(he)-2.721 E F1(Dwarf_Func)
2.721 E F0 6.005(descriptors should be indi)69.336 644 R 6.005
(vidually freed using)-.25 F F1(dwarf_dealloc\(\))8.505 E F0 6.005
(with the allocation type)8.505 F F1(DW_DLA_FUNC_CONTEXT)69.336 656 Q F0
2.812(,\()C(or)-2.812 E F1(DW_DLA_FUNC)2.812 E F0 2.812(,a)C 2.812(no)
-2.812 G .312(lder name, supported for compatibility\) follo)-2.812 F
.312(wed by)-.25 F 1.866
(the deallocation of the list itself with the allocation type)69.336 668
R F1(DW_DLA_LIST)4.366 E F0 1.866(when the descriptors are no)4.366 F
(longer of interest.)69.336 680 Q(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(6-)-2.5 G 0 Cg EP
%%Page: 67 67
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(7-)-2.5 G/F1 10
/Courier@0 SF(void examplek\(Dwarf_Debug dbg\))89.336 96 Q({)89.336 108
Q(Dwarf_Error error = 0;)101.336 120 Q(Dwarf_Func *funcs = 0;)101.336
132 Q(Dwarf_Signed count = 0;)101.336 144 Q(Dwarf_Signed i = 0;)101.336
156 Q(int fres = 0;)101.336 168 Q
(fres = dwarf_get_funcs\(dbg, &funcs,&count, &error\);)101.336 192 Q
(if \(fres == DW_DLV_OK\) {)101.336 204 Q
(/* OBSOLETE: see dwarf_funcs_dealloc\(\) above */)113.336 216 Q
(for \(i = 0; i < count; ++i\) {)113.336 228 Q(/* use funcs[i] */)
125.336 240 Q(dwarf_dealloc\(dbg, funcs[i], DW_DLA_FUNC\);)125.336 252 Q
(})113.336 264 Q(dwarf_dealloc\(dbg, funcs, DW_DLA_LIST\);)113.336 276 Q
(})101.336 288 Q(})89.336 300 Q/F2 9/Times-Bold@0 SF 2.25(6.16.1.2 d)
69.336 335 R(warf_funcname\(\))-.135 E F1(int dwarf_funcname\()69.336
353 Q(Dwarf_Func func,)117.336 365 Q(char **)117.336 377 Q(return_name,)
24 E(Dwarf_Error *error\))117.336 389 Q F0 1.762(The function)69.336 407
R F1(dwarf_funcname\(\))4.262 E F0(returns)4.262 E F1(DW_DLV_OK)4.262 E
F0 1.762(and sets)4.262 F F1(*return_name)4.262 E F0 1.761
(to a pointer to a)4.262 F .18(null-terminated string that names the st\
atic function represented by the)69.336 419 R F1(Dwarf_Func)2.68 E F0
(descriptor)2.68 E(,)-.4 E F1(func)2.68 E F0 5.18(.I)C(t)-5.18 E
(returns)69.336 431 Q F1(DW_DLV_ERROR)3.882 E F0 1.382(on error)3.882 F
6.382(.I)-.55 G 3.882(tn)-6.382 G -2.15 -.25(ev e)-3.882 H 3.882(rr).25
G(eturns)-3.882 E F1(DW_DLV_NO_ENTRY)3.882 E F0 6.382(.O)C 3.881(nas)
-6.382 G 1.381(uccessful return from)-3.881 F 4.936
(this function, the string should be freed using)69.336 443 R F1
(dwarf_dealloc\(\))7.437 E F0 7.437(,w)C 4.937(ith the allocation type)
-7.437 F F1(DW_DLA_STRING)69.336 455 Q F0(when no longer of interest.)
2.5 E F2 2.25(6.16.1.3 d)69.336 484 R(warf_func_die_offset\(\))-.135 E
F1(int dwarf_func_die_offset\()69.336 502 Q(Dwarf_Func func,)117.336 514
Q 6(Dwarf_Off *return_offset,)117.336 526 R(Dwarf_Error *error\))117.336
538 Q F0 .546(The function)69.336 556 R F1(dwarf_func_die_offset\(\))
3.046 E F0 3.046(,r)C(eturns)-3.046 E F1(DW_DLV_OK)3.046 E F0 .545
(and sets)3.046 F F1(*return_offset)3.045 E F0 .545(to the)3.045 F(of)
69.336 568 Q 1.146(fset in the section containing DIEs, i.e. .deb)-.25 F
1.146(ug_info, of the DIE representing the static function that is)-.2 F
.956(described by the)69.336 580 R F1(Dwarf_Func)3.456 E F0(descriptor)
3.456 E(,)-.4 E F1(func)3.456 E F0 5.955(.I)C 3.455(tr)-5.955 G(eturns)
-3.455 E F1(DW_DLV_ERROR)3.455 E F0 .955(on error)3.455 F 5.955(.I)-.55
G 3.455(tn)-5.955 G -2.15 -.25(ev e)-3.455 H 3.455(rr).25 G(eturns)
-3.455 E F1(DW_DLV_NO_ENTRY)69.336 592 Q F0(.)A F2 2.25(6.16.1.4 d)
69.336 621 R(warf_func_cu_offset\(\))-.135 E F1
(int dwarf_func_cu_offset\()69.336 639 Q(Dwarf_Func func,)117.336 651 Q
6(Dwarf_Off *return_offset,)117.336 663 R(Dwarf_Error *error\))117.336
675 Q F0 1.49(The function)69.336 693 R F1(dwarf_func_cu_offset\(\))3.99
E F0(returns)3.99 E F1(DW_DLV_OK)3.99 E F0 1.49(and sets)3.99 F F1
(*return_offset)3.99 E F0 1.49(to the)3.99 F(of)69.336 705 Q .913
(fset in the section containing DIEs, i.e. .deb)-.25 F .913
(ug_info, of the compilation-unit header of the compilation-)-.2 F 3.341
(unit that contains the static function described by the)69.336 717 R F1
(Dwarf_Func)5.842 E F0(descriptor)5.842 E(,)-.4 E F1(func)5.842 E F0
8.342(.I)C 5.842(tr)-8.342 G(eturns)-5.842 E F1(DW_DLV_ERROR)69.336 729
Q F0(on error)2.5 E 5(.I)-.55 G 2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5
(rr).25 G(eturns)-2.5 E F1(DW_DLV_NO_ENTRY)2.5 E F0(.)A(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(7-)-2.5 G 0 Cg
EP
%%Page: 68 68
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(8-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.16.1.5 d)69.336 95 R(warf_func_name_offsets\(\))
-.135 E/F2 10/Courier@0 SF(int dwarf_func_name_offsets\()69.336 113 Q
(Dwarf_Func func,)117.336 125 Q 24(char **func_name,)117.336 137 R
(Dwarf_Off *die_offset,)117.336 149 Q(Dwarf_Off *cu_offset,)117.336 161
Q(Dwarf_Error *error\))117.336 173 Q F0 3.022(The function)69.336 191 R
F2(dwarf_func_name_offsets\(\))5.521 E F0(returns)5.521 E F2(DW_DLV_OK)
5.521 E F0 3.021(and sets)5.521 F F2(*func_name)5.521 E F0 3.021(to a)
5.521 F .118(pointer to a null-terminated string that gi)69.336 203 R
-.15(ve)-.25 G 2.618(st).15 G .118
(he name of the static function described by the)-2.618 F F2(Dwarf_Func)
2.619 E F0(descriptor)69.336 215 Q F2(func)4.534 E F0 7.034(.I)C 4.534
(ta)-7.034 G 2.034(lso returns in the locations pointed to by)-4.534 F
F2(die_offset)4.533 E F0 4.533(,a)C(nd)-4.533 E F2(cu_offset)4.533 E F0
4.533(,t)C(he)-4.533 E(of)69.336 227 Q .066(fsets of the DIE representi\
ng the static function, and the DIE representing the compilation-unit c\
ontaining)-.25 F 7.966(the static function, respecti)69.336 239 R -.15
(ve)-.25 G(ly).15 E 12.966(.I)-.65 G 10.466(tr)-12.966 G(eturns)-10.466
E F2(DW_DLV_ERROR)10.465 E F0 7.965(on error)10.465 F 12.965(.I)-.55 G
10.465(tn)-12.965 G -2.15 -.25(ev e)-10.465 H 10.465(rr).25 G(eturns)
-10.465 E F2(DW_DLV_NO_ENTRY)69.336 251 Q F0 8.102(.O)C 5.602(nas)-8.102
G 3.102(uccessful return from)-5.602 F F2(dwarf_func_name_offsets\(\))
5.603 E F0 3.103(the storage)5.603 F 3.354(pointed to by)69.336 263 R F2
(func_name)8.354 E F0 3.353(should be freed using)5.854 F F2
(dwarf_dealloc\(\))5.853 E F0 5.853(,w)C 3.353(ith the allocation type)
-5.853 F F2(DW_DLA_STRING)69.336 275 Q F0(when no longer of interest.)
2.5 E/F3 12/Times-Bold@0 SF 3(6.17 User)69.336 309 R(Def)3 E(ined T)-.3
E(ype Names Operations)-.408 E F0 .948(Section "deb)69.336 327 R .948
(ug_typenames" is SGI specif)-.2 F .949
(ic and is not part of standard D)-.2 F -1.2(WA)-.3 G .949(RF v)1.2 F
.949(ersion 2.)-.15 F(\(Ho)5.949 E(we)-.25 E -.15(ve)-.25 G 1.749 -.4
(r, a).15 H(n).4 E .168(identical section is part of D)69.336 339 R -1.2
(WA)-.3 G .167(RF v)1.2 F .167(ersion 3 named ".deb)-.15 F .167
(ug_pubtypes", see)-.2 F F2(dwarf_get_pubtypes\(\))5.167 E F0(abo)69.336
351 Q -.15(ve)-.15 G(.\)).15 E 5.324
(These functions operate on the .deb)69.336 369 R 5.325
(ug_typenames section of the deb)-.2 F 5.325(ugging information.)-.2 F
(The)10.325 E(.deb)69.336 381 Q .446
(ug_typenames section contains the names of f)-.2 F .446(ile-scope user)
-.2 F(-def)-.2 E .446(ined types, the of)-.2 F .445(fsets of the)-.25 F
F2(DIE)2.945 E F0 2.945(st)C(hat)-2.945 E .438(represent the def)69.336
393 R .438(initions of those types, and the of)-.2 F .439
(fsets of the compilation-units that contain the def)-.25 F(initions)-.2
E(of those types.)69.336 405 Q/F4 11/Times-Bold@0 SF 2.75(6.17.1 Deb)
69.336 438 R(ugger Interface Operations)-.22 E F1 2.25(6.17.1.1 d)69.336
473 R(warf_get_types\(\))-.135 E F2(int dwarf_get_types\()69.336 491 Q
(Dwarf_Debug dbg,)117.336 503 Q(Dwarf_Type **types,)117.336 515 Q
(Dwarf_Signed *typecount,)117.336 527 Q(Dwarf_Error *error\))117.336 539
Q F0 .798(The function)69.336 557 R F2(dwarf_get_types\(\))3.298 E F0
(returns)3.298 E F2(DW_DLV_OK)3.298 E F0 .798(and sets)3.298 F F2
(*typecount)3.297 E F0 .797(to the count of user)3.297 F(-)-.2 E(def)
69.336 569 Q .726
(ined type names represented in the section containing user)-.2 F(-def)
-.2 E .727(ined type names, i.e. .deb)-.2 F(ug_typenames.)-.2 E .514
(It also stores at)69.336 581 R F2(*types)3.014 E F0 3.014(,ap)C .514
(ointer to a list of)-3.014 F F2(Dwarf_Type)3.014 E F0 .514
(descriptors, one for each of the user)3.014 F(-def)-.2 E(ined)-.2 E
1.522(type names in the .deb)69.336 593 R 1.522(ug_typenames section.)
-.2 F 1.523(The returned results are for the entire section.)6.523 F
1.523(It returns)6.523 F F2(DW_DLV_NOCOUNT)69.336 605 Q F0 .951
(on error)3.451 F 5.951(.I)-.55 G 3.451(tr)-5.951 G(eturns)-3.451 E F2
(DW_DLV_NO_ENTRY)3.451 E F0 .951(if the .deb)3.451 F .951
(ug_typenames section does not)-.2 F -.15(ex)69.336 617 S(ist.).15 E
.166(On a successful return from)69.336 659 R F2(dwarf_get_types\(\))
2.667 E F0 2.667(,t)C(he)-2.667 E F2(Dwarf_Type)2.667 E F0 .167
(descriptors should be freed using)2.667 F F2(dwarf_types_dealloc\(\))
69.336 671 Q F0(.)A F2(dwarf_types_dealloc\(\))6.339 E F0 1.338(is ne)
3.839 F 3.838(wa)-.25 G 3.838(so)-3.838 G 3.838(fJ)-3.838 G 1.338
(uly 15, 2005 and frees all)-3.838 F(memory allocated by)69.336 683 Q F2
(dwarf_get_types\(\))2.5 E F0(.)A(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(8-)-2.5 G 0 Cg EP
%%Page: 69 69
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-6)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(void examplel\(Dwarf_Debug dbg\))89.336 96 Q({)89.336 108
Q(Dwarf_Error error = 0;)101.336 120 Q(Dwarf_Signed count = 0;)101.336
132 Q(Dwarf_Type *types = 0;)101.336 144 Q(Dwarf_Signed i = 0;)101.336
156 Q(int res = 0;)101.336 168 Q
(res = dwarf_get_types\(dbg, &types,&count, &error\);)101.336 192 Q
(if \(res == DW_DLV_OK\) {)101.336 204 Q
(for \(i = 0; i < count; ++i\) {)113.336 216 Q(/* use types[i] */)
125.336 228 Q(})113.336 240 Q(dwarf_types_dealloc\(dbg, types, count\);)
113.336 252 Q(})101.336 264 Q(})89.336 276 Q F0 .066(The follo)69.336
336 R .066(wing code is deprecated as of July 15, 2005 as it does not f\
ree all rele)-.25 F -.25(va)-.25 G .067(nt memory).25 F 5.067(.T)-.65 G
.067(his approach)-5.067 F .222(still w)69.336 348 R .222
(orks as well as it e)-.1 F -.15(ve)-.25 G 2.721(rd).15 G 2.721(id. On)
-2.721 F 2.721(as)2.721 G .221(uccessful return from)-2.721 F F1
(dwarf_get_types\(\))2.721 E F0 2.721(,t)C(he)-2.721 E F1(Dwarf_Type)
2.721 E F0 6.005(descriptors should be indi)69.336 360 R 6.005
(vidually freed using)-.25 F F1(dwarf_dealloc\(\))8.505 E F0 6.005
(with the allocation type)8.505 F F1(DW_DLA_TYPENAME_CONTEXT)69.336 372
Q F0 3.178(,\()C(or)-3.178 E F1(DW_DLA_TYPENAME)3.178 E F0 3.178(,a)C
3.178(no)-3.178 G .677(lder name, supported for compatibility\))-3.178 F
(follo)69.336 384 Q .327
(wed by the deallocation of the list itself with the allocation type)
-.25 F F1(DW_DLA_LIST)2.827 E F0 .327(when the descriptors)2.827 F
(are no longer of interest.)69.336 396 Q F1
(void examplem\(Dwarf_Debug dbg\))89.336 426 Q({)89.336 438 Q
(Dwarf_Error error = 0;)101.336 450 Q(Dwarf_Signed count = 0;)101.336
462 Q(Dwarf_Type *types = 0;)101.336 474 Q(Dwarf_Signed i = 0;)101.336
486 Q(int res = 0;)101.336 498 Q 6(/* OBSOLETE:)101.336 522 R
(see dwarf_types_dealloc\(\) above */)6 E
(res = dwarf_get_types\(dbg, &types,&count, &error\);)101.336 534 Q
(if \(res == DW_DLV_OK\) {)101.336 546 Q
(for \(i = 0; i < count; ++i\) {)113.336 558 Q(/* use types[i] */)
125.336 570 Q(dwarf_dealloc\(dbg, types[i], DW_DLA_TYPENAME\);)125.336
582 Q(})113.336 594 Q(dwarf_dealloc\(dbg, types, DW_DLA_LIST\);)113.336
606 Q(})101.336 618 Q(})89.336 630 Q/F2 9/Times-Bold@0 SF 2.25
(6.17.1.2 d)69.336 665 R(warf_typename\(\))-.135 E F1
(int dwarf_typename\()69.336 683 Q 12(Dwarf_Type type,)117.336 695 R 36
(char **return_name,)117.336 707 R(Dwarf_Error *error\))117.336 719 Q F0
1.762(The function)69.336 737 R F1(dwarf_typename\(\))4.262 E F0
(returns)4.262 E F1(DW_DLV_OK)4.262 E F0 1.762(and sets)4.262 F F1
(*return_name)4.262 E F0 1.761(to a pointer to a)4.262 F(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-6)120.71 G 2.5(9-)-2.5 G 0 Cg
EP
%%Page: 70 70
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(0-)-2.5 G .091
(null-terminated string that names the user)69.336 96 R(-def)-.2 E .091
(ined type represented by the)-.2 F/F1 10/Courier@0 SF(Dwarf_Type)2.591
E F0(descriptor)2.591 E(,)-.4 E F1(type)2.591 E F0(.)A .614(It returns)
69.336 108 R F1(DW_DLV_ERROR)3.113 E F0 .613(on error)3.113 F 5.613(.I)
-.55 G 3.113(tn)-5.613 G -2.15 -.25(ev e)-3.113 H 3.113(rr).25 G(eturns)
-3.113 E F1(DW_DLV_NO_ENTRY)3.113 E F0 5.613(.O)C 3.113(nas)-5.613 G
.613(uccessful return from)-3.113 F 4.936
(this function, the string should be freed using)69.336 120 R F1
(dwarf_dealloc\(\))7.437 E F0 7.437(,w)C 4.937(ith the allocation type)
-7.437 F F1(DW_DLA_STRING)69.336 132 Q F0(when no longer of interest.)
2.5 E/F2 9/Times-Bold@0 SF 2.25(6.17.1.3 d)69.336 161 R
(warf_type_die_offset\(\))-.135 E F1(int dwarf_type_die_offset\()69.336
179 Q(Dwarf_Type type,)117.336 191 Q 6(Dwarf_Off *return_offset,)117.336
203 R(Dwarf_Error *error\))117.336 215 Q F0 .824(The function)69.336 233
R F1(dwarf_type_die_offset\(\))3.324 E F0(returns)3.324 E F1(DW_DLV_OK)
3.323 E F0 .823(and sets)3.323 F F1(*return_offset)3.323 E F0 .823
(to the)3.323 F(of)69.336 245 Q .373
(fset in the section containing DIEs, i.e. .deb)-.25 F .374
(ug_info, of the DIE representing the user)-.2 F(-def)-.2 E .374
(ined type that is)-.2 F .956(described by the)69.336 257 R F1
(Dwarf_Type)3.456 E F0(descriptor)3.456 E(,)-.4 E F1(type)3.456 E F0
5.955(.I)C 3.455(tr)-5.955 G(eturns)-3.455 E F1(DW_DLV_ERROR)3.455 E F0
.955(on error)3.455 F 5.955(.I)-.55 G 3.455(tn)-5.955 G -2.15 -.25(ev e)
-3.455 H 3.455(rr).25 G(eturns)-3.455 E F1(DW_DLV_NO_ENTRY)69.336 269 Q
F0(.)A F2 2.25(6.17.1.4 d)69.336 298 R(warf_type_cu_offset\(\))-.135 E
F1(int dwarf_type_cu_offset\()69.336 316 Q(Dwarf_Type type,)117.336 328
Q 6(Dwarf_Off *return_offset,)117.336 340 R(Dwarf_Error *error\))117.336
352 Q F0 1.49(The function)69.336 370 R F1(dwarf_type_cu_offset\(\))3.99
E F0(returns)3.99 E F1(DW_DLV_OK)3.99 E F0 1.49(and sets)3.99 F F1
(*return_offset)3.99 E F0 1.49(to the)3.99 F(of)69.336 382 Q .913
(fset in the section containing DIEs, i.e. .deb)-.25 F .913
(ug_info, of the compilation-unit header of the compilation-)-.2 F 2.39
(unit that contains the user)69.336 394 R(-def)-.2 E 2.391
(ined type described by the)-.2 F F1(Dwarf_Type)4.891 E F0(descriptor)
4.891 E(,)-.4 E F1(type)4.891 E F0 7.391(.I)C 4.891(tr)-7.391 G(eturns)
-4.891 E F1(DW_DLV_ERROR)69.336 406 Q F0(on error)2.5 E 5(.I)-.55 G 2.5
(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr).25 G(eturns)-2.5 E F1
(DW_DLV_NO_ENTRY)2.5 E F0(.)A F2 2.25(6.17.1.5 d)69.336 435 R
(warf_type_name_offsets\(\))-.135 E F1(int dwarf_type_name_offsets\()
69.336 453 Q 12(Dwarf_Type type,)117.336 465 R 30(char **)117.336 477 R
(returned_name,)6 E(Dwarf_Off *)117.336 489 Q(die_offset,)12 E
(Dwarf_Off *)117.336 501 Q(cu_offset,)12 E(Dwarf_Error *error\))117.336
513 Q F0 .355(The function)69.336 531 R F1(dwarf_type_name_offsets\(\))
2.855 E F0(returns)2.855 E F1(DW_DLV_OK)2.855 E F0 .354(and sets)2.854 F
F1(*returned_name)2.854 E F0 .354(to a)2.854 F 3.468
(pointer to a null-terminated string that gi)69.336 543 R -.15(ve)-.25 G
5.969(st).15 G 3.469(he name of the user)-5.969 F(-def)-.2 E 3.469
(ined type described by the)-.2 F F1(Dwarf_Type)69.336 555 Q F0
(descriptor)5.554 E F1(type)5.553 E F0 8.053(.I)C 5.553(ta)-8.053 G
3.053(lso returns in the locations pointed to by)-5.553 F F1(die_offset)
5.553 E F0 5.553(,a)C(nd)-5.553 E F1(cu_offset)69.336 567 Q F0 4.552(,t)
C 2.052(he of)-4.552 F 2.053(fsets of the DIE representing the user)-.25
F(-def)-.2 E 2.053(ined type, and the DIE representing the)-.2 F 1.45
(compilation-unit containing the user)69.336 579 R(-def)-.2 E 1.45
(ined type, respecti)-.2 F -.15(ve)-.25 G(ly).15 E 6.45(.I)-.65 G 3.95
(tr)-6.45 G(eturns)-3.95 E F1(DW_DLV_ERROR)3.95 E F0 1.45(on error)3.95
F 6.45(.I)-.55 G(t)-6.45 E(ne)69.336 591 Q -.15(ve)-.25 G 2.68(rr).15 G
(eturns)-2.68 E F1(DW_DLV_NO_ENTRY)2.68 E F0 5.18(.O)C 2.68(nas)-5.18 G
.18(uccessful return from)-2.68 F F1(dwarf_type_name_offsets\(\))2.68 E
F0(the)2.68 E .59(storage pointed to by)69.336 603 R F1(returned_name)
3.09 E F0 .59(should be freed using)3.09 F F1(dwarf_dealloc\(\))3.09 E
F0 3.09(,w)C .59(ith the allocation)-3.09 F(type)69.336 615 Q F1
(DW_DLA_STRING)2.5 E F0(when no longer of interest.)2.5 E/F3 12
/Times-Bold@0 SF 3(6.18 User)69.336 661 R(Def)3 E(ined Static V)-.3 E
(ariable Names Operations)-1.104 E F0(This section is SGI specif)69.336
679 Q(ic and is not part of standard D)-.2 E -1.2(WA)-.3 G(RF v)1.2 E
(ersion 2.)-.15 E 5.752(These functions operate on the .deb)69.336 697 R
(ug_v)-.2 E 5.752(arnames section of the deb)-.25 F 5.752
(ugging information.)-.2 F(The)10.752 E(.deb)69.336 709 Q(ug_v)-.2 E
1.762(arnames section contains the names of f)-.25 F 1.762
(ile-scope static v)-.2 F 1.762(ariables, the of)-.25 F 1.762
(fsets of the)-.25 F F1(DIE)4.262 E F0 4.262(st)C(hat)-4.262 E 2.637
(represent the def)69.336 721 R 2.637(initions of those v)-.2 F 2.637
(ariables, and the of)-.25 F 2.637
(fsets of the compilation-units that contain the)-.25 F(def)69.336 733 Q
(initions of those v)-.2 E(ariables.)-.25 E(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5(0-)-2.5 G 0 Cg EP
%%Page: 71 71
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(1-)-2.5 G/F1 11
/Times-Bold@0 SF 2.75(6.18.1 Deb)69.336 99 R(ugger Interface Operations)
-.22 E/F2 9/Times-Bold@0 SF 2.25(6.18.1.1 d)69.336 134 R(warf_get_v)
-.135 E(ars\(\))-.09 E/F3 10/Courier@0 SF(int dwarf_get_vars\()69.336
170 Q(Dwarf_Debug dbg,)117.336 182 Q(Dwarf_Var **vars,)117.336 194 Q
(Dwarf_Signed *var_count,)117.336 206 Q(Dwarf_Error *error\))117.336 218
Q F0 1.575(The function)69.336 236 R F3(dwarf_get_vars\(\))4.075 E F0
(returns)4.075 E F3(DW_DLV_OK)4.075 E F0 1.575(and sets)4.075 F F3
(*var_count)4.075 E F0 1.575(to the count of f)4.075 F(ile-)-.2 E 2.223
(scope static v)69.336 248 R 2.223
(ariable names represented in the section containing f)-.25 F 2.223
(ile-scope static v)-.2 F 2.223(ariable names, i.e.)-.25 F(.deb)69.336
260 Q(ug_v)-.2 E 2.985(arnames. It)-.25 F .485(also stores, at)2.985 F
F3(*vars)2.985 E F0 2.985(,ap)C .485(ointer to a list of)-2.985 F F3
(Dwarf_Var)2.985 E F0 .484(descriptors, one for each of)2.984 F .496
(the f)69.336 272 R .496(ile-scope static v)-.2 F .496
(ariable names in the .deb)-.25 F(ug_v)-.2 E .497(arnames section.)-.25
F .497(The returned results are for the entire)5.497 F 4.263
(section. It)69.336 284 R(returns)4.263 E F3(DW_DLV_ERROR)4.263 E F0
1.763(on error)4.263 F 6.763(.I)-.55 G 4.263(tr)-6.763 G(eturns)-4.263 E
F3(DW_DLV_NO_ENTRY)4.263 E F0 1.762(if the .deb)4.262 F(ug_v)-.2 E
(arnames)-.25 E(section does not e)69.336 296 Q(xist.)-.15 E 2.306
(The follo)69.336 326 R 2.306(wing is ne)-.25 F 4.806(wa)-.25 G 4.806
(so)-4.806 G 4.807(fJ)-4.806 G 2.307(uly 15, 2005.)-4.807 F 2.307
(On a successful return from)7.307 F F3(dwarf_get_vars\(\))4.807 E F0
4.807(,t)C(he)-4.807 E F3(Dwarf_Var)69.336 338 Q F0
(descriptors should be freed using)2.5 E F3(dwarf_vars_dealloc\(\))2.5 E
F0(.)A F3(void examplen\(Dwarf_Debug dbg\))89.336 368 Q({)89.336 380 Q
(Dwarf_Error error = 0;)101.336 392 Q(Dwarf_Signed count = 0;)101.336
404 Q(Dwarf_Var *vars = 0;)101.336 416 Q(Dwarf_Signed i = 0;)101.336 428
Q(int res = 0;)101.336 440 Q
(res = dwarf_get_vars\(dbg, &vars,&count,&error\);)101.336 452 Q
(if \(res == DW_DLV_OK\) {)101.336 464 Q
(for \(i = 0; i < count; ++i\) {)113.336 476 Q(/* use vars[i] */)125.336
488 Q(})113.336 500 Q(dwarf_vars_dealloc\(dbg, vars, count\);)113.336
512 Q(})101.336 524 Q(})89.336 536 Q F0 .067(The follo)69.336 572 R .066
(wing code is deprecated as of July 15, 2005 as it does not free all re\
le)-.25 F -.25(va)-.25 G .066(nt memory).25 F 5.066(.T)-.65 G .066
(his approach)-5.066 F 1.021(still w)69.336 584 R 1.021
(orks as well as it e)-.1 F -.15(ve)-.25 G 3.521(rd).15 G 3.521(id. On)
-3.521 F 3.521(as)3.521 G 1.022(uccessful return from)-3.521 F F3
(dwarf_get_vars\(\))3.522 E F0 3.522(,t)C(he)-3.522 E F3(Dwarf_Var)3.522
E F0 6.005(descriptors should be indi)69.336 596 R 6.005
(vidually freed using)-.25 F F3(dwarf_dealloc\(\))8.505 E F0 6.005
(with the allocation type)8.505 F F3(DW_DLA_VAR_CONTEXT)69.336 608 Q F0
2.536(,\()C(or)-2.536 E F3(DW_DLA_VAR)2.536 E F0 2.536(,a)C 2.536(no)
-2.536 G .036(lder name, supported for compatibility\) follo)-2.536 F
.037(wed by the)-.25 F .24
(deallocation of the list itself with the allocation type)69.336 620 R
F3(DW_DLA_LIST)2.739 E F0 .239(when the descriptors are no longer of)
2.739 F(interest.)69.336 632 Q(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5(1-)-2.5 G 0 Cg EP
%%Page: 72 72
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(2-)-2.5 G/F1 10
/Courier@0 SF(void exampleo\(Dwarf_Debug dbg\))89.336 96 Q({)89.336 108
Q(Dwarf_Error error = 0;)101.336 120 Q(Dwarf_Signed count = 0;)101.336
132 Q(Dwarf_Var *vars = 0;)101.336 144 Q(Dwarf_Signed i = 0;)101.336 156
Q(int res = 0;)101.336 168 Q
(res = dwarf_get_vars\(dbg, &vars,&count,&error\);)101.336 180 Q
(if \(res == DW_DLV_OK\) {)101.336 192 Q
(/* DO NOT USE: see dwarf_vars_dealloc\(\) above */)113.336 204 Q
(for \(i = 0; i < count; ++i\) {)113.336 216 Q(/* use vars[i] */)125.336
228 Q(dwarf_dealloc\(dbg, vars[i], DW_DLA_VAR\);)125.336 240 Q(})113.336
252 Q(dwarf_dealloc\(dbg, vars, DW_DLA_LIST\);)113.336 264 Q(})101.336
276 Q(})89.336 288 Q/F2 9/Times-Bold@0 SF 2.25(6.18.1.2 d)69.336 323 R
(warf_v)-.135 E(ar)-.09 E(name\(\))-.135 E F1(int dwarf_varname\()69.336
341 Q(Dwarf_Var var,)117.336 353 Q(char **)117.336 365 Q(returned_name,)
24 E(Dwarf_Error *error\))117.336 377 Q F0 1.261(The function)69.336 395
R F1(dwarf_varname\(\))3.761 E F0(returns)3.761 E F1(DW_DLV_OK)3.761 E
F0 1.262(and sets)3.762 F F1(*returned_name)3.762 E F0 1.262
(to a pointer to a)3.762 F .674(null-terminated string that names the f)
69.336 407 R .674(ile-scope static v)-.2 F .674
(ariable represented by the)-.25 F F1(Dwarf_Var)3.174 E F0(descriptor)
3.174 E(,)-.4 E F1(var)69.336 419 Q F0 5.339(.I)C 2.839(tr)-5.339 G
(eturns)-2.839 E F1(DW_DLV_ERROR)2.839 E F0 .339(on error)2.839 F 5.339
(.I)-.55 G 2.839(tn)-5.339 G -2.15 -.25(ev e)-2.839 H 2.839(rr).25 G
(eturns)-2.839 E F1(DW_DLV_NO_ENTRY)2.839 E F0 5.339(.O)C 2.84(nas)
-5.339 G .34(uccessful return)-2.84 F 2.869
(from this function, the string should be freed using)69.336 431 R F1
(dwarf_dealloc\(\))5.369 E F0 5.369(,w)C 2.869(ith the allocation type)
-5.369 F F1(DW_DLA_STRING)69.336 443 Q F0(when no longer of interest.)
2.5 E F2 2.25(6.18.1.3 d)69.336 472 R(warf_v)-.135 E(ar_die_offset\(\))
-.09 E F1(int dwarf_var_die_offset\()69.336 490 Q 18(Dwarf_Var var,)
117.336 502 R 12(Dwarf_Off *returned_offset,)117.336 514 R
(Dwarf_Error *error\))117.336 526 Q F0 .156(The function)69.336 544 R F1
(dwarf_var_die_offset\(\))2.656 E F0(returns)2.656 E F1(DW_DLV_OK)2.657
E F0 .157(and sets)2.657 F F1(*returned_offset)2.657 E F0 .157(to the)
2.657 F(of)69.336 556 Q .31
(fset in the section containing DIEs, i.e. .deb)-.25 F .31
(ug_info, of the DIE representing the f)-.2 F .31(ile-scope static v)-.2
F(ariable)-.25 E 2.001(that is described by the)69.336 568 R F1
(Dwarf_Var)4.501 E F0(descriptor)4.501 E(,)-.4 E F1(var)4.501 E F0 7.001
(.I)C 4.502(tr)-7.001 G(eturns)-4.502 E F1(DW_DLV_ERROR)4.502 E F0 2.002
(on error)4.502 F 7.002(.I)-.55 G 4.502(tn)-7.002 G -2.15 -.25(ev e)
-4.502 H(r).25 E(returns)69.336 580 Q F1(DW_DLV_NO_ENTRY)2.5 E F0(.)A F2
2.25(6.18.1.4 d)69.336 609 R(warf_v)-.135 E(ar_cu_offset\(\))-.09 E F1
(int dwarf_var_cu_offset\()69.336 627 Q(Dwarf_Var var,)117.336 639 Q 12
(Dwarf_Off *returned_offset,)117.336 651 R(Dwarf_Error *error\))117.336
663 Q F0 .824(The function)69.336 681 R F1(dwarf_var_cu_offset\(\))3.324
E F0(returns)3.324 E F1(DW_DLV_OK)3.323 E F0 .823(and sets)3.323 F F1
(*returned_offset)3.323 E F0 .823(to the)3.323 F(of)69.336 693 Q .913
(fset in the section containing DIEs, i.e. .deb)-.25 F .913
(ug_info, of the compilation-unit header of the compilation-)-.2 F 1.078
(unit that contains the f)69.336 705 R 1.077(ile-scope static v)-.2 F
1.077(ariable described by the)-.25 F F1(Dwarf_Var)3.577 E F0
(descriptor)3.577 E(,)-.4 E F1(var)3.577 E F0 6.077(.I)C 3.577(tr)-6.077
G(eturns)-3.577 E F1(DW_DLV_ERROR)69.336 717 Q F0(on error)2.5 E 5(.I)
-.55 G 2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr).25 G(eturns)-2.5 E F1
(DW_DLV_NO_ENTRY)2.5 E F0(.)A(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5(2-)-2.5 G 0 Cg EP
%%Page: 73 73
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(3-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.18.1.5 d)69.336 95 R(warf_v)-.135 E
(ar_name_offsets\(\))-.09 E/F2 10/Courier@0 SF
(int dwarf_var_name_offsets\()69.336 113 Q(Dwarf_Var var,)117.336 125 Q
24(char **returned_name,)117.336 137 R(Dwarf_Off *die_offset,)117.336
149 Q(Dwarf_Off *cu_offset,)117.336 161 Q(Dwarf_Error *error\))117.336
173 Q F0 1.021(The function)69.336 191 R F2(dwarf_var_name_offsets\(\))
3.521 E F0(returns)3.521 E F2(DW_DLV_OK)3.521 E F0 1.021(and sets)3.521
F F2(*returned_name)3.521 E F0 1.022(to a)3.521 F 1.502
(pointer to a null-terminated string that gi)69.336 203 R -.15(ve)-.25 G
4.002(st).15 G 1.502(he name of the f)-4.002 F 1.502(ile-scope static v)
-.2 F 1.501(ariable described by the)-.25 F F2(Dwarf_Var)69.336 215 Q F0
(descriptor)6.476 E F2(var)6.476 E F0 8.976(.I)C 6.476(ta)-8.976 G 3.976
(lso returns in the locations pointed to by)-6.476 F F2(die_offset)6.477
E F0 6.477(,a)C(nd)-6.477 E F2(cu_offset)69.336 227 Q F0 2.55(,t)C .05
(he of)-2.55 F .05(fsets of the DIE representing the f)-.25 F .049
(ile-scope static v)-.2 F .049(ariable, and the DIE representing the)
-.25 F 2.294(compilation-unit containing the f)69.336 239 R 2.294
(ile-scope static v)-.2 F 2.294(ariable, respecti)-.25 F -.15(ve)-.25 G
(ly).15 E 7.294(.I)-.65 G 4.794(tr)-7.294 G(eturns)-4.794 E F2
(DW_DLV_ERROR)4.794 E F0(on)4.794 E(error)69.336 251 Q 19.873(.I)-.55 G
17.373(tn)-19.873 G -2.15 -.25(ev e)-17.373 H 17.372(rr).25 G(eturns)
-17.372 E F2(DW_DLV_NO_ENTRY)17.372 E F0 19.872(.O)C 17.372(nas)-19.872
G 14.872(uccessful return from)-17.372 F F2(dwarf_var_name_offsets\(\))
69.336 263 Q F0 1.78(the storage pointed to by)4.28 F F2(returned_name)
4.28 E F0 1.78(should be freed using)4.28 F F2(dwarf_dealloc\(\))69.336
275 Q F0 2.5(,w)C(ith the allocation type)-2.5 E F2(DW_DLA_STRING)2.5 E
F0(when no longer of interest.)2.5 E/F3 12/Times-Bold@0 SF 3(6.19 Macr)
69.336 309 R 3(oI)-.216 G(nf)-3 E(ormation Operations)-.3 E/F4 11
/Times-Bold@0 SF 2.75(6.19.1 General)69.336 330 R(Macr)2.75 E 2.75(oO)
-.198 G(perations)-2.75 E F1 2.25(6.19.1.1 d)69.336 347 R(warf_f)-.135 E
(ind_macr)-.225 E(o_v)-.162 E(alue_start\(\))-.09 E F2
(char *dwarf_find_macro_value_start\(char * macro_string\);)69.336 365 Q
F0(Gi)69.336 383 Q -.15(ve)-.25 G 3.889(nam).15 G 1.388
(acro string in the standard form def)-3.889 F 1.388(ined in the D)-.2 F
-1.2(WA)-.3 G 1.388(RF document \("name <space> v)1.2 F 1.388(alue" or)
-.25 F("name\(ar)69.336 395 Q(gs\)<space>v)-.18 E .649
(alue"\) this returns a pointer to the f)-.25 F .649
(irst byte of the macro v)-.2 F 3.149(alue. It)-.25 F .649
(does not alter the)3.149 F .588
(string pointed to by macro_string or cop)69.336 407 R 3.087(yt)-.1 G
.587(he string: it returns a pointer into the string whose address w)
-3.087 F(as)-.1 E(passed in.)69.336 419 Q F4 2.75(6.19.2 Deb)69.336 440
R(ugger Interface Macr)-.22 E 2.75(oO)-.198 G(perations)-2.75 E F0 .671
(Macro information is accessed from the .deb)69.336 458 R .672
(ug_info section via the D)-.2 F(W_A)-.3 E .672(T_macro_info attrib)
-1.11 F .672(ute \(whose)-.2 F -.25(va)69.336 470 S(lue is an of).25 E
(fset into .deb)-.25 E(ug_macinfo\).)-.2 E(No Functions yet def)69.336
488 Q(ined.)-.2 E F4 2.75(6.19.3 Lo)69.336 509 R 2.75(wL)-.11 G -2.53
-.165(ev e)-2.75 H 2.75(lM).165 G(acr)-2.75 E 2.75(oI)-.198 G(nf)-2.75 E
(ormation Operations)-.275 E F1 2.25(6.19.3.1 d)69.336 526 R
(warf_get_macr)-.135 E(o_details\(\))-.162 E F2
(int dwarf_get_macro_details\(Dwarf_Debug /*dbg*/,)69.336 544 Q 78
(Dwarf_Off macro_offset,)81.336 556 R 48(Dwarf_Unsigned maximum_count,)
81.336 568 R 48(Dwarf_Signed *)81.336 580 R(entry_count,)6 E
(Dwarf_Macro_Details ** details,)81.336 592 Q(Dwarf_Error *)81.336 604 Q
(err\);)60 E(dwarf_get_macro_details\(\))69.336 622 Q F0(returns)5.102 E
F2(DW_DLV_OK)5.101 E F0 2.601(and sets)5.101 F F2(entry_count)5.101 E F0
2.601(to the number of)5.101 F F2(details)69.336 634 Q F0 .944
(records returned through the)3.444 F F2(details)3.444 E F0(pointer)
3.444 E 5.944(.T)-.55 G .944(he data returned through)-5.944 F F2
(details)5.945 E F0(should)3.445 E .241(be freed by a call to)69.336 646
R F2(dwarf_dealloc\(\))2.741 E F0 .241(with the allocation type)2.741 F
F2(DW_DLA_STRING)2.74 E F0 5.24(.I)C(f)-5.24 E F2(DW_DLV_OK)2.74 E F0
(is)2.74 E 1.188(returned, the)69.336 658 R F2(entry_count)3.688 E F0
1.188
(will be at least 1, since a compilation unit with macro information b)
3.688 F 1.189(ut no)-.2 F(macros will ha)69.336 670 Q .3 -.15(ve a)-.2 H
2.5(tl).15 G(east one macro data byte of 0.)-2.5 E F2
(dwarf_get_macro_details\(\))69.336 688 Q F0(be)2.814 E .314
(gins at the)-.15 F F2(macro_offset)2.814 E F0(of)2.813 E .313
(fset you supply and ends at the end)-.25 F 6.638
(of a compilation unit or at)69.336 700 R F2(maximum_count)9.138 E F0
6.638(detail records \(whiche)9.138 F -.15(ve)-.25 G 9.139(rc).15 G
6.639(omes f)-9.139 F 9.139(irst\). If)-.2 F F2(maximum_count)69.336 712
Q F0
(is 0, it is treated as if it were the maximum possible unsigned inte)
2.5 E(ger)-.15 E(.)-.55 E F2(dwarf_get_macro_details\(\))69.336 730 Q F0
3.574(attempts to set)6.074 F F2(dmd_fileindex)6.074 E F0 3.574
(to the correct f)6.074 F 3.574(ile in e)-.2 F -.15(ve)-.25 G(ry).15 E
F2(details)69.336 742 Q F0 2.898
(record. If it is unable to do so \(or whene)5.398 F -.15(ve)-.25 G
5.398(rt).15 G 2.898(he current f)-5.398 F 2.899(ile inde)-.2 F 5.399
(xi)-.15 G 5.399(su)-5.399 G(nkno)-5.399 E 2.899(wn, it sets)-.25 F(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5
(3-)-2.5 G 0 Cg EP
%%Page: 74 74
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(4-)-2.5 G/F1 10
/Courier@0 SF(dmd_fileindex)69.336 96 Q F0(to -1.)2.5 E F1
(dwarf_get_macro_details\(\))69.336 114 Q F0(returns)3.496 E F1
(DW_DLV_ERROR)3.496 E F0 .996(on error)3.496 F 5.996(.I)-.55 G 3.495(tr)
-5.996 G(eturns)-3.495 E F1(DW_DLV_NO_ENTRY)3.495 E F0 1.012
(if there is no more macro information at that)69.336 126 R F1
(macro_offset)3.512 E F0 3.512(.I)C(f)-3.512 E F1(macro_offset)3.512 E
F0 1.013(is passed in as 0, a)3.513 F F1(DW_DLV_NO_ENTRY)69.336 138 Q F0
(return means there is no macro information.)2.5 E F1
(void examplep\(Dwarf_Debug dbg, Dwarf_Off cur_off\))89.336 156 Q({)
89.336 168 Q(Dwarf_Error error = 0;)101.336 180 Q
(Dwarf_Signed count = 0;)101.336 192 Q
(Dwarf_Macro_Details *maclist = 0;)101.336 204 Q(Dwarf_Signed i = 0;)
101.336 216 Q(Dwarf_Unsigned max = 500000; /* sanity limit */)101.336
228 Q(int errv = 0;)101.336 240 Q
(/* Given an offset from a compilation unit,)101.336 264 Q
(start at that offset \(from DW_AT_macroinfo\))119.336 276 Q
(and get its macro details. */)119.336 288 Q
(errv = dwarf_get_macro_details\(dbg, cur_off,max,)101.336 300 Q
(&count,&maclist,&error\);)131.336 312 Q(if \(errv == DW_DLV_OK\) {)
101.336 324 Q(for \(i = 0; i < count; ++i\) {)113.336 336 Q
(/* use maclist[i] */)125.336 348 Q(})113.336 360 Q
(dwarf_dealloc\(dbg, maclist, DW_DLA_STRING\);)113.336 372 Q(})101.336
384 Q(/* Loop through all the compilation units macro info from zero.)
101.336 396 Q(This is not guaranteed to work because DWARF does not)
119.336 408 Q(guarantee every byte in the section is meaningful:)119.336
420 Q(there can be garbage between the macro info)119.336 432 Q
(for CUs.)119.336 444 Q(But this loop will sometimes work.)12 E(*/)
101.336 456 Q(cur_off = 0;)101.336 468 Q
(while\(\(errv = dwarf_get_macro_details\(dbg, cur_off,max,)101.336 480
Q(&count,&maclist,&error\)\)== DW_DLV_OK\) {)131.336 492 Q
(for \(i = 0; i < count; ++i\) {)113.336 504 Q(/* use maclist[i] */)
125.336 516 Q(})113.336 528 Q
(cur_off = maclist[count-1].dmd_offset + 1;)113.336 540 Q
(dwarf_dealloc\(dbg, maclist, DW_DLA_STRING\);)113.336 552 Q(})101.336
564 Q(})89.336 576 Q/F2 12/Times-Bold@0 SF 3(6.20 Lo)69.336 628 R 3(wL)
-.12 G -2.76 -.18(ev e)-3 H 3(lF).18 G(rame Operations)-3 E F0 3.453
(These functions pro)69.336 646 R 3.453(vide information about stack fr\
ames to be used to perform stack traces.)-.15 F(The)8.452 E .612
(information is an abstraction of a table with a ro)69.336 658 R 3.113
(wp)-.25 G .613(er instruction and a column per re)-3.113 F .613
(gister and a column)-.15 F 1.115(for the canonical frame address \(CF)
69.336 670 R 1.114
(A, which corresponds to the notion of a frame pointer\), as well as a)
-.74 F(column for the return address.)69.336 682 Q .131
(From 1993-2006 the interf)69.336 700 R .131(ace we')-.1 F .131
(ll here refer to as D)-.1 F -1.2(WA)-.3 G .131(RF2 made the CF)1.2 F
2.631(Ab)-.74 G 2.631(eac)-2.631 G .131(olumn in the matrix, b)-2.631 F
(ut)-.2 E 1.794(left D)69.336 712 R(W_FRAME_UNDEFINED_V)-.3 E 1.794
(AL, and D)-1.35 F(W_FRAME_SAME_V)-.3 E 1.793(AL out of the matrix \(gi)
-1.35 F 1.793(ving them)-.25 F .686(high numbers\). As of the D)69.336
724 R -1.2(WA)-.3 G .686(RF3 interf)1.2 F .686
(aces introduced in this document in April 2006, there are *tw)-.1 F(o*)
-.1 E(interf)69.336 736 Q .011(aces \(the original set and a ne)-.1 F
2.511(ws)-.25 G 2.511(et\). Se)-2.511 F -.15(ve)-.25 G .011
(ral frame functions w).15 F .01
(ork transparently for either set, we will)-.1 F(re)69.336 768 Q 2.5(v2)
-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 75 75
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(5-)-2.5 G
(focus on the ones that are not equally suitable no)69.336 96 Q -.65(w.)
-.25 G 16.93(The original D)69.336 114 R -1.2(WA)-.3 G 16.93(RF2 interf)
1.2 F 16.93(ace set still e)-.1 F 16.93(xists \(dw)-.15 F
(arf_get_fde_info_for_re)-.1 E(g\(\),)-.15 E(dw)69.336 126 Q
(arf_get_fde_info_for_cf)-.1 E(a_re)-.1 E 4.409(g\(\), and dw)-.15 F
(arf_get_fde_info_for_all_re)-.1 E 4.408(gs\(\)\) and w)-.15 F 4.408
(orks adequately for)-.1 F .542(MIPS/IRIX D)69.336 138 R -1.2(WA)-.3 G
.542(RF2 and ABI/ISA sets that are suf)1.2 F -.2(fi)-.25 G .543
(ciently similar to MIPS.).2 F .543(These functions not a good)5.543 F
1.84(choice for non-MIPS architectures nor were the)69.336 150 R 4.34
(yag)-.15 G 1.84(ood design for MIPS either)-4.34 F 6.84(.I)-.55 G(t')
-6.84 E 4.34(sb)-.55 G 1.84(etter to switch)-4.34 F .993
(entirely to the ne)69.336 162 R 3.493(wf)-.25 G .993
(unctions mentioned in the ne)-3.493 F .993(xt paragraph.)-.15 F .994
(This D)5.993 F -1.2(WA)-.3 G .994(RF2 interf)1.2 F .994
(ace set assumes and)-.1 F .436(uses D)69.336 174 R(W_FRAME_CF)-.3 E
.436(A_COL and that is assumed when libdw)-.74 F .435(arf is conf)-.1 F
.435(igured with --enable-oldframecol)-.2 F(.)69.336 186 Q 5.972(An)
69.336 204 S 3.973 -.25(ew D)-5.972 H -1.2(WA)-.05 G 3.473(RF3 interf)
1.2 F 3.473(ace set of dw)-.1 F(arf_get_fde_info_for_re)-.1 E 3.473
(g3\(\), dw)-.15 F(arf_get_fde_info_for_cf)-.1 E(a_re)-.1 E(g3\(\),)-.15
E(dw)69.336 216 Q(arf_get_fde_info_for_all_re)-.1 E 10.085(gs3\(\), dw)
-.15 F 10.085(arf_set_frame_rule_table_size\(\) dw)-.1 F
(arf_set_frame_cf)-.1 E(a_v)-.1 E(alue\(\),)-.25 E(dw)69.336 228 Q
(arf_set_frame_same_v)-.1 E 67.89(alue\(\), dw)-.25 F
(arf_set_frame_undef)-.1 E(ined_v)-.2 E 67.89(alue\(\), and)-.25 F(dw)
69.336 240 Q(arf_set_frame_rule_initial_v)-.1 E .197
(alue\(\) is more fle)-.25 F .197(xible and will w)-.15 F .197
(ork for man)-.1 F 2.697(ym)-.15 G .197(ore architectures.)-2.697 F .197
(It is also)5.197 F 1.566(entirely suitable for use with D)69.336 252 R
-1.2(WA)-.3 G 1.567(RF2 and D)1.2 F -1.2(WA)-.3 G 4.067(RF4. The)1.2 F
1.567(setting of)4.067 F 1.567(the 'frame cf)6.567 F 4.067(ac)-.1 G
1.567(olumn number')-4.067 F(def)69.336 264 Q(aults to D)-.1 E
(W_FRAME_CF)-.3 E(A_COL3 and it can be set at runtime with dw)-.74 E
(arf_set_frame_cf)-.1 E(a_v)-.1 E(alue\(\).)-.25 E 1.48
(Mixing use of the D)69.336 282 R -1.2(WA)-.3 G 1.48(RF2 interf)1.2 F
1.48(ace set with use of the ne)-.1 F 3.979(wD)-.25 G -1.2(WA)-4.279 G
1.479(RF3 interf)1.2 F 1.479(ace set on a single open)-.1 F(Dw)69.336
294 Q(arf_Deb)-.1 E(ug instance is a mistak)-.2 E 2.5(e. Do)-.1 F
(not do it.)2.5 E 8.592 -.8(We w)69.336 312 T 6.992
(ill pretend, from here on unless otherwise specif).8 F 6.992
(ied, that D)-.2 F(W_FRAME_CF)-.3 E(A_COL3,)-.74 E -.3(DW)69.336 324 S
(_FRAME_UNDEFINED_V).3 E 2.153(AL, and D)-1.35 F(W_FRAME_SAME_V)-.3 E
2.153(AL are the synthetic column numbers.)-1.35 F 15.69
(These columns may be user)69.336 336 R 15.69(-chosen by calls of dw)-.2
F(arf_set_frame_cf)-.1 E(a_v)-.1 E(alue\(\))-.25 E(dw)69.336 348 Q
(arf_set_frame_undef)-.1 E(ined_v)-.2 E(alue\(\), and dw)-.25 E
(arf_set_frame_same_v)-.1 E(alue\(\) respecti)-.25 E -.15(ve)-.25 G(ly)
.15 E(.)-.65 E(Each cell in the table contains one of the follo)69.336
378 Q(wing:)-.25 E 7.5(1. A)81.836 408 R(re)2.5 E(gister + of)-.15 E
(fset\(a\)\(b\))-.25 E 7.5(2. A)81.836 438 R(re)2.5 E(gister\(c\)\(d\))
-.15 E 7.5(3. A)81.836 480 R(mark)2.5 E(er \(D)-.1 E
(W_FRAME_UNDEFINED_V)-.3 E(AL\) meaning)-1.35 E/F1 10/Times-Italic@0 SF
-.37(re)2.5 G(gister value undef)-.03 E(ined)-.2 E F0 7.5(4. A)81.836
510 R(mark)2.5 E(er \(D)-.1 E(W_FRAME_SAME_V)-.3 E(AL\) meaning)-1.35 E
F1 -.37(re)2.5 G(gister value same as in caller)-.03 E F0 1.24
(\(a old D)69.336 528 R -1.2(WA)-.3 G 1.24(RF2 interf)1.2 F 1.24
(ace\) When)-.1 F 1.239(the column is D)6.239 F(W_FRAME_CF)-.3 E 1.239
(A_COL: the re)-.74 F 1.239(gister number is a real)-.15 F(hardw)69.336
540 Q 1.718(are re)-.1 F(gister)-.15 E 4.218(,n)-.4 G 1.719
(ot a reference to D)-4.218 F(W_FRAME_CF)-.3 E 1.719(A_COL, not)-.74 F
-.3(DW)6.719 G(_FRAME_UNDEFINED_V).3 E(AL,)-1.35 E .17(and not D)69.336
552 R(W_FRAME_SAME_V)-.3 E 2.67(AL. The)-1.35 F(CF)2.67 E 2.67(Ar)-.74 G
.17(ule v)-2.67 F .169(alue should be the stack pointer plus of)-.25 F
.169(fset 0 when no)-.25 F .202(other v)69.336 564 R .202(alue mak)-.25
F .203(es sense.)-.1 F 2.703(Av)5.203 G .203(alue of D)-2.953 F
(W_FRAME_SAME_V)-.3 E .203(AL w)-1.35 F .203(ould be semi-logical, b)-.1
F .203(ut since the CF)-.2 F(A)-.74 E 1.303(is not a real re)69.336 576
R(gister)-.15 E 3.802(,n)-.4 G 1.302(ot really correct.)-3.802 F 3.802
(Av)6.302 G 1.302(alue of D)-4.052 F(W_FRAME_UNDEFINED_V)-.3 E 1.302
(AL w)-1.35 F 1.302(ould imply the)-.1 F(CF)69.336 588 Q 3.249(Ai)-.74 G
3.249(su)-3.249 G(ndef)-3.249 E 3.249(ined --)-.2 F .749
(this seems to be a useless notion, as the CF)3.249 F 3.249(Ai)-.74 G
3.249(sam)-3.249 G .749(eans to f)-3.249 F .749(inding real re)-.2 F .75
(gisters, so)-.15 F 1.74(those real re)69.336 600 R 1.74
(gisters should be mark)-.15 F 1.74(ed D)-.1 F(W_FRAME_UNDEFINED_V)-.3 E
1.74(AL, and the CF)-1.35 F 4.24(Ac)-.74 G 1.74(olumn content)-4.24 F
(\(whate)69.336 612 Q -.15(ve)-.25 G 2.5(rr).15 G -.15(eg)-2.5 G
(ister it specif).15 E(ies\) becomes unreferenced by an)-.2 E(ything.)
-.15 E .618(\(a ne)69.336 630 R 3.118(wA)-.25 G .618(pril 2006 D)-3.118
F -1.2(WA)-.3 G .618(RF2/3 interf)1.2 F .618(ace\): The CF)-.1 F 3.118
(Ai)-.74 G 3.118(ss)-3.118 G .618
(eparately accessible and not part of the table.)-3.118 F(The)5.619 E
-.5('r)69.336 642 S .873(ule number' for the CF).5 F 3.373(Ai)-.74 G
3.373(san)-3.373 G .873(umber outside the table.)-3.373 F .873
(So the CF)5.873 F 3.373(Ai)-.74 G 3.373(sam)-3.373 G(ark)-3.373 E(er)
-.1 E 3.373(,n)-.4 G .873(ot a re)-3.373 F .873(gister number)-.15 F(.)
-.55 E 14.205(See D)69.336 654 R(W_FRAME_CF)-.3 E 11.705
(A_COL3 in libdw)-.74 F 11.705(arf.h and dw)-.1 F
(arf_get_fde_info_for_cf)-.1 E(a_re)-.1 E 11.705(g3\(\) and)-.15 F(dw)
69.336 666 Q(arf_set_frame_rule_cf)-.1 E(a_v)-.1 E(alue\(\).)-.25 E
7.139(\(b\) When the column is not D)69.336 684 R(W_FRAME_CF)-.3 E 7.138
(A_COL3, the ')-.74 F(re)-.5 E 7.138(gister' will and must be)-.15 F -.3
(DW)69.336 696 S(_FRAME_CF).3 E .728
(A_COL3\(COL\), implying that to get the f)-.74 F .729
(inal location for the column one must add the)-.2 F(of)69.336 708 Q
(fset here plus the D)-.25 E(W_FRAME_CF)-.3 E(A_COL3 rule v)-.74 E
(alue.)-.25 E .258(\(c\) When the column is D)69.336 726 R(W_FRAME_CF)
-.3 E .258(A_COL3, then the ')-.74 F(re)-.5 E .258
(gister' number is \(must be\) a real hardw)-.15 F(are)-.1 E(re)69.336
738 Q 6.19(gister .)-.15 F 6.191
(\(This paragraph does not apply to the April 2006 ne)11.19 F 8.691(wi)
-.25 G(nterf)-8.691 E 8.691(ace\). If)-.1 F 6.191(it were)8.691 F(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5
(5-)-2.5 G 0 Cg EP
%%Page: 76 76
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(6-)-2.5 G -.3(DW)69.336
96 S(_FRAME_UNDEFINED_V).3 E 2.194(AL or D)-1.35 F(W_FRAME_SAME_V)-.3 E
2.194(AL it w)-1.35 F 2.194(ould be a mark)-.1 F(er)-.1 E 4.694(,n)-.4 G
2.194(ot a re)-4.694 F(gister)-.15 E(number)69.336 108 Q(.)-.55 E .235
(\(d\) When the column is not D)69.336 126 R(W_FRAME_CF)-.3 E .236
(A_COL3, the re)-.74 F .236(gister may be a hardw)-.15 F .236(are re)-.1
F(gister)-.15 E 5.236(.I)-.55 G 2.736(tw)-5.236 G .236(ill not)-2.736 F
(be D)69.336 138 Q(W_FRAME_CF)-.3 E(A_COL3.)-.74 E 2.849
(There is no 'column' for D)69.336 156 R(W_FRAME_UNDEFINED_V)-.3 E 2.849
(AL or D)-1.35 F(W_FRAME_SAME_V)-.3 E 5.349(AL. Nor)-1.35 F(for)5.348 E
-.3(DW)69.336 168 S(_FRAME_CF).3 E(A_COL3.)-.74 E 8.608
(Figure 3 is machine dependent and represents MIPS CPU re)69.336 192 R
8.609(gister assignments.)-.15 F(The)13.609 E -.3(DW)69.336 204 S
(_FRAME_CF).3 E(A_COL def)-.74 E(ine in dw)-.2 E
(arf.h is historical and really belongs in libdw)-.1 E(arf.h, not dw)-.1
E(arf.h.)-.1 E .4 LW 449.796 214.5 120.876 214.5 DL/F1 10/Times-Bold@0
SF -.2(NA)125.876 224 S 124.37(ME v).2 F 12.5(alue PURPOSE)-.1 F 449.796
228.5 120.876 228.5 DL F0 -.3(DW)125.876 238 S(_FRAME_CF).3 E 59.04
(A_COL 0)-.74 F(column used for CF)23.84 E(A)-.74 E -.3(DW)125.876 250 S
77.75(_FRAME_REG1 1).3 F(inte)23.84 E(ger re)-.15 E(gister 1)-.15 E -.3
(DW)125.876 262 S 77.75(_FRAME_REG2 2).3 F(inte)23.84 E(ger re)-.15 E
(gister 2)-.15 E 182.41(--- ob)125.876 274 R(vious names and v)-.15 E
(alues here)-.25 E -.3(DW)125.876 286 S 70.25(_FRAME_REG30 30).3 F(inte)
21.34 E(ger re)-.15 E(gister 30)-.15 E -.3(DW)125.876 298 S 70.25
(_FRAME_REG31 31).3 F(inte)21.34 E(ger re)-.15 E(gister 31)-.15 E -.3
(DW)125.876 310 S 69.69(_FRAME_FREG0 32).3 F(floating point re)21.34 E
(gister 0)-.15 E -.3(DW)125.876 322 S 69.69(_FRAME_FREG1 33).3 F
(floating point re)21.34 E(gister 1)-.15 E 182.41(--- ob)125.876 334 R
(vious names and v)-.15 E(alues here)-.25 E -.3(DW)125.876 346 S 64.69
(_FRAME_FREG30 62).3 F(floating point re)21.34 E(gister 30)-.15 E -.3
(DW)125.876 358 S 64.69(_FRAME_FREG31 63).3 F(floating point re)21.34 E
(gister 31)-.15 E -.3(DW)125.876 370 S 61.36(_FRAME_RA_COL 64).3 F
(column recording ra)21.34 E -.3(DW)125.876 382 S(_FRAME_UNDEFINED_V).3
E 13.84(AL 1034 re)-1.35 F(gister v)-.15 E(al undef)-.25 E(ined)-.2 E
-.3(DW)125.876 394 S(_FRAME_SAME_V).3 E 43.27(AL 1035)-1.35 F(re)16.34 E
(gister same as in caller)-.15 E 449.796 398.5 120.876 398.5 DL 449.796
214.5 449.796 398.5 DL 120.876 214.5 120.876 398.5 DL F1(Figur)175.151
424 Q 2.5(e4)-.18 G(.)-2.5 E F0(Frame Information Rule Assignments MIPS)
5 E .968(The follo)69.336 442 R .968(wing table sho)-.25 F .968
(ws SGI/MIPS specif)-.25 F .968(ic special cell v)-.2 F .967
(alues: these v)-.25 F .967(alues mean that the cell has the)-.25 F -.25
(va)69.336 454 S(lue).25 E/F2 10/Times-Italic@0 SF(undef)3.01 E(ined)-.2
E F0(or)3.01 E F2 .51(same value)3.01 F F0(respecti)3.011 E -.15(ve)-.25
G(ly).15 E 3.011(,r)-.65 G .511(ather than containing a)-3.011 F F2 -.37
(re)3.011 G(gister)-.03 E F0(or)3.011 E F2 -.37(re)3.011 G(gister+of)
-.03 E(fset)-.18 E F0 5.511(.I)C 3.011(ta)-5.511 G(ssumes)-3.011 E -.3
(DW)69.336 466 S(_FRAME_CF).3 E 1.817
(A_COL is a table rule, which is not readily accomplished or e)-.74 F
-.15(ve)-.25 G 4.316(ns).15 G 1.816(ensible for some)-4.316 F
(architectures.)69.336 478 Q 448.546 488.5 122.126 488.5 DL F1 -.2(NA)
127.126 498 S 124.37(ME v).2 F 12.5(alue PURPOSE)-.1 F 448.546 502.5
122.126 502.5 DL F0 -.3(DW)127.126 512 S(_FRAME_UNDEFINED_V).3 E 13.84
(AL 1034 means)-1.35 F(undef)2.5 E(ined v)-.2 E(alue.)-.25 E
(Not a column or re)322.026 524 Q(gister v)-.15 E(alue)-.25 E -.3(DW)
127.126 536 S(_FRAME_SAME_V).3 E 43.27(AL 1035)-1.35 F(means ')16.34 E
(same v)-.55 E(alue' as)-.25 E(caller had. Not a column or)322.026 548 Q
(re)322.026 560 Q(gister v)-.15 E(alue)-.25 E -.3(DW)127.126 572 S
(_FRAME_CF).3 E 59.04(A_COL 0)-.74 F(means re)23.84 E(gister zero is)
-.15 E(usurped by the CF)322.026 584 Q 2.5(Ac)-.74 G(olumn.)-2.5 E
448.546 600.5 122.126 600.5 DL 448.546 488.5 448.546 600.5 DL 122.126
488.5 122.126 600.5 DL F1(Figur)162.056 614 Q 2.5(e5)-.18 G(.)-2.5 E F0
(Frame Information Special V)5 E(alues an)-1.11 E 2.5(ya)-.15 G
(rchitecture)-2.5 E 1.877(The follo)69.336 650 R 1.877(wing table sho)
-.25 F 1.877(ws more general special cell v)-.25 F 4.377(alues. These)
-.25 F -.25(va)4.377 G 1.878(lues mean that the cell re).25 F(gister)
-.15 E(-)-.2 E .99(number refers to the)69.336 662 R F2(cfa-r)3.49 E -.4
(eg)-.37 G(ister).4 E F0(or)3.49 E F2(undef)3.49 E(ined-value)-.2 E F0
(or)3.49 E F2(same-value)3.49 E F0(respecti)3.49 E -.15(ve)-.25 G(ly).15
E 3.49(,r)-.65 G .99(ather than referring to a)-3.49 F F2 -.37(re)69.336
674 S 1.028(gister in the table)-.03 F F0 6.028(.T)C 1.029
(he generality arises from making D)-6.028 F(W_FRAME_CF)-.3 E 1.029
(A_COL3 be outside the set of)-.74 F(re)69.336 686 Q
(gisters and making the cf)-.15 E 2.5(ar)-.1 G
(ule accessible from outside the rule-table.)-2.5 E(re)69.336 768 Q 2.5
(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5(6-)-2.5 G 0 Cg EP
%%Page: 77 77
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(7-)-2.5 G .4 LW 481.136
88.5 89.536 88.5 DL/F1 10/Times-Bold@0 SF -.2(NA)94.536 98 S 124.37
(ME v).2 F 12.5(alue PURPOSE)-.1 F 481.136 102.5 89.536 102.5 DL F0 -.3
(DW)94.536 112 S(_FRAME_UNDEFINED_V).3 E 13.84(AL 1034 means)-1.35 F
(undef)2.5 E(ined)-.2 E -.25(va)289.436 124 S(lue. Not a column or re)
.25 E(gister v)-.15 E(alue)-.25 E -.3(DW)94.536 136 S(_FRAME_SAME_V).3 E
43.27(AL 1035)-1.35 F(means ')16.34 E(same v)-.55 E(alue' as)-.25 E
(caller had. Not a column or)289.436 148 Q(re)289.436 160 Q(gister v)
-.15 E(alue)-.25 E -.3(DW)94.536 172 S(_FRAME_CF).3 E 46.54(A_COL3 1436)
-.74 F(means 'cf)16.34 E 2.5(ar)-.1 G -.15(eg)-2.5 G(ister').15 E
(is referred to, not a real re)289.436 184 Q(gister)-.15 E 2.5(,n)-.4 G
(ot)-2.5 E 2.5(ac)289.436 196 S(olumn, b)-2.5 E(ut the cf)-.2 E 2.5(a\()
-.1 G(the cf)-2.5 E 2.5(ad)-.1 G(oes ha)-2.5 E -.15(ve)-.2 G 2.5(av)
289.436 208 S(alue, b)-2.75 E(ut in the D)-.2 E -1.2(WA)-.3 G(RF3 libdw)
1.2 E(arf interf)-.1 E(ace)-.1 E(it does not ha)289.436 220 Q .3 -.15
(ve a ')-.2 H(real re)-.35 E(gister number'\).)-.15 E 481.136 224.5
89.536 224.5 DL 481.136 88.5 481.136 224.5 DL 89.536 88.5 89.536 224.5
DL/F2 9/Times-Bold@0 SF 2.25(6.20.0.1 d)69.336 255 R
(warf_get_fde_list\(\))-.135 E/F3 10/Courier@0 SF
(int dwarf_get_fde_list\()69.336 273 Q(Dwarf_Debug dbg,)117.336 285 Q
(Dwarf_Cie **cie_data,)117.336 297 Q(Dwarf_Signed *cie_element_count,)
117.336 309 Q(Dwarf_Fde **fde_data,)117.336 321 Q
(Dwarf_Signed *fde_element_count,)117.336 333 Q(Dwarf_Error *error\);)
117.336 345 Q(dwarf_get_fde_list\(\))69.336 363 Q F0 .139
(stores a pointer to a list of)2.639 F F3(Dwarf_Cie)2.638 E F0 .138
(descriptors in)2.638 F F3(*cie_data)2.638 E F0 2.638(,a)C .138(nd the)
-2.638 F .323(count of the number of descriptors in)69.336 375 R F3
(*cie_element_count)2.824 E F0 5.324(.T)C .324
(here is a descriptor for each CIE in the)-5.324 F(.deb)69.336 387 Q
.924(ug_frame section.)-.2 F(Similarly)5.924 E 3.424(,i)-.65 G 3.424(ts)
-3.424 G .924(tores a pointer to a list of)-3.424 F F3(Dwarf_Fde)3.423 E
F0 .923(descriptors in)3.423 F F3(*fde_data)3.423 E F0(,)A .363
(and the count of the number of descriptors in)69.336 399 R F3
(*fde_element_count)2.863 E F0 5.363(.T)C .364
(here is one descriptor per FDE)-5.363 F .858(in the .deb)69.336 411 R
.858(ug_frame section.)-.2 F F3(dwarf_get_fde_list\(\))5.858 E F0
(returns)5.858 E F3(DW_DLV_ERROR)3.358 E F0 .858(on error)3.358 F 5.858
(.I)-.55 G 3.358(tr)-5.858 G(eturns)-3.358 E F3(DW_DLV_NO_ENTRY)69.336
423 Q F0(if it cannot f)2.5 E(ind frame entries.)-.2 E(It returns)5 E F3
(DW_DLV_OK)2.5 E F0(on a successful return.)2.5 E 9.407(On successful r\
eturn, structures pointed to by a descriptor should be freed using)
69.336 441 R F3(dwarf_fde_cie_list_dealloc\(\))69.336 453 Q F0 5(.T)C
(his dealloc approach is ne)-5 E 2.5(wa)-.25 G 2.5(so)-2.5 G 2.5(fJ)-2.5
G(uly 15, 2005.)-2.5 E F3(void exampleq\(Dwarf_Debug dbg\))89.336 483 Q
({)89.336 495 Q(Dwarf_Signed cnt = 0;)101.336 507 Q
(Dwarf_Cie *cie_data = 0;)101.336 519 Q(Dwarf_Signed cie_count = 0;)
101.336 531 Q(Dwarf_Fde *fde_data = 0;)101.336 543 Q
(Dwarf_Signed fde_count = 0;)101.336 555 Q(int fres = 0;)101.336 567 Q
(fres = dwarf_get_fde_list\(dbg,&cie_data,&cie_count,)101.336 591 Q
(&fde_data,&fde_count,&error\);)113.336 603 Q
(if \(fres == DW_DLV_OK\) {)101.336 615 Q
(dwarf_fde_cie_list_dealloc\(dbg, cie_data, cie_count,)113.336 627 Q
(fde_data,fde_count\);)125.336 639 Q(})101.336 651 Q(})89.336 663 Q F0
.067(The follo)69.336 711 R .066(wing code is deprecated as of July 15,\
 2005 as it does not free all rele)-.25 F -.25(va)-.25 G .066(nt memory)
.25 F 5.066(.T)-.65 G .066(his approach)-5.066 F(still w)69.336 723 Q
(orks as well as it e)-.1 E -.15(ve)-.25 G 2.5(rd).15 G(id.)-2.5 E(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-7)120.71 G 2.5
(7-)-2.5 G 0 Cg EP
%%Page: 78 78
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(8-)-2.5 G/F1 10
/Courier@0 SF(/* OBSOLETE EXAMPLE */)89.336 96 Q
(void exampleqb\(Dwarf_Debug dbg\))89.336 108 Q({)89.336 120 Q
(Dwarf_Signed cnt = 0;)101.336 132 Q(Dwarf_Cie *cie_data = 0;)101.336
144 Q(Dwarf_Signed cie_count = 0;)101.336 156 Q
(Dwarf_Fde *fde_data = 0;)101.336 168 Q(Dwarf_Signed fde_count = 0;)
101.336 180 Q(int fres = 0;)101.336 192 Q
(fres = dwarf_get_fde_list\(dbg,&cie_data,&cie_count,)101.336 204 Q
(&fde_data,&fde_count,&error\);)113.336 216 Q
(if \(fres == DW_DLV_OK\) {)101.336 228 Q
(for \(i = 0; i < cie_count; ++i\) {)113.336 240 Q(/* use cie[i] */)
125.336 252 Q(dwarf_dealloc\(dbg, cie_data[i], DW_DLA_CIE\);)125.336 264
Q(})113.336 276 Q(for \(i = 0; i < fde_count; ++i\) {)113.336 288 Q
(/* use fde[i] */)125.336 300 Q
(dwarf_dealloc\(dbg, fde_data[i], DW_DLA_FDE\);)125.336 312 Q(})113.336
324 Q(dwarf_dealloc\(dbg, cie_data, DW_DLA_LIST\);)113.336 336 Q
(dwarf_dealloc\(dbg, fde_data, DW_DLA_LIST\);)113.336 348 Q(})101.336
360 Q(})89.336 384 Q/F2 9/Times-Bold@0 SF 2.25(6.20.0.2 d)69.336 419 R
(warf_get_fde_list_eh\(\))-.135 E F1(int dwarf_get_fde_list_eh\()69.336
437 Q(Dwarf_Debug dbg,)117.336 449 Q(Dwarf_Cie **cie_data,)117.336 461 Q
(Dwarf_Signed *cie_element_count,)117.336 473 Q(Dwarf_Fde **fde_data,)
117.336 485 Q(Dwarf_Signed *fde_element_count,)117.336 497 Q
(Dwarf_Error *error\);)117.336 509 Q(dwarf_get_fde_list_eh\(\))69.336
527 Q F0 11.526(is identical to)14.026 F F1(dwarf_get_fde_list\(\))
14.027 E F0 -.15(ex)14.027 G 11.527(cept that).15 F F1
(dwarf_get_fde_list_eh\(\))69.336 539 Q F0 .988
(reads the GNU gcc section named .eh_frame \(C++ e)3.488 F .988
(xception handling)-.15 F(information\).)69.336 551 Q F1
(dwarf_get_fde_list_eh\(\))69.336 575 Q F0 1.405
(stores a pointer to a list of)3.905 F F1(Dwarf_Cie)3.906 E F0 1.406
(descriptors in)3.906 F F1(*cie_data)3.906 E F0(,)A 1.142
(and the count of the number of descriptors in)69.336 587 R F1
(*cie_element_count)3.642 E F0 6.142(.T)C 1.142
(here is a descriptor for each)-6.142 F 1.77(CIE in the .deb)69.336 599
R 1.77(ug_frame section.)-.2 F(Similarly)6.77 E 4.27(,i)-.65 G 4.27(ts)
-4.27 G 1.77(tores a pointer to a list of)-4.27 F F1(Dwarf_Fde)4.27 E F0
1.77(descriptors in)4.27 F F1(*fde_data)69.336 611 Q F0 4.47(,a)C 1.969
(nd the count of the number of descriptors in)-4.47 F F1
(*fde_element_count)4.469 E F0 6.969(.T)C 1.969(here is one)-6.969 F
.799(descriptor per FDE in the .deb)69.336 623 R .799(ug_frame section.)
-.2 F F1(dwarf_get_fde_list\(\))5.799 E F0(returns)5.799 E F1
(DW_DLV_ERROR)3.299 E F0 3.71(on error)69.336 635 R 8.71(.I)-.55 G 6.21
(tr)-8.71 G(eturns)-6.21 E F1(DW_DLV_NO_ENTRY)6.21 E F0 3.71
(if it cannot f)6.21 F 3.71(ind e)-.2 F 3.71(xception handling entries.)
-.15 F 3.71(It returns)8.71 F F1(DW_DLV_OK)69.336 647 Q F0
(on a successful return.)2.5 E 9.407(On successful return, structures p\
ointed to by a descriptor should be freed using)69.336 677 R F1
(dwarf_fde_cie_list_dealloc\(\))69.336 689 Q F0 5(.T)C
(his dealloc approach is ne)-5 E 2.5(wa)-.25 G 2.5(so)-2.5 G 2.5(fJ)-2.5
G(uly 15, 2005.)-2.5 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)
-2.5 E 2.5(-7)120.71 G 2.5(8-)-2.5 G 0 Cg EP
%%Page: 79 79
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-7)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(void exampler\(Dwarf_Debug dbg\))89.336 96 Q({)89.336 108
Q(Dwarf_Signed count = 0;)101.336 120 Q(Dwarf_Cie *cie_data = 0;)101.336
132 Q(Dwarf_Signed cie_count = 0;)101.336 144 Q
(Dwarf_Fde *fde_data = 0;)101.336 156 Q(Dwarf_Signed fde_count = 0;)
101.336 168 Q(Dwarf_Error error = 0;)101.336 180 Q(int fres = 0;)101.336
192 Q(fres = dwarf_get_fde_list\(dbg,&cie_data,&cie_count,)101.336 216 Q
(&fde_data,&fde_count,&error\);)113.336 228 Q
(if \(fres == DW_DLV_OK\) {)101.336 240 Q
(dwarf_fde_cie_list_dealloc\(dbg, cie_data, cie_count,)113.336 252 Q
(fde_data,fde_count\);)137.336 264 Q 6(}e)101.336 276 S(lse {)-6 E
(/* ERROR or NO ENTRY. Do something */)113.336 288 Q(})101.336 300 Q(})
89.336 312 Q/F2 9/Times-Bold@0 SF 2.25(6.20.0.3 d)69.336 359 R
(warf_get_cie_of_fde\(\))-.135 E F1
(int dwarf_get_cie_of_fde\(Dwarf_Fde fde,)69.336 377 Q
(Dwarf_Cie *cie_returned,)117.336 389 Q(Dwarf_Error *error\);)117.336
401 Q(dwarf_get_cie_of_fde\(\))69.336 419 Q F0(stores a)2.5 E F1
(Dwarf_Cie)2.5 E F0(into the)2.5 E F1(Dwarf_Cie)5 E F0(that)2.5 E F1
(cie_returned)2.5 E F0(points)2.5 E(at.)69.336 431 Q 2.997
(If one has called dw)69.336 455 R 2.997
(arf_get_fde_list and does not wish to dw)-.1 F 2.997
(arf_dealloc\(\) all the indi)-.1 F 2.998(vidual FDEs)-.25 F
(immediately)69.336 467 Q 3.49(,o)-.65 G .99(ne must also a)-3.49 F -.2
(vo)-.2 G .989(id dw).2 F .989
(arf_dealloc-ing the CIEs for those FDEs not immediately dealloc')-.1 F
(d.)-.5 E -.15(Fa)69.336 479 S .513(iling to observ).15 F 3.013(et)-.15
G .513(his restriction will cause the)-3.013 F .513
(FDE\(s\) not dealloc')5.513 F 3.013(dt)-.5 G 3.013(ob)-3.013 G .513
(ecome in)-3.013 F -.25(va)-.4 G .514(lid: an FDE contains).25 F 2.042
(\(hidden in it\) a CIE pointer which will be be in)69.336 491 R -.25
(va)-.4 G 2.042(lid \(stale, pointing to freed memory\) if the CIE is)
.25 F(dealloc')69.336 503 Q 3.468(d. The)-.5 F(in)3.468 E -.25(va)-.4 G
.969(lid CIE pointer internal to the FDE cannot be detected as in).25 F
-.25(va)-.4 G .969(lid by libdw).25 F 3.469(arf. If)-.1 F(one)3.469 E
.031(later passes an FDE with a stale internal CIE pointer to one of th\
e routines taking an FDE as input the result)69.336 515 R .22(will be f)
69.336 527 R .22(ailure of the call \(returning D)-.1 F(W_DL)-.3 E
(V_ERR)-1 E .22(OR\) at best and it is possible a coredump or w)-.4 F
.22(orse will)-.1 F(happen \(e)69.336 539 Q -.15(ve)-.25 G(ntually\).)
.15 E F1(dwarf_get_cie_of_fde\(\))69.336 575 Q F0(returns)2.97 E F1
(DW_DLV_OK)2.97 E F0 .47
(if it is successful \(it will be unless fde is the NULL)2.97 F 2.5
(pointer\). It)69.336 587 R(returns)2.5 E F1(DW_DLV_ERROR)2.5 E F0
(if the fde is in)2.5 E -.25(va)-.4 G(lid \(NULL\).).25 E(Each)69.336
617 Q F1(Dwarf_Fde)2.5 E F0(descriptor describes information about the \
frame for a particular subroutine or function.)2.5 E F1
(int dwarf_get_fde_for_die)69.336 641 Q F0(is SGI/MIPS specif)2.5 E(ic.)
-.2 E F2 2.25(6.20.0.4 d)69.336 670 R(warf_get_fde_f)-.135 E(or_die\(\))
-.225 E F0(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-7)
120.71 G 2.5(9-)-2.5 G 0 Cg EP
%%Page: 80 80
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(0-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_get_fde_for_die\()69.336 96 Q(Dwarf_Debug dbg,)
117.336 108 Q(Dwarf_Die die,)117.336 120 Q(Dwarf_Fde *)117.336 132 Q
(return_fde,)12 E(Dwarf_Error *error\))117.336 144 Q F0 1.209
(When it succeeds,)69.336 162 R F1(dwarf_get_fde_for_die\(\))3.709 E F0
(returns)3.709 E F1(DW_DLV_OK)3.709 E F0 1.209(and sets)3.709 F F1
(*return_fde)3.709 E F0 1.209(to a)3.709 F F1(Dwarf_Fde)69.336 174 Q F0
5.64(descriptor representing frame information for the gi)8.14 F -.15
(ve)-.25 G(n).15 E F1(die)8.14 E F0 10.64(.I)C 8.14(tl)-10.64 G 5.64
(ooks for the)-8.14 F F1(DW_AT_MIPS_fde)69.336 186 Q F0(attrib)2.931 E
.431(ute in the gi)-.2 F -.15(ve)-.25 G(n).15 E F1(die)2.931 E F0 5.431
(.I)C 2.931(fi)-5.431 G 2.931(tf)-2.931 G .432(inds it, is uses the v)
-3.131 F .432(alue of the attrib)-.25 F .432(ute as the of)-.2 F(fset)
-.25 E 3.319(in the .deb)69.336 198 R 3.319
(ug_frame section where the FDE be)-.2 F 5.819(gins. If)-.15 F 3.318
(there is no)5.818 F F1(DW_AT_MIPS_fde)5.818 E F0 3.318(it returns)5.818
F F1(DW_DLV_NO_ENTRY)69.336 210 Q F0 5(.I)C 2.5(ft)-5 G
(here is an error it returns)-2.5 E F1(DW_DLV_ERROR)2.5 E F0(.)A/F2 9
/Times-Bold@0 SF 2.25(6.20.0.5 d)69.336 239 R(warf_get_fde_range\(\))
-.135 E F1(int dwarf_get_fde_range\()69.336 257 Q(Dwarf_Fde fde,)117.336
269 Q(Dwarf_Addr *low_pc,)117.336 281 Q(Dwarf_Unsigned *func_length,)
117.336 293 Q(Dwarf_Ptr *fde_bytes,)117.336 305 Q
(Dwarf_Unsigned *fde_byte_length,)117.336 317 Q(Dwarf_Off *cie_offset,)
117.336 329 Q(Dwarf_Signed *cie_index,)117.336 341 Q
(Dwarf_Off *fde_offset,)117.336 353 Q(Dwarf_Error *error\);)117.336 365
Q F0(On success,)69.336 383 Q F1(dwarf_get_fde_range\(\))2.5 E F0
(returns)2.5 E F1(DW_DLV_OK)2.5 E F0(.)A(The location pointed to by)
69.336 407 Q F1(low_pc)2.5 E F0(is set to the lo)2.5 E 2.5(wp)-.25 G 2.5
(cv)-2.5 G(alue for this function.)-2.75 E .457
(The location pointed to by)69.336 431 R F1(func_length)2.957 E F0 .457
(is set to the length of the function in bytes.)2.957 F .458
(This is essentially)5.458 F(the length of the te)69.336 443 Q
(xt section for the function.)-.15 E .919(The location pointed to by)
69.336 467 R F1(fde_bytes)3.419 E F0 .919
(is set to the address where the FDE be)3.419 F .918(gins in the .deb)
-.15 F(ug_frame)-.2 E(section.)69.336 479 Q 3.563
(The location pointed to by)69.336 503 R F1(fde_byte_length)6.063 E F0
3.563(is set to the length in bytes of the portion of)6.063 F(.deb)
69.336 515 Q(ug_frame for this FDE.)-.2 E(This is the same as the v)5 E
(alue returned by)-.25 E F1(dwarf_get_fde_range)2.5 E F0(.)A .015
(The location pointed to by)69.336 539 R F1(cie_offset)2.514 E F0 .014
(is set to the of)2.514 F .014(fset in the .deb)-.25 F .014
(ug_frame section of the CIE used by)-.2 F(this FDE.)69.336 551 Q .488
(The location pointed to by)69.336 575 R F1(cie_index)2.988 E F0 .488
(is set to the inde)2.988 F 2.989(xo)-.15 G 2.989(ft)-2.989 G .489
(he CIE used by this FDE.)-2.989 F .489(The inde)5.489 F 2.989(xi)-.15 G
2.989(st)-2.989 G(he)-2.989 E(inde)69.336 587 Q 2.986(xo)-.15 G 2.986
(ft)-2.986 G .486(he CIE in the list pointed to by)-2.986 F F1(cie_data)
2.986 E F0 .485(as set by the function)2.985 F F1
(dwarf_get_fde_list\(\))2.985 E F0(.)A(Ho)69.336 599 Q(we)-.25 E -.15
(ve)-.25 G 1.886 -.4(r, i).15 H 3.586(ft).4 G 1.086(he function)-3.586 F
F1(dwarf_get_fde_for_die\(\))3.586 E F0 -.1(wa)3.586 G 3.586(su).1 G
1.086(sed to obtain the gi)-3.586 F -.15(ve)-.25 G(n).15 E F1(fde)3.586
E F0 3.587(,t)C 1.087(his inde)-3.587 F(x)-.15 E(may not be correct.)
69.336 611 Q .745(The location pointed to by)69.336 635 R F1(fde_offset)
3.245 E F0 .745(is set to the of)3.245 F .744
(fset of the start of this FDE in the .deb)-.25 F(ug_frame)-.2 E
(section.)69.336 647 Q F1(dwarf_get_fde_range\(\))69.336 671 Q F0
(returns)2.5 E F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E F2 2.25
(6.20.0.6 d)69.336 700 R(warf_get_cie_inf)-.135 E(o\(\))-.225 E F0(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5
(0-)-2.5 G 0 Cg EP
%%Page: 81 81
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(1-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_get_cie_info\()69.336 96 Q 36(Dwarf_Cie cie,)
117.336 108 R(Dwarf_Unsigned *bytes_in_cie,)117.336 120 Q 18
(Dwarf_Small *version,)117.336 132 R 54(char **augmenter,)117.336 144 R
(Dwarf_Unsigned *code_alignment_factor,)117.336 156 Q
(Dwarf_Signed *data_alignment_factor,)117.336 168 Q 24
(Dwarf_Half *return_address_register_rule,)117.336 180 R 30
(Dwarf_Ptr *initial_instructions,)117.336 192 R
(Dwarf_Unsigned *initial_instructions_length,)117.336 204 Q 18
(Dwarf_Error *error\);)117.336 216 R(dwarf_get_cie_info\(\))69.336 234 Q
F0 1.119(is primarily for Internal-le)3.619 F -.15(ve)-.25 G 3.619(lI)
.15 G(nterf)-3.619 E 1.119(ace consumers.)-.1 F 1.119
(If successful, it returns)6.119 F F1(DW_DLV_OK)69.336 246 Q F0 .871
(and sets)3.371 F F1(*bytes_in_cie)3.371 E F0 .871
(to the number of bytes in the portion of the frames section for)3.371 F
.022(the CIE represented by the gi)69.336 258 R -.15(ve)-.25 G(n).15 E
F1(Dwarf_Cie)2.522 E F0(descriptor)2.522 E(,)-.4 E F1(cie)2.522 E F0
5.022(.T)C .022(he other f)-5.022 F .022(ields are directly tak)-.2 F
.022(en from the)-.1 F(cie and returned, via the pointers to the caller)
69.336 270 Q 5(.I)-.55 G 2.5(tr)-5 G(eturns)-2.5 E F1(DW_DLV_ERROR)2.5 E
F0(on error)2.5 E(.)-.55 E/F2 9/Times-Bold@0 SF 2.25(6.20.0.7 d)69.336
299 R(warf_get_cie_index\(\))-.135 E F1(int dwarf_get_cie_index\()69.336
317 Q(Dwarf_Cie cie,)117.336 329 Q(Dwarf_Signed *cie_index,)117.336 341
Q(Dwarf_Error *error\);)117.336 353 Q F0 4.98(On success,)69.336 371 R
F1(dwarf_get_cie_index\(\))7.48 E F0(returns)7.48 E F1(DW_DLV_OK)7.48 E
F0 9.98(.O)C 7.48(ne)-9.98 G 4.98(rror this function returns)-7.48 F F1
(DW_DLV_ERROR)69.336 383 Q F0(.)A .39(The location pointed to by)69.336
407 R F1(cie_index)2.89 E F0 .39(is set to the inde)2.89 F 2.89(xo)-.15
G 2.89(ft)-2.89 G .39(he CIE of this FDE.)-2.89 F .39(The inde)5.39 F
2.89(xi)-.15 G 2.89(st)-2.89 G .39(he inde)-2.89 F(x)-.15 E
(of the CIE in the list pointed to by)69.336 419 Q F1(cie_data)2.5 E F0
(as set by the function)2.5 E F1(dwarf_get_fde_list\(\))2.5 E F0(.)A
.503(So one must ha)69.336 443 R .803 -.15(ve u)-.2 H(sed).15 E F1
(dwarf_get_fde_list\(\))3.003 E F0(or)3.003 E F1
(dwarf_get_fde_list_eh\(\))3.002 E F0 .502(to get a cie list)3.002 F
(before this is meaningful.)69.336 455 Q
(This function is occasionally useful, b)69.336 479 Q
(ut is little used.)-.2 E F2 2.25(6.20.0.8 d)69.336 508 R
(warf_get_fde_instr_bytes\(\))-.135 E F1
(int dwarf_get_fde_instr_bytes\()69.336 526 Q(Dwarf_Fde fde,)117.336 538
Q(Dwarf_Ptr *outinstrs,)117.336 550 Q(Dwarf_Unsigned *outlen,)117.336
562 Q(Dwarf_Error *error\);)117.336 574 Q(dwarf_get_fde_instr_bytes\(\))
69.336 592 Q F0(returns)3.173 E F1(DW_DLV_OK)3.173 E F0 .673(and sets)
3.173 F F1(*outinstrs)3.174 E F0 .674(to a pointer to a set)3.174 F .544
(of bytes which are the actual frame instructions for this fde.)69.336
604 R .544(It also sets)5.544 F F1(*outlen)3.043 E F0 .543
(to the length, in bytes,)3.043 F 1.542(of the frame instructions.)
69.336 616 R 1.542(It returns)6.542 F F1(DW_DLV_ERROR)4.042 E F0 1.543
(on error)4.043 F 6.543(.I)-.55 G 4.043(tn)-6.543 G -2.15 -.25(ev e)
-4.043 H 4.043(rr).25 G(eturns)-4.043 E F1(DW_DLV_NO_ENTRY)4.043 E F0(.)
A 1.156(The intent is to allo)69.336 628 R 3.656(wl)-.25 G -.25(ow)
-3.656 G(-le).25 E -.15(ve)-.25 G 3.655(lc).15 G 1.155(onsumers lik)
-3.655 F 3.655(ead)-.1 G -.1(wa)-3.655 G 1.155
(rf-dumper to print the bytes in some f).1 F 3.655(ashion. The)-.1 F
(memory pointed to by)69.336 640 Q F1(outinstrs)2.5 E F0
(must not be changed and there is nothing to free.)2.5 E F2 2.25
(6.20.0.9 d)69.336 669 R(warf_get_fde_inf)-.135 E(o_f)-.225 E(or_r)-.225
E(eg\(\))-.162 E F0 7.671(This interf)69.336 687 R 7.671
(ace is suitable for D)-.1 F -1.2(WA)-.3 G 7.671(RF2 b)1.2 F 7.672
(ut is not suf)-.2 F -.2(fi)-.25 G 7.672(cient for D).2 F -1.2(WA)-.3 G
10.172(RF3. See)1.2 F F1(int)10.172 E(dwarf_get_fde_info_for_reg3)69.336
699 Q F0(.)A(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5
(-8)120.71 G 2.5(1-)-2.5 G 0 Cg EP
%%Page: 82 82
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(2-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_get_fde_info_for_reg\()69.336 96 Q
(Dwarf_Fde fde,)117.336 108 Q(Dwarf_Half table_column,)117.336 120 Q
(Dwarf_Addr pc_requested,)117.336 132 Q(Dwarf_Signed *offset_relevant,)
117.336 144 Q(Dwarf_Signed *register_num,)117.336 156 Q
(Dwarf_Signed *offset,)117.336 168 Q(Dwarf_Addr *row_pc,)117.336 180 Q
(Dwarf_Error *error\);)117.336 192 Q(dwarf_get_fde_info_for_reg\(\))
69.336 210 Q F0(returns)4.383 E F1(DW_DLV_OK)4.383 E F0 1.883(and sets)
4.383 F F1(*offset_relevant)4.383 E F0 1.882(to non-)4.383 F 3.376
(zero if the of)69.336 222 R 3.376(fset is rele)-.25 F -.25(va)-.25 G
3.376(nt for the ro).25 F 5.876(ws)-.25 G(pecif)-5.876 E 3.376(ied by)
-.2 F F1(pc_requested)5.876 E F0 3.376(and column specif)5.876 F 3.376
(ied by)-.2 F F1(table_column)69.336 234 Q F0 2.654(,f)C .154
(or the FDE specif)-2.654 F .153(ied by)-.2 F F1(fde)2.653 E F0 5.153
(.T)C .153(he intent is to return the rule for the gi)-5.153 F -.15(ve)
-.25 G 2.653(np).15 G 2.653(cv)-2.653 G .153(alue and)-2.903 F(re)69.336
246 Q(gister)-.15 E 5.378(.T)-.55 G .378(he location pointed to by)
-5.378 F F1(register_num)2.878 E F0 .378(is set to the re)2.878 F .378
(gister v)-.15 F .379(alue for the rule.)-.25 F .379(The location)5.379
F 2.379(pointed to by)69.336 258 R F1(offset)4.879 E F0 2.379
(is set to the of)4.879 F 2.379(fset v)-.25 F 2.379(alue for the rule.)
-.25 F 2.379(If of)7.379 F 2.379(fset is not rele)-.25 F -.25(va)-.25 G
2.379(nt for this rule,).25 F F1(*offset_relevant)69.336 270 Q F0 .518
(is set to zero.)3.018 F .518(Since more than one pc v)5.518 F .518
(alue will ha)-.25 F .818 -.15(ve r)-.2 H -.25(ow).15 G 3.018(sw).25 G
.519(ith identical entries,)-3.018 F 2.248(the user may w)69.336 282 R
2.248(ant to kno)-.1 F 4.748(wt)-.25 G 2.248(he earliest pc v)-4.748 F
2.248(alue after which the rules for all the columns remained)-.25 F 2.9
(unchanged. Recall)69.336 294 R .401(that in the virtual table that the\
 frame information represents there may be one or more)2.9 F 1.517
(table ro)69.336 306 R 1.517
(ws with identical data \(each such table ro)-.25 F 4.017(wa)-.25 G
4.017(tad)-4.017 G(if)-4.017 E 1.517(ferent pc v)-.25 F 4.017
(alue\). Gi)-.25 F -.15(ve)-.25 G 4.016(na).15 G F1(pc_requested)A F0
1.252(which refers to a pc in such a group of identical ro)69.336 318 R
1.253(ws, the location pointed to by)-.25 F F1(row_pc)3.753 E F0 1.253
(is set to the)3.753 F(lo)69.336 330 Q 1.992(west pc v)-.25 F 1.992
(alue within the group of)-.25 F 1.991(identical ro)6.991 F 4.491
(ws. The v)-.25 F 1.991(alue put in)-.25 F F1(*register_num)4.491 E F0
(an)4.491 E 4.491(yo)-.15 G 4.491(ft)-4.491 G(he)-4.491 E F1(DW_FRAME_*)
69.336 342 Q F0(table columns v)2.5 E(alues specif)-.25 E(ied in)-.2 E
F1(libdwarf.h)2.5 E F0(or)2.5 E F1(dwarf.h)2.5 E F0(.)A F1
(dwarf_get_fde_info_for_reg)69.336 366 Q F0(returns)2.5 E F1
(DW_DLV_ERROR)2.5 E F0(if there is an error)2.5 E(.)-.55 E
(It is usable with either)69.336 390 Q F1(dwarf_get_fde_n\(\))2.5 E F0
(or)2.5 E F1(dwarf_get_fde_at_pc\(\))2.5 E F0(.)A F1
(dwarf_get_fde_info_for_reg\(\))69.336 414 Q F0 23.307
(is tailored to MIPS, please use)25.806 F F1
(dwarf_get_fde_info_for_reg3\(\))69.336 426 Q F0
(instead for all architectures.)2.5 E/F2 9/Times-Bold@0 SF 2.25
(6.20.0.10 d)69.336 467 R(warf_get_fde_inf)-.135 E(o_f)-.225 E(or_all_r)
-.225 E(egs\(\))-.162 E F1(int dwarf_get_fde_info_for_all_regs\()69.336
485 Q(Dwarf_Fde fde,)117.336 497 Q(Dwarf_Addr pc_requested,)117.336 509
Q(Dwarf_Regtable *reg_table,)117.336 521 Q(Dwarf_Addr *row_pc,)117.336
533 Q(Dwarf_Error *error\);)117.336 545 Q
(dwarf_get_fde_info_for_all_regs\(\))69.336 563 Q F0(returns)2.952 E F1
(DW_DLV_OK)2.952 E F0 .451(and sets)2.951 F F1(*reg_table)2.951 E F0
.451(for the ro)2.951 F(w)-.25 E(specif)69.336 575 Q(ied by)-.2 E F1
(pc_requested)2.5 E F0(for the FDE specif)2.5 E(ied by)-.2 E F1(fde)2.5
E F0(.)A .291(The intent is to return the rules for decoding all the re)
69.336 593 R .291(gisters, gi)-.15 F -.15(ve)-.25 G 2.791(nap).15 G
2.791(cv)-2.791 G(alue.)-3.041 E F1(reg_table)5.291 E F0 .291
(is an array of)2.791 F 2.399(rules, one for each re)69.336 605 R 2.399
(gister specif)-.15 F 2.399(ied in)-.2 F F1(dwarf.h)4.899 E F0 4.899(.T)
C 2.399(he rule for each re)-4.899 F 2.398
(gister contains three items -)-.15 F F1(dw_regnum)69.336 617 Q F0 .035
(which denotes the re)2.535 F .035(gister v)-.15 F .035
(alue for that rule,)-.25 F F1(dw_offset)2.535 E F0 .036
(which denotes the of)2.535 F .036(fset v)-.25 F .036(alue for)-.25 F
1.786(that rule and)69.336 629 R F1(dw_offset_relevant)4.286 E F0 1.786
(which is set to zero if of)4.286 F 1.786(fset is not rele)-.25 F -.25
(va)-.25 G 1.786(nt for that rule. See).25 F F1
(dwarf_get_fde_info_for_reg\(\))69.336 641 Q F0(for a description of)2.5
E F1(row_pc)2.5 E F0(.)A F1(dwarf_get_fde_info_for_all_regs)69.336 659 Q
F0(returns)2.5 E F1(DW_DLV_ERROR)2.5 E F0(if there is an error)2.5 E(.)
-.55 E F1 11.278(int dwarf_get_fde_info_for_all_regs)69.336 677 R F0
11.279(is tailored to SGI/MIPS, please use)13.778 F(dw)69.336 689 Q
(arf_get_fde_info_for_all_re)-.1 E
(gs3\(\) instead for all architectures.)-.15 E(re)69.336 768 Q 2.5(v2)
-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(2-)-2.5 G 0 Cg EP
%%Page: 83 83
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(3-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.20.0.11 d)69.336 95 R
(warf_set_frame_rule_table_size\(\))-.135 E F0 .085(This allo)69.336 113
R .085(ws consumers to set the size of the \(internal to libdw)-.25 F
.084(arf\) rule table when using the ')-.1 F(re)-.5 E .084(g3' interf)
-.15 F(aces)-.1 E .563(\(these interf)69.336 125 R .563
(aces are strongly preferred o)-.1 F -.15(ve)-.15 G 3.063(rt).15 G .563
(he older ')-3.063 F(re)-.5 E .563(g' interf)-.15 F 3.063(aces\). It)-.1
F .564(should be at least as lar)3.063 F .564(ge as the)-.18 F 2.275
(number of real re)69.336 137 R 2.274
(gisters in the ABI which is to be read in for the dw)-.15 F
(arf_get_fde_info_for_re)-.1 E 2.274(g3\(\) or)-.15 F(dw)69.336 149 Q
(arf_get_fde_info_for_all_re)-.1 E(gs3\(\) functions to w)-.15 E
(ork properly)-.1 E(.)-.65 E 3.418
(The frame rule table size must be less than the mark)69.336 173 R 3.419
(er v)-.1 F 3.419(alues D)-.25 F(W_FRAME_UNDEFINED_V)-.3 E(AL,)-1.35 E
-.3(DW)69.336 185 S(_FRAME_SAME_V).3 E 16.4(AL, D)-1.35 F(W_FRAME_CF)-.3
E 16.4(A_COL3 \(dw)-.74 F(arf_set_frame_rule_undef)-.1 E(ined_v)-.2 E
(alue\(\))-.25 E(dw)69.336 197 Q(arf_set_frame_same_v)-.1 E 2.198
(alue\(\) dw)-.25 F(arf_set_frame_cf)-.1 E(a_v)-.1 E 2.198(alue\(\) ef)
-.25 F(fecti)-.25 E -.15(ve)-.25 G 2.199(ly set these mark).15 F 2.199
(ers so the frame)-.1 F .892(rule table size can actually be an)69.336
209 R 3.392(yv)-.15 G .892(alue re)-3.642 F -.05(ga)-.15 G .892
(rdless of the macro v).05 F .891(alues in libdw)-.25 F .891
(arf.h as long as the table)-.1 F(size does not o)69.336 221 Q -.15(ve)
-.15 G(rlap these mark).15 E(ers\).)-.1 E/F2 10/Courier@0 SF(Dwarf_Half)
69.336 239 Q(dwarf_set_frame_rule_table_size\(Dwarf_Debug dbg,)69.336
251 Q(Dwarf_Half value\);)123.336 263 Q
(dwarf_set_frame_rule_table_size\(\))69.336 293 Q F0 2.309(sets the v)
4.808 F(alue)-.25 E F2(value)4.809 E F0 2.309(as the size of libdw)4.809
F(arf-internal)-.1 E(rules tables)69.336 305 Q(of)5 E F2(dbg)2.5 E F0(.)
A(The function returns the pre)69.336 323 Q(vious v)-.25 E
(alue of the rules table size setting \(tak)-.25 E(en from the)-.1 E F2
(dbg)2.5 E F0(structure\).)2.5 E F1 2.25(6.20.0.12 d)69.336 352 R
(warf_set_frame_rule_initial_v)-.135 E(alue\(\))-.09 E F0 1.43
(This allo)69.336 370 R 1.43(ws consumers to set the initial v)-.25 F
1.43(alue for ro)-.25 F 1.429(ws in the frame tables.)-.25 F 1.429
(By def)6.429 F 1.429(ault it is tak)-.1 F 1.429(en from)-.1 F(libdw)
69.336 382 Q 16.415(arf.h and is D)-.1 F(W_FRAME_REG_INITIAL_V)-.3 E
16.416(ALUE \(which itself is either)-1.35 F -.3(DW)69.336 394 S
(_FRAME_SAME_V).3 E 8.129(AL or D)-1.35 F(W_FRAME_UNDEFINED_V)-.3 E
10.628(AL\). The)-1.35 F 8.128(MIPS/IRIX def)10.628 F 8.128(ault is)-.1
F -.3(DW)69.336 406 S(_FRAME_SAME_V).3 E 3.045(AL. Consumer)-1.35 F .545
(code should set this appropriately and for man)3.045 F 3.046(ya)-.15 G
.546(rchitectures \(b)-3.046 F(ut)-.2 E .463(probably not MIPS\) D)
69.336 418 R(W_FRAME_UNDEFINED_V)-.3 E .463
(AL is an appropriate setting.)-1.35 F .462(Note: an earlier spelling)
5.463 F .71(of dw)69.336 430 R(arf_set_frame_rule_inital_v)-.1 E .71
(alue\(\) is still supported as an interf)-.25 F .71(ace, b)-.1 F .71
(ut please change to use the ne)-.2 F(w)-.25 E(correctly spelled name.)
69.336 442 Q F2(Dwarf_Half)69.336 460 Q
(dwarf_set_frame_rule_initial_value\(Dwarf_Debug dbg,)69.336 472 Q
(Dwarf_Half value\);)123.336 484 Q
(dwarf_set_frame_rule_initial_value\(\))69.336 514 Q F0 .042(sets the v)
2.542 F(alue)-.25 E F2(value)2.542 E F0 .042(as the initial v)2.542 F
.042(alue for this)-.25 F F2(dbg)2.541 E F0
(when initializing rules tables.)69.336 526 Q
(The function returns the pre)69.336 544 Q(vious v)-.25 E
(alue of initial v)-.25 E(alue \(tak)-.25 E(en from the)-.1 E F2(dbg)2.5
E F0(structure\).)2.5 E F1 2.25(6.20.0.13 d)69.336 573 R
(warf_set_frame_cfa_v)-.135 E(alue\(\))-.09 E F0 .538(This allo)69.336
591 R .538(ws consumers to set the number of the CF)-.25 F 3.038(Ar)-.74
G -.15(eg)-3.038 G .538(ister for ro).15 F .538(ws in the frame tables.)
-.25 F .538(By def)5.538 F .538(ault it is)-.1 F(tak)69.336 603 Q .267
(en from libdw)-.1 F .267(arf.h and is)-.1 F F2(DW_FRAME_CFA_COL)2.767 E
F0 5.267(.C)C .267(onsumer code should set this appropriately and for)
-5.267 F(nearly all architectures)69.336 615 Q F2(DW_FRAME_CFA_COL3)2.5
E F0(is an appropriate setting.)2.5 E F2(Dwarf_Half)69.336 633 Q
(dwarf_set_frame_rule_cfa_value\(Dwarf_Debug dbg,)69.336 645 Q
(Dwarf_Half value\);)123.336 657 Q(dwarf_set_frame_rule_cfa_value\(\))
69.336 687 Q F0 1.358(sets the v)3.858 F(alue)-.25 E F2(value)3.858 E F0
1.358(as the)3.858 F 1.358(number of the cf)6.358 F 3.859(a')-.1 G(re)
-4.359 E(gister)-.15 E(rule' for this)69.336 699 Q F2(dbg)2.5 E F0
(when initializing rules tables.)2.5 E(The function returns the pre)
69.336 717 Q(vious v)-.25 E(alue of the pseudo-re)-.25 E(gister \(tak)
-.15 E(en from the)-.1 E F2(dbg)2.5 E F0(structure\).)2.5 E(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(3-)-2.5
G 0 Cg EP
%%Page: 84 84
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(4-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.20.0.14 d)69.336 95 R(warf_set_frame_same_v)
-.135 E(alue\(\))-.09 E F0 2.831(This allo)69.336 113 R 2.831
(ws consumers to set the number of the pseudo-re)-.25 F 2.831
(gister when D)-.15 F(W_CF)-.3 E(A_same_v)-.74 E 2.83(alue is the)-.25 F
3.123(operation. By)69.336 125 R(def)3.123 E .624(ault it is tak)-.1 F
.624(en from libdw)-.1 F .624(arf.h and is)-.1 F/F2 10/Courier@0 SF
(DW_FRAME_SAME_VAL)3.124 E F0 5.624(.C)C .624(onsumer code should)-5.624
F(set this appropriately)69.336 137 Q 2.5(,t)-.65 G(hough for man)-2.5 E
2.5(ya)-.15 G(rchitectures)-2.5 E F2(DW_FRAME_SAME_VAL)2.5 E F0
(is an appropriate setting.)2.5 E F2(Dwarf_Half)69.336 155 Q
(dwarf_set_frame_rule_same_value\(Dwarf_Debug dbg,)69.336 167 Q
(Dwarf_Half value\);)123.336 179 Q(dwarf_set_frame_rule_same_value\(\))
69.336 209 Q F0 .808(sets the v)3.308 F(alue)-.25 E F2(value)3.307 E F0
.807(as the)3.307 F .807(number of the re)5.807 F .807(gister that)-.15
F(is the pseudo-re)69.336 221 Q(gister set by the D)-.15 E(W_CF)-.3 E
(A_same_v)-.74 E(alue frame operation.)-.25 E
(The function returns the pre)69.336 239 Q(vious v)-.25 E
(alue of the pseudo-re)-.25 E 2.5(gister \(tak)-.15 F(en from the)-.1 E
F2(dbg)2.5 E F0(structure\).)2.5 E F1 2.25(6.20.0.15 d)69.336 280 R
(warf_set_frame_undef)-.135 E(ined_v)-.225 E(alue\(\))-.09 E F0
(This allo)69.336 298 Q(ws consumers to set the number of the pseudo-re)
-.25 E(gister)-.15 E 3.65(when D)71.836 310 R(W_CF)-.3 E(A_undef)-.74 E
(ined_v)-.2 E 3.65(alue is the operation.)-.25 F 3.65(By def)8.65 F 3.65
(ault it is tak)-.1 F 3.65(en from libdw)-.1 F 3.65(arf.h and is)-.1 F
F2(DW_FRAME_UNDEFINED_VAL)69.336 322 Q F0 9.845(.C)C 4.845
(onsumer code should set this appropriately)-9.845 F 7.344(,t)-.65 G
4.844(hough for man)-7.344 F(y)-.15 E(architectures)69.336 334 Q F2
(DW_FRAME_UNDEFINED_VAL)2.5 E F0(is an appropriate setting.)2.5 E F2
(Dwarf_Half)69.336 352 Q
(dwarf_set_frame_rule_undefined_value\(Dwarf_Debug dbg,)69.336 364 Q
(Dwarf_Half value\);)123.336 376 Q
(dwarf_set_frame_rule_undefined_value\(\))69.336 406 Q F0 3.191
(sets the v)5.691 F(alue)-.25 E F2(value)5.691 E F0 3.191(as the)5.691 F
3.191(number of the)8.191 F(re)69.336 418 Q
(gister that is the pseudo-re)-.15 E(gister set by the D)-.15 E(W_CF)-.3
E(A_undef)-.74 E(ined_v)-.2 E(alue frame operation.)-.25 E
(The function returns the pre)69.336 436 Q(vious v)-.25 E
(alue of the pseudo-re)-.25 E 2.5(gister \(tak)-.15 F(en from the)-.1 E
F2(dbg)2.5 E F0(structure\).)2.5 E F1 2.25(6.20.0.16 d)69.336 465 R
(warf_set_default_addr)-.135 E(ess_size\(\))-.162 E F0 .069(This allo)
69.336 483 R .069(ws consumers to set a def)-.25 F .068
(ault address size.)-.1 F .068(When one has an object where the def)
5.068 F .068(ault address_size)-.1 F 1.955
(does not match the frame address size where there is no deb)69.336 495
R 1.956(ug_info a)-.2 F -.25(va)-.2 G 1.956
(ilable to get a frame-specif).25 F(ic)-.2 E 2.246
(address-size, this function is useful.)69.336 507 R -.15(Fo)7.246 G
4.746(re).15 G 2.246(xample, if an Elf64 object has a .deb)-4.896 F
2.246(ug_frame whose real)-.2 F(address_size is 4 \(32 bits\).)69.336
519 Q(This a v)5 E(ery rare situation.)-.15 E F2(Dwarf_Small)69.336 537
Q(dwarf_set_default_address_size\(Dwarf_Debug dbg,)69.336 549 Q
(Dwarf_Small value\);)123.336 561 Q(dwarf_set_default_address_size\(\))
69.336 591 Q F0 1.045(sets the v)3.545 F(alue)-.25 E F2(value)3.545 E F0
1.045(as the)3.545 F(def)6.046 E 1.046(ault address size for this)-.1 F
(acti)69.336 603 Q -.25(va)-.25 G 1.001(tion of the reader).25 F 3.501
(,b)-.4 G 1.001(ut only if)-3.701 F F2(value)3.501 E F0 1
(is greater than zero \(otherwise the def)3.501 F 1
(ault address size is not)-.1 F(changed\).)69.336 615 Q
(The function returns the pre)69.336 633 Q(vious v)-.25 E
(alue of the def)-.25 E(ault address size)-.1 E(\(tak)5 E(en from the)
-.1 E F2(dbg)2.5 E F0(structure\).)2.5 E F1 2.25(6.20.0.17 d)69.336 686
R(warf_get_fde_inf)-.135 E(o_f)-.225 E(or_r)-.225 E(eg3\(\))-.162 E F0
1.286(This interf)69.336 704 R 1.287(ace is suitable for D)-.1 F -1.2
(WA)-.3 G 1.287(RF3 and D)1.2 F -1.2(WA)-.3 G 3.787(RF2. It)1.2 F 1.287
(returns the v)3.787 F 1.287(alues for a particular real re)-.25 F
(gister)-.15 E 1.418(\(Not for the CF)69.336 716 R 3.918(Ar)-.74 G -.15
(eg)-3.918 G(ister).15 E 3.918(,s)-.4 G 1.418(ee dw)-3.918 F
(arf_get_fde_info_for_cf)-.1 E(a_re)-.1 E 1.418(g3\(\) belo)-.15 F 3.918
(w\). If)-.25 F 1.417(the application is going to)3.918 F(retrie)69.336
728 Q 1.376 -.15(ve t)-.25 H 1.076(he v).15 F 1.076
(alue for more than a fe)-.25 F(w)-.25 E F2(table_column)3.577 E F0 -.25
(va)3.577 G 1.077(lues at this).25 F F2(pc_requested)3.577 E F0 1.077
(\(by calling this)3.577 F .039
(function multiple times\) it is much more ef)69.336 740 R -.2(fi)-.25 G
.038(cient to call dw).2 F(arf_get_fde_info_for_all_re)-.1 E .038
(gs3\(\) \(in spite of the)-.15 F(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 85 85
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(5-)-2.5 G
(additional setup that requires of the caller\).)69.336 96 Q/F1 10
/Courier@0 SF(int dwarf_get_fde_info_for_reg3\()69.336 126 Q
(Dwarf_Fde fde,)117.336 138 Q(Dwarf_Half table_column,)117.336 150 Q
(Dwarf_Addr pc_requested,)117.336 162 Q 6(Dwarf_Small *value_type,)
117.336 174 R(Dwarf_Signed *offset_relevant,)117.336 186 Q
(Dwarf_Signed *register_num,)117.336 198 Q
(Dwarf_Signed *offset_or_block_len,)117.336 210 Q 18
(Dwarf_Ptr *block_ptr,)117.336 222 R 12(Dwarf_Addr *row_pc,)117.336 234
R 6(Dwarf_Error *error\);)117.336 246 R(dwarf_get_fde_info_for_reg3\(\))
69.336 264 Q F0(returns)4.543 E F1(DW_DLV_OK)4.543 E F0 2.044
(on success.)4.544 F 2.044(It sets)7.044 F F1(*value_type)4.544 E F0(to)
4.544 E 5.11(one of)69.336 276 R -.3(DW)10.11 G 5.11
(_EXPR_OFFSET \(0\), D).3 F(W_EXPR_V)-.3 E 5.11(AL_OFFSET\(1\), D)-1.35
F 5.11(W_EXPR_EXPRESSION\(2\) or)-.3 F -.3(DW)69.336 288 S(_EXPR_V).3 E
3.695(AL_EXPRESSION\(3\). On)-1.35 F(call,)3.695 E F1(table_column)3.695
E F0 1.195(must be set to the re)3.695 F 1.195(gister number of a)-.15 F
18.389(real re)69.336 300 R(gister)-.15 E 20.889(.N)-.55 G 18.389
(ot the cf)-20.889 F 20.889(a')-.1 G(re)-21.389 E 18.389(gister' or D)
-.15 F(W_FRAME_SAME_V)-.3 E 18.388(ALUE or)-1.35 F -.3(DW)69.336 312 S
(_FRAME_UNDEFINED_V).3 E(ALUE.)-1.35 E(if)69.336 348 Q F1(*value_type)
2.5 E F0(has the v)2.5 E(alue D)-.25 E(W_EXPR_OFFSET \(0\) then:)-.3 E
2.304(It sets)109.336 366 R F1(*offset_relevant)4.804 E F0 2.304
(to non-zero if the of)4.804 F 2.304(fset is rele)-.25 F -.25(va)-.25 G
2.305(nt for the ro).25 F 4.805(ws)-.25 G(pecif)-4.805 E 2.305(ied by)
-.2 F F1(pc_requested)109.336 378 Q F0 .672(and column specif)3.172 F
.672(ied by)-.2 F F1(table_column)3.172 E F0(or)3.172 E 3.172(,f)-.4 G
.671(or the FDE specif)-3.172 F .671(ied by)-.2 F F1(fde)3.171 E F0(.)A
2.204(In this case)109.336 390 R(the)7.204 E F1(*register_num)7.204 E F0
2.205(will be set to D)4.704 F(W_FRAME_CF)-.3 E 2.205(A_COL3 \(.)-.74 F
2.205(This is an)7.205 F(of)109.336 402 Q 7.331
(fset\(N\) rule as specif)-.25 F 7.331(ied in the D)-.2 F -1.2(WA)-.3 G
7.331(RF3/2 documents.)1.2 F 7.331(Adding the v)12.331 F 7.33(alue of)
-.25 F F1(*offset_or_block_len)109.336 414 Q F0 1.621(to the v)4.121 F
1.621(alue of the CF)-.25 F 4.122(Ar)-.74 G -.15(eg)-4.122 G 1.622
(ister gi).15 F -.15(ve)-.25 G 4.122(st).15 G 1.622
(he address of a location)-4.122 F(holding the pre)109.336 426 Q
(vious v)-.25 E(alue of re)-.25 E(gister)-.15 E F1(table_column)2.5 E F0
(.)A 1.018(If of)109.336 456 R 1.018(fset is not rele)-.25 F -.25(va)
-.25 G 1.018(nt for this rule,).25 F F1(*offset_relevant)3.518 E F0
1.017(is set to zero.)3.518 F F1(*register_num)6.017 E F0 .714
(will be set to the number of the real re)109.336 468 R .715
(gister holding the v)-.15 F .715(alue of the)-.25 F F1(table_column)
3.215 E F0(re)3.215 E(gister)-.15 E(.)-.55 E(This is the re)109.336 480
Q(gister\(R\) rule as specif)-.15 E(ied in D)-.2 E -1.2(WA)-.3 G
(RF3/2 documents.)1.2 E 1.208
(The intent is to return the rule for the gi)109.336 498 R -.15(ve)-.25
G 3.708(np).15 G 3.708(cv)-3.708 G 1.208(alue and re)-3.958 F(gister)
-.15 E 6.208(.T)-.55 G 1.207(he location pointed to by)-6.208 F F1
(register_num)109.336 510 Q F0 .52(is set to the re)3.02 F .52(gister v)
-.15 F .52(alue for the rule.)-.25 F .52(The location pointed to by)5.52
F F1(offset)3.02 E F0(is)3.02 E .931(set to the of)109.336 522 R .931
(fset v)-.25 F .931(alue for the rule.)-.25 F .93
(Since more than one pc v)5.931 F .93(alue will ha)-.25 F 1.23 -.15
(ve r)-.2 H -.25(ow).15 G 3.43(sw).25 G .93(ith identical)-3.43 F .472
(entries, the user may w)109.336 534 R .473(ant to kno)-.1 F 2.973(wt)
-.25 G .473(he earliest pc v)-2.973 F .473
(alue after which the rules for all the columns)-.25 F .737
(remained unchanged.)109.336 546 R .737(Recall that in the virtual tabl\
e that the frame information represents there)5.737 F .681
(may be one or more table ro)109.336 558 R .682
(ws with identical data \(each such table ro)-.25 F 3.182(wa)-.25 G
3.182(tad)-3.182 G(if)-3.182 E .682(ferent pc v)-.25 F(alue\).)-.25 E
(Gi)109.336 570 Q -.15(ve)-.25 G 3.743(na).15 G F1(pc_requested)A F0
1.242(which refers to a pc in such a group of identical ro)3.743 F 1.242
(ws, the location)-.25 F(pointed to by)109.336 582 Q F1(row_pc)2.5 E F0
(is set to the lo)2.5 E(west pc v)-.25 E(alue within the group of)-.25 E
(identical ro)5 E(ws.)-.25 E(If)69.336 624 Q F1(*value_type)2.5 E F0
(has the v)2.5 E(alue D)-.25 E(W_EXPR_V)-.3 E(AL_OFFSET \(1\) then:)
-1.35 E 6.835(This will be a v)109.336 636 R(al_of)-.25 E 6.835
(fset\(N\) rule as specif)-.25 F 6.835(ied in the D)-.2 F -1.2(WA)-.3 G
6.835(RF3/2 documents so)1.2 F F1(*offset_relevant)109.336 648 Q F0
8.825(will be non zero.)11.325 F 8.825
(The calculation is identical to the)13.825 F -.3(DW)109.336 660 S 3.486
(_EXPR_OFFSET \(0\) calculation with).3 F F1(*offset_relevant)8.486 E F0
3.486(non-zero, b)5.986 F 3.487(ut the v)-.2 F(alue)-.25 E 1.073
(resulting is the actual)109.336 672 R F1(table_column)3.573 E F0 -.25
(va)3.573 G 1.073(lue \(rather than the address where the v).25 F 1.072
(alue may be)-.25 F(found\).)109.336 684 Q(If)69.336 702 Q F1
(*value_type)2.5 E F0(has the v)2.5 E(alue D)-.25 E
(W_EXPR_EXPRESSION \(1\) then:)-.3 E F1(*offset_or_block_len)111.836 714
Q F0 .457(is set to the length in bytes of a block of memory with a D)
2.956 F -1.2(WA)-.3 G(RF)1.2 E -.15(ex)109.336 726 S 1.096
(pression in the block.).15 F F1(*block_ptr)6.096 E F0 1.096
(is set to point at the block of memory)3.596 F 6.096(.T)-.65 G 1.096
(he consumer)-6.096 F 1.611(code should)109.336 738 R -.25(eva)6.611 G
1.611(luate the block as a D).25 F -1.2(WA)-.3 G(RF-e)1.2 E 1.612
(xpression. The result is the address where the)-.15 F(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(5-)-2.5 G 0 Cg
EP
%%Page: 86 86
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(6-)-2.5 G(pre)109.336 96
Q(vious v)-.25 E(alue of the re)-.25 E(gister may be found.)-.15 E
(This is a D)5 E -1.2(WA)-.3 G(RF3/2 e)1.2 E(xpression\(E\) rule.)-.15 E
(If)69.336 114 Q/F1 10/Courier@0 SF(*value_type)2.5 E F0(has the v)2.5 E
(alue D)-.25 E(W_EXPR_V)-.3 E(AL_EXPRESSION \(1\) then:)-1.35 E 1.157
(The calculation is e)109.336 126 R 1.156(xactly as for D)-.15 F 1.156
(W_EXPR_EXPRESSION \(1\) b)-.3 F 1.156(ut the result of the D)-.2 F -1.2
(WA)-.3 G(RF-)1.2 E -.15(ex)109.336 138 S .641(pression e).15 F -.25(va)
-.25 G .641(luation is the v).25 F .641(alue of the)-.25 F F1
(table_column)8.141 E F0 .642(\(not the address of the v)3.141 F 3.142
(alue\). This)-.25 F(is a D)109.336 150 Q -1.2(WA)-.3 G(RF3/2 v)1.2 E
(al_e)-.25 E(xpression\(E\) rule.)-.15 E F1(dwarf_get_fde_info_for_reg)
69.336 174 Q F0(returns)2.963 E F1(DW_DLV_ERROR)2.963 E F0 .462
(if there is an error and if there is an error)2.963 F(only the)69.336
186 Q F1(error)2.5 E F0(pointer is set, none of the other output ar)2.5
E(guments are touched.)-.18 E(It is usable with either)69.336 210 Q F1
(dwarf_get_fde_n\(\))2.5 E F0(or)2.5 E F1(dwarf_get_fde_at_pc\(\))2.5 E
F0(.)A/F2 9/Times-Bold@0 SF 2.25(6.20.0.18 d)69.336 251 R
(warf_get_fde_inf)-.135 E(o_f)-.225 E(or_cfa_r)-.225 E(eg3\(\))-.162 E
F1(int dwarf_get_fde_info_for_cfa_reg3\(Dwarf_Fde fde,)71.836 269 Q 54
(Dwarf_Addr pc_requested,)105.336 281 R(Dwarf_Small *)105.336 293 Q
(value_type,)42 E 36(Dwarf_Signed* offset_relevant,)105.336 305 R 36
(Dwarf_Signed* register_num,)105.336 317 R 36
(Dwarf_Signed* offset_or_block_len,)105.336 329 R 12(Dwarf_Ptr *)105.336
341 R(block_ptr ,)42 E 6(Dwarf_Addr *)105.336 353 R(row_pc_out,)42 E
(Dwarf_Error *)105.336 365 Q(error\))42 E F0 .603(This is identical to)
69.336 383 R F1(dwarf_get_fde_info_for_reg3\(\))5.603 E F0 -.15(ex)3.103
G .603(cept the returned v).15 F .604(alues are for the CF)-.25 F(A)-.74
E 3.378(rule. So)69.336 395 R(re)3.377 E .877(gister number)-.15 F F1
(*register_num)3.377 E F0 .877(will be set to a real re)3.377 F(gister)
-.15 E 3.377(,n)-.4 G .877(ot one of the pseudo re)-3.377 F(gisters)-.15
E 20.332(\(which are usually D)69.336 407 R(W_FRAME_CF)-.3 E 20.332
(A_COL3, D)-.74 F(W_FRAME_SAME_V)-.3 E 20.332(ALUE, or)-1.35 F -.3(DW)
69.336 419 S(_FRAME_UNDEFINED_V).3 E(ALUE\).)-1.35 E F2 2.25
(6.20.0.19 d)69.336 472 R(warf_get_fde_inf)-.135 E(o_f)-.225 E(or_all_r)
-.225 E(egs3\(\))-.162 E F1(int dwarf_get_fde_info_for_all_regs3\()
69.336 490 Q(Dwarf_Fde fde,)117.336 502 Q(Dwarf_Addr pc_requested,)
117.336 514 Q(Dwarf_Regtable3 *reg_table,)117.336 526 Q
(Dwarf_Addr *row_pc,)117.336 538 Q(Dwarf_Error *error\))117.336 550 Q
(dwarf_get_fde_info_for_all_regs3\(\))69.336 568 Q F0(returns)4.702 E F1
(DW_DLV_OK)4.702 E F0 2.201(and sets)4.702 F F1(*reg_table)4.701 E F0
2.201(for the)4.701 F(ro)69.336 580 Q 3.95(ws)-.25 G(pecif)-3.95 E 1.45
(ied by)-.2 F F1(pc_requested)3.95 E F0 1.45(for the FDE specif)3.95 F
1.45(ied by)-.2 F F1(fde)3.95 E F0 6.45(.T)C 1.45
(he intent is to return the rules for)-6.45 F .814(decoding all the re)
69.336 592 R .814(gisters, gi)-.15 F -.15(ve)-.25 G 3.314(nap).15 G
3.314(cv)-3.314 G(alue.)-3.564 E F1(reg_table)5.814 E F0 .814
(is an array of rules, the array size specif)3.314 F .813(ied by)-.2 F
.508(the caller)69.336 604 R 5.508(.p)-.55 G .508(lus a rule for the CF)
-5.508 F 3.008(A. The)-.74 F .508(rule for the cf)3.008 F 3.009(ar)-.1 G
.509(eturned in)-3.009 F F1(*reg_table)5.509 E F0(def)3.009 E .509
(ines the CF)-.2 F 3.009(Av)-.74 G(alue)-3.259 E(at)69.336 616 Q F1
(pc_requested)7.524 E F0 2.524(The rule for each re)5.024 F 2.524
(gister contains)-.15 F(se)7.524 E -.15(ve)-.25 G 2.523(ral v).15 F
2.523(alues that enable the consumer to)-.25 F 3.791(determine the pre)
69.336 628 R 3.791(vious v)-.25 F 3.792(alue of the re)-.25 F 3.792
(gister \(see the earlier documentation of Dw)-.15 F(arf_Re)-.1 E
(gtable3\).)-.15 E F1(dwarf_get_fde_info_for_reg3\(\))69.336 640 Q F0
5.912(and the Dw)10.912 F(arf_Re)-.1 E 5.911(gtable3 documentation abo)
-.15 F 6.211 -.15(ve f)-.15 H 5.911(or a).15 F(description of the v)
69.336 652 Q(alues for each ro)-.25 E -.65(w.)-.25 G F1
(dwarf_get_fde_info_for_all_regs3)69.336 676 Q F0(returns)2.5 E F1
(DW_DLV_ERROR)2.5 E F0(if there is an error)2.5 E(.)-.55 E
(It is up to the caller to allocate space for)69.336 700 Q F1
(*reg_table)2.5 E F0(and initialize it properly)2.5 E(.)-.65 E(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(6-)-2.5
G 0 Cg EP
%%Page: 87 87
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(7-)-2.5 G/F1 9
/Times-Bold@0 SF 2.25(6.20.0.20 d)69.336 95 R(warf_get_fde_n\(\))-.135 E
/F2 10/Courier@0 SF 12(int dwarf_get_fde_n\()69.336 113 R
(Dwarf_Fde *fde_data,)117.336 125 Q(Dwarf_Unsigned fde_index,)117.336
137 Q 30(Dwarf_Fde *returned_fde)117.336 149 R(Dwarf_Error *error\))
117.336 161 Q(dwarf_get_fde_n\(\))69.336 179 Q F0(returns)3.644 E F2
(DW_DLV_OK)3.644 E F0 1.144(and sets)3.644 F F2(returned_fde)3.644 E F0
1.145(to the)3.645 F F2(Dwarf_Fde)3.645 E F0(descriptor)3.645 E .144
(whose inde)69.336 191 R 2.644(xi)-.15 G(s)-2.644 E F2(fde_index)2.644 E
F0 .144(in the table of)2.644 F F2(Dwarf_Fde)2.644 E F0 .144
(descriptors pointed to by)2.644 F F2(fde_data)2.644 E F0 5.144(.T)C
.144(he inde)-5.144 F(x)-.15 E .579(starts with 0.)69.336 203 R .579(Th\
e table pointed to by fde_data is required to contain at least one entr\
y)5.579 F 3.079(.I)-.65 G 3.079(ft)-3.079 G .579(he table has no)-3.079
F 1.662
(entries at all the error checks may refer to uninitialized memory)
69.336 215 R 6.662(.R)-.65 G(eturns)-6.662 E F2(DW_DLV_NO_ENTRY)4.162 E
F0 1.662(if the)4.162 F(inde)69.336 227 Q 2.67(xd)-.15 G .17(oes not e)
-2.67 F .17(xist in the table of)-.15 F F2(Dwarf_Fde)2.671 E F0 2.671
(descriptors. Returns)2.671 F F2(DW_DLV_ERROR)2.671 E F0 .171
(if there is an error)2.671 F(.)-.55 E 1.21
(This function cannot be used unless the block of)69.336 239 R F2
(Dwarf_Fde)3.71 E F0 1.21(descriptors has been created by a call to)3.71
F F2(dwarf_get_fde_list\(\))69.336 251 Q F0(.)A F1 2.25(6.20.0.21 d)
69.336 280 R(warf_get_fde_at_pc\(\))-.135 E F2 12
(int dwarf_get_fde_at_pc\()69.336 298 R(Dwarf_Fde *fde_data,)117.336 310
Q(Dwarf_Addr pc_of_interest,)117.336 322 Q(Dwarf_Fde *returned_fde,)
117.336 334 Q(Dwarf_Addr *lopc,)117.336 346 Q(Dwarf_Addr *hipc,)117.336
358 Q(Dwarf_Error *error\))117.336 370 Q(dwarf_get_fde_at_pc\(\))69.336
388 Q F0(returns)7.071 E F2(DW_DLV_OK)7.071 E F0 4.571(and sets)7.071 F
F2(returned_fde)7.071 E F0 4.572(to a)7.071 F F2(Dwarf_Fde)7.072 E F0
.345(descriptor for a function which contains the pc v)69.336 400 R .345
(alue specif)-.25 F .345(ied by)-.2 F F2(pc_of_interest)2.844 E F0 5.344
(.I)C 2.844(na)-5.344 G .344(ddition, it sets)-2.844 F .504
(the locations pointed to by)69.336 412 R F2(lopc)3.004 E F0(and)3.005 E
F2(hipc)3.005 E F0 .505(to the lo)3.005 F 3.005(wa)-.25 G .505
(ddress and the high address co)-3.005 F -.15(ve)-.15 G .505
(red by this FDE,).15 F(respecti)69.336 424 Q -.15(ve)-.25 G(ly).15 E
5.726(.T)-.65 G .725(he table pointed to by fde_data is required to con\
tain at least one entry)-5.726 F 3.225(.I)-.65 G 3.225(ft)-3.225 G .725
(he table has no)-3.225 F .74
(entries at all the error checks may refer to uninitialized memory)
69.336 436 R 5.74(.I)-.65 G 3.24(tr)-5.74 G(eturns)-3.24 E F2
(DW_DLV_ERROR)3.24 E F0 .74(on error)3.24 F 5.74(.I)-.55 G(t)-5.74 E
(returns)69.336 448 Q F2(DW_DLV_NO_ENTRY)2.694 E F0(if)2.694 E F2
(pc_of_interest)2.694 E F0 .194(is not in an)2.694 F 2.694(yo)-.15 G
2.694(ft)-2.694 G .194(he FDEs represented by the block of)-2.694 F F2
(Dwarf_Fde)69.336 460 Q F0 1.788(descriptors pointed to by)4.287 F F2
(fde_data)4.288 E F0 6.788(.T)C 1.788
(his function cannot be used unless the block of)-6.788 F F2(Dwarf_Fde)
69.336 472 Q F0(descriptors has been created by a call to)2.5 E F2
(dwarf_get_fde_list\(\))2.5 E F0(.)A F1 2.25(6.20.0.22 d)69.336 501 R
(warf_expand_frame_instructions\(\))-.135 E F2
(int dwarf_expand_frame_instructions\()69.336 519 Q(Dwarf_Cie cie,)
117.336 531 Q(Dwarf_Ptr instruction,)117.336 543 Q
(Dwarf_Unsigned i_length,)117.336 555 Q
(Dwarf_Frame_Op **returned_op_list,)117.336 567 Q 12(Dwarf_Signed *)
117.336 579 R(returned_op_count,)6 E(Dwarf_Error *error\);)117.336 591 Q
(dwarf_expand_frame_instructions\(\))69.336 609 Q F0 .555(is a High-le)
3.055 F -.15(ve)-.25 G 3.055(li).15 G(nterf)-3.055 E .554
(ace function which e)-.1 F .554(xpands a frame)-.15 F 1.792
(instruction byte stream into an array of)69.336 621 R F2
(Dwarf_Frame_Op)4.292 E F0 4.292(structures. T)4.292 F 4.293(oi)-.8 G
1.793(ndicate success, it returns)-4.293 F F2(DW_DLV_OK)69.336 633 Q F0
5.161(.T)C .161(he address where the byte stream be)-5.161 F .161
(gins is specif)-.15 F .161(ied by)-.2 F F2(instruction)2.66 E F0 2.66
(,a)C .16(nd the length of)-2.66 F 1.048(the byte stream is specif)
69.336 645 R 1.048(ied by)-.2 F F2(i_length)3.548 E F0 6.048(.T)C 1.048
(he location pointed to by)-6.048 F F2(returned_op_list)3.548 E F0 1.048
(is set to)3.548 F 2.17(point to a table of)69.336 657 R F2
(returned_op_count)4.669 E F0 2.169(pointers to)4.669 F F2
(Dwarf_Frame_Op)4.669 E F0 2.169(which contain the frame)4.669 F 7.583
(instructions in the byte stream.)69.336 669 R 7.583(It returns)12.583 F
F2(DW_DLV_ERROR)10.083 E F0 7.584(on error)10.083 F 12.584(.I)-.55 G
10.084(tn)-12.584 G -2.15 -.25(ev e)-10.084 H 10.084(rr).25 G(eturns)
-10.084 E F2(DW_DLV_NO_ENTRY)69.336 681 Q F0 9.641(.A)C 4.641(fter a su\
ccessful return, the array of structures should be freed using)-9.641 F
F2(dwarf_dealloc\(\))69.336 693 Q F0 1.972(with the allocation type)
4.471 F F2(DW_DLA_FRAME_BLOCK)4.472 E F0 1.972(\(when the)4.472 F 4.472
(ya)-.15 G 1.972(re no longer of)-4.472 F(interest\).)69.336 705 Q
(Not all CIEs ha)69.336 723 Q .3 -.15(ve t)-.2 H(he same address-size, \
so it is crucial that a CIE pointer to the frame').15 E 2.5(sC)-.55 G
(IE be passed in.)-2.5 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)
-2.5 E 2.5(-8)120.71 G 2.5(7-)-2.5 G 0 Cg EP
%%Page: 88 88
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(8-)-2.5 G/F1 10
/Courier@0 SF(void examples\(Dwarf_Cie cie,Dwarf_Ptr instruction,Dwarf_\
Unsigned len\)\))89.336 96 Q({)89.336 108 Q(Dwarf_Signed cnt = 0;)
101.336 120 Q(Dwarf_Frame_Op *frameops = 0;)101.336 132 Q(int res = 0;)
101.336 144 Q(res = expand_frame_instructions\(dbg,instruction,len,)
101.336 168 Q(&frameops,&cnt, &error\);)113.336 180 Q
(if \(res == DW_DLV_OK\) {)101.336 192 Q(for \(i = 0; i < cnt; ++i\) {)
113.336 204 Q(/* use frameops[i] */)125.336 216 Q(})113.336 228 Q
(dwarf_dealloc\(dbg, frameops, DW_DLA_FRAME_BLOCK\);)113.336 240 Q(})
101.336 252 Q(})89.336 264 Q/F2 9/Times-Bold@0 SF 2.25(6.20.0.23 d)
69.336 281 R(warf_get_fde_exception_inf)-.135 E(o\(\))-.225 E F1
(int dwarf_get_fde_exception_info\()69.336 299 Q(Dwarf_Fde fde,)93.336
311 Q(Dwarf_Signed * offset_into_exception_tables,)93.336 323 Q
(Dwarf_Error * error\);)93.336 335 Q(dwarf_get_fde_exception_info\(\))
69.336 353 Q F0 .629(is an IRIX specif)3.129 F .629
(ic function which returns an e)-.2 F .629(xception table)-.15 F 9.042
(signed of)69.336 365 R 9.043(fset through)-.25 F F1
(offset_into_exception_tables)11.543 E F0 14.043(.T)C 9.043
(he function ne)-14.043 F -.15(ve)-.25 G 11.543(rr).15 G(eturns)-11.543
E F1(DW_DLV_NO_ENTRY)69.336 377 Q F0 7.273(.I)C(f)-7.273 E F1
(DW_DLV_NO_ENTRY)4.773 E F0 2.272(is NULL the function returns)4.772 F
F1(DW_DLV_ERROR)4.772 E F0 7.272(.F)C(or)-7.422 E 1.498
(non-IRIX objects the of)69.336 389 R 1.498(fset returned will al)-.25 F
-.1(wa)-.1 G 1.499(ys be zero.).1 F -.15(Fo)6.499 G 3.999(rn).15 G 1.499
(on-C++ objects the of)-3.999 F 1.499(fset returned will)-.25 F(al)
69.336 401 Q -.1(wa)-.1 G .992(ys be zero.).1 F .991
(The meaning of the of)5.991 F .991
(fset and the content of the tables is not def)-.25 F .991
(ined in this document.)-.2 F
(The applicable CIE augmentation string \(see abo)69.336 413 Q -.15(ve)
-.15 G 2.5(\)d).15 G(etermines whether the v)-2.5 E
(alue returned has meaning.)-.25 E/F3 12/Times-Bold@0 SF 3
(6.21 Location)69.336 447 R(Expr)3 E(ession Ev)-.216 E(aluation)-.12 E
F0 .91(An "interpreter" which e)69.336 477 R -.25(va)-.25 G .91
(luates a location e).25 F .91(xpression is required in an)-.15 F 3.41
(yd)-.15 G(eb)-3.41 E(ugger)-.2 E 5.91(.T)-.55 G .91(here is no interf)
-5.91 F(ace)-.1 E(def)69.336 489 Q(ined here at this time.)-.2 E 1.854
(One problem with def)69.336 519 R 1.854(ining an interf)-.2 F 1.854
(ace is that operations are machine dependent: the)-.1 F 4.354(yd)-.15 G
1.854(epend on the)-4.354 F .182(interpretation of re)69.336 531 R .182
(gister numbers and the methods of getting v)-.15 F .182
(alues from the en)-.25 F .182(vironment the e)-.4 F .182(xpression is)
-.15 F(applied to.)69.336 543 Q(It w)69.336 573 Q
(ould be desirable to specify an interf)-.1 E(ace.)-.1 E/F4 11
/Times-Bold@0 SF 2.75(6.21.1 Location)69.336 606 R(List Inter)2.75 E
(nal-le)-.165 E -.11(ve)-.165 G 2.75(lI).11 G(nterface)-2.75 E F2 2.25
(6.21.1.1 d)69.336 641 R(warf_get_loclist_entry\(\))-.135 E F0(re)69.336
768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(8-)-2.5
G 0 Cg EP
%%Page: 89 89
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-8)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_get_loclist_entry\()69.336 96 Q
(Dwarf_Debug dbg,)117.336 108 Q(Dwarf_Unsigned offset,)117.336 120 Q
(Dwarf_Addr *hipc_offset,)117.336 132 Q(Dwarf_Addr *lopc_offset,)117.336
144 Q(Dwarf_Ptr *data,)117.336 156 Q(Dwarf_Unsigned *entry_len,)117.336
168 Q(Dwarf_Unsigned *next_entry,)117.336 180 Q(Dwarf_Error *error\))
117.336 192 Q F0 .46
(The function reads a location list entry starting at)69.336 210 R F1
(offset)2.96 E F0 .46(and returns through pointers \(when successful\))
2.96 F .604(the high pc)69.336 222 R F1(hipc_offset)3.104 E F0 3.104(,l)
C 1.104 -.25(ow p)-3.104 H(c).25 E F1(lopc_offset)3.104 E F0 3.104(,ap)C
.604(ointer to the location description data)-3.104 F F1(data)3.104 E F0
3.104(,t)C(he)-3.104 E 1.008(length of the location description data)
69.336 234 R F1(entry_len)3.508 E F0 3.508(,a)C 1.008(nd the of)-3.508 F
1.008(fset of the ne)-.25 F 1.008(xt location description entry)-.15 F
F1(next_entry)69.336 246 Q F0(.)A .326(This function will usually w)
69.336 264 R .327(ork correctly \(meaning with most objects\) b)-.1 F
.327(ut will not w)-.2 F .327(ork correctly \(and can)-.1 F .136(crash \
an application calling it\) if either some location list applies to a c\
ompilation unit with an address_size)69.336 276 R(dif)69.336 288 Q .571
(ferent from the o)-.25 F -.15(ve)-.15 G .572
(rall address_size of the object f).15 F .572
(ile being read or if the .deb)-.2 F .572(ug_loc section being read)-.2
F .362(has random padding bytes between loclists.)69.336 300 R .362
(Neither of these characteristics necessarily represents a b)5.362 F
.362(ug in)-.2 F 1.602(the compiler/link)69.336 312 R 1.603
(er toolset that produced the object f)-.1 F 1.603(ile being read.)-.2 F
1.603(The D)6.603 F -1.2(WA)-.3 G 1.603(RF standard allo)1.2 F 1.603
(ws both)-.25 F(characteristics.)69.336 324 Q F1
(dwarf_dwarf_get_loclist_entry\(\))69.336 342 Q F0(returns)2.559 E F1
(DW_DLV_OK)2.559 E F0 .058(if successful.)2.558 F F1(DW_DLV_NO_ENTRY)
5.058 E F0(is)2.558 E 1.283(returned when the of)69.336 354 R 1.284
(fset passed in is be)-.25 F 1.284(yond the end of the .deb)-.15 F 1.284
(ug_loc section \(e)-.2 F 1.284(xpected if you start at)-.15 F(of)69.336
366 Q(fset zero and proceed through all the entries\).)-.25 E F1
(DW_DLV_ERROR)5 E F0(is returned on error)2.5 E(.)-.55 E(The)69.336 384
Q F1(hipc_offset)3.108 E F0 3.108(,l)C 1.107 -.25(ow p)-3.108 H(c).25 E
F1(lopc_offset)3.107 E F0 .607(are of)3.107 F .607(fsets from the be)
-.25 F .607(ginning of the current procedure, not)-.15 F(genuine pc v)
69.336 396 Q(alues.)-.25 E F1
(void examplet\(Dwarf_Debug dbg,Dwarf_Unsigned offset\))89.336 414 Q({)
89.336 426 Q(/* Looping through the dwarf_loc section finding loclists:)
101.336 438 Q(an example.)119.336 450 Q(*/)12 E(int res;)101.336 462 Q
(Dwarf_Unsigned next_entry = 0;)101.336 474 Q(Dwarf_Addr hipc_off = 0;)
101.336 486 Q(Dwarf_Addr lowpc_off = 0;)101.336 498 Q
(Dwarf_Ptr data = 0;)101.336 510 Q(Dwarf_Unsigned entry_len = 0;)101.336
522 Q(Dwarf_Error err = 0;)101.336 534 Q(for\(;;\) {)101.336 558 Q
(res = dwarf_get_loclist_entry\(dbg,offset,&hipc_off,)113.336 570 Q
(&lowpc_off, &data, &entry_len,&next_entry,&err\);)125.336 582 Q
(if \(res == DW_DLV_OK\) {)113.336 594 Q(/* A valid entry. */)125.336
606 Q(offset = next_entry;)125.336 618 Q(continue;)125.336 630 Q 6(}e)
113.336 642 S(lse if \(res ==DW_DLV_NO_ENTRY\) {)-6 E(/* Done! */)
125.336 654 Q(break;)125.336 666 Q 6(}e)113.336 678 S(lse {)-6 E
(/* Error! */)125.336 690 Q(break;)125.336 702 Q(})113.336 714 Q(})
101.336 726 Q(})89.336 738 Q F0(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-8)120.71 G 2.5(9-)-2.5 G 0 Cg EP
%%Page: 90 90
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(0-)-2.5 G/F1 12
/Times-Bold@0 SF 3(6.22 Ab)69.336 100 R(br)-.12 E -.18(ev)-.216 G
(iations access).18 E F0(These are Internal-le)69.336 118 Q -.15(ve)-.25
G 2.5(lI).15 G(nterf)-2.5 E(ace functions.)-.1 E(Deb)5 E
(uggers can ignore this.)-.2 E/F2 11/Times-Bold@0 SF 2.75(6.22.1 d)
69.336 151 R(warf_get_ab)-.165 E(br)-.11 E -.165(ev)-.198 G(\(\)).165 E
/F3 10/Courier@0 SF(int dwarf_get_abbrev\()69.336 169 Q
(Dwarf_Debug dbg,)117.336 181 Q(Dwarf_Unsigned offset,)117.336 193 Q 12
(Dwarf_Abbrev *returned_abbrev,)117.336 205 R(Dwarf_Unsigned *length,)
117.336 217 Q(Dwarf_Unsigned *attr_count,)117.336 229 Q
(Dwarf_Error *error\))117.336 241 Q F0 5.016(The function)69.336 259 R
F3(dwarf_get_abbrev\(\))7.516 E F0(returns)7.516 E F3(DW_DLV_OK)7.516 E
F0 5.016(and sets)7.516 F F3(*returned_abbrev)7.517 E F0(to)7.517 E F3
(Dwarf_Abbrev)69.336 271 Q F0 2.702(descriptor for an abbre)5.202 F
2.702(viation at of)-.25 F(fset)-.25 E F3(*offset)5.202 E F0 2.701
(in the abbre)5.202 F 2.701(viations section \(i.e)-.25 F(.deb)69.336
283 Q(ug_abbre)-.2 E 1.508(v\) on success.)-.25 F 1.508
(The user is responsible for making sure that a v)6.508 F 1.508
(alid abbre)-.25 F 1.508(viation be)-.25 F 1.508(gins at)-.15 F F3
(offset)69.336 295 Q F0 .694(in the abbre)3.194 F .694
(viations section.)-.25 F .694(The location pointed to by)5.694 F F3
(length)3.194 E F0 .694(is set to the length in bytes of)3.194 F 2.15
(the abbre)69.336 307 R 2.15(viation in the abbre)-.25 F 2.15
(viations section.)-.25 F 2.15(The location pointed to by)7.15 F F3
(attr_count)4.65 E F0 2.15(is set to the)4.65 F .638(number of attrib)
69.336 319 R .638(utes in the abbre)-.2 F 3.138(viation. An)-.25 F
(abbre)3.138 E .637
(viation entry with a length of 1 is the 0 byte of the last)-.25 F
(abbre)69.336 331 Q .435(viation entry of a compilation unit.)-.25 F F3
(dwarf_get_abbrev\(\))5.435 E F0(returns)2.936 E F3(DW_DLV_ERROR)2.936 E
F0 .436(on error)2.936 F 5.436(.I)-.55 G(f)-5.436 E 5.967
(the call succeeds, the storage pointed to by)69.336 343 R F3
(*returned_abbrev)8.467 E F0 5.966(should be freed, using)8.466 F F3
(dwarf_dealloc\(\))69.336 355 Q F0(with the allocation type)2.5 E F3
(DW_DLA_ABBREV)2.5 E F0(when no longer needed.)2.5 E F2 2.75(6.22.2 d)
69.336 400 R(warf_get_ab)-.165 E(br)-.11 E -.165(ev)-.198 G(_tag\(\))
.165 E F3(int dwarf_get_abbrev_tag\()69.336 418 Q(Dwarf_abbrev abbrev,)
117.336 430 Q 6(Dwarf_Half *return_tag,)117.336 442 R
(Dwarf_Error *error\);)117.336 454 Q F0 .365(If successful,)69.336 472 R
F3(dwarf_get_abbrev_tag\(\))2.865 E F0(returns)2.865 E F3(DW_DLV_OK)
2.865 E F0 .365(and sets)2.865 F F3(*return_tag)2.866 E F0 .366(to the)
2.866 F/F4 10/Times-Italic@0 SF(ta)2.866 E(g)-.1 E F0(of)2.866 E(the gi)
69.336 484 Q -.15(ve)-.25 G 2.5(na).15 G(bbre)-2.5 E 2.5(viation. It)
-.25 F(returns)2.5 E F3(DW_DLV_ERROR)2.5 E F0(on error)2.5 E 5(.I)-.55 G
2.5(tn)-5 G -2.15 -.25(ev e)-2.5 H 2.5(rr).25 G(eturns)-2.5 E F3
(DW_DLV_NO_ENTRY)2.5 E F0(.)A F2 2.75(6.22.3 d)69.336 517 R(warf_get_ab)
-.165 E(br)-.11 E -.165(ev)-.198 G(_code\(\)).165 E F3
(int dwarf_get_abbrev_code\()69.336 535 Q 24(Dwarf_abbrev abbrev,)
117.336 547 R 6(Dwarf_Unsigned *return_code,)117.336 559 R 24
(Dwarf_Error *error\);)117.336 571 R F0 2.004(If successful,)69.336 589
R F3(dwarf_get_abbrev_code\(\))4.504 E F0(returns)4.504 E F3(DW_DLV_OK)
4.503 E F0 2.003(and sets)4.503 F F3(*return_code)4.503 E F0 2.003
(to the)4.503 F(abbre)69.336 601 Q 2.947(viation code of the gi)-.25 F
-.15(ve)-.25 G 5.448(na).15 G(bbre)-5.448 E 5.448(viation. It)-.25 F
(returns)5.448 E F3(DW_DLV_ERROR)5.448 E F0 2.948(on error)5.448 F 7.948
(.I)-.55 G 5.448(tn)-7.948 G -2.15 -.25(ev e)-5.448 H 5.448(rr).25 G
(eturns)-5.448 E F3(DW_DLV_NO_ENTRY)69.336 613 Q F0(.)A F2 2.75
(6.22.4 d)69.336 646 R(warf_get_ab)-.165 E(br)-.11 E -.165(ev)-.198 G
(_childr).165 E(en_flag\(\))-.198 E F3
(int dwarf_get_abbrev_children_flag\()69.336 664 Q(Dwarf_Abbrev abbrev,)
117.336 676 Q 6(Dwarf_Signed *returned_flag,)117.336 688 R
(Dwarf_Error *error\))117.336 700 Q F0 10.819(The function)69.336 718 R
F3(dwarf_get_abbrev_children_flag\(\))13.319 E F0(returns)13.318 E F3
(DW_DLV_OK)13.318 E F0 10.818(and sets)13.318 F F3(returned_flag)69.336
730 Q F0(to)5.75 E F3(DW_children_no)5.75 E F0 3.251(\(if the gi)5.751 F
-.15(ve)-.25 G 5.751(na).15 G(bbre)-5.751 E 3.251
(viation indicates that a die with that)-.25 F(abbre)69.336 742 Q .807
(viation has no children\) or)-.25 F F3(DW_children_yes)3.307 E F0 .806
(\(if the gi)3.307 F -.15(ve)-.25 G 3.306(na).15 G(bbre)-3.306 E .806
(viation indicates that a die with)-.25 F(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(0-)-2.5 G 0 Cg EP
%%Page: 91 91
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(1-)-2.5 G(that abbre)
69.336 96 Q(viation has a child\).)-.25 E(It returns)5 E/F1 10/Courier@0
SF(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E/F2 11/Times-Bold@0 SF
2.75(6.22.5 d)69.336 129 R(warf_get_ab)-.165 E(br)-.11 E -.165(ev)-.198
G(_entry\(\)).165 E F1(int dwarf_get_abbrev_entry\()69.336 147 Q
(Dwarf_Abbrev abbrev,)117.336 159 Q(Dwarf_Signed index,)117.336 171 Q 12
(Dwarf_Half *attr_num,)117.336 183 R(Dwarf_Signed *form,)117.336 195 Q
(Dwarf_Off *offset,)117.336 207 Q(Dwarf_Error *error\))117.336 219 Q F0
3.336(If successful,)69.336 249 R F1(dwarf_get_abbrev_entry\(\))5.836 E
F0(returns)5.836 E F1(DW_DLV_OK)5.837 E F0 3.337(and sets)5.837 F F1
(*attr_num)5.837 E F0 3.337(to the)5.837 F(attrib)69.336 261 Q 1.372
(ute code of the attrib)-.2 F 1.371(ute whose inde)-.2 F 3.871(xi)-.15 G
3.871(ss)-3.871 G(pecif)-3.871 E 1.371(ied by)-.2 F F1(index)3.871 E F0
1.371(in the gi)3.871 F -.15(ve)-.25 G 3.871(na).15 G(bbre)-3.871 E
3.871(viation. The)-.25 F(inde)3.871 E(x)-.15 E .484(starts at 0.)69.336
273 R .484(The location pointed to by)5.484 F F1(form)2.984 E F0 .484
(is set to the form of the attrib)2.984 F 2.985(ute. The)-.2 F .485
(location pointed to by)2.985 F F1(offset)69.336 285 Q F0 5.764
(is set to the byte of)8.264 F 5.764(fset of the attrib)-.25 F 5.764
(ute in the abbre)-.2 F 5.764(viations section.)-.25 F 5.764(It returns)
10.764 F F1(DW_DLV_NO_ENTRY)69.336 297 Q F0 .134(if the inde)2.634 F
2.634(xs)-.15 G(pecif)-2.634 E .134(ied is outside the range of attrib)
-.2 F .134(utes in this abbre)-.2 F 2.634(viation. It)-.25 F(returns)
2.634 E F1(DW_DLV_ERROR)69.336 309 Q F0(on error)2.5 E(.)-.55 E/F3 12
/Times-Bold@0 SF 3(6.23 String)69.336 343 R(Section Operations)3 E F0
2.346(The .deb)69.336 361 R 2.346(ug_str section contains only strings.)
-.2 F(Deb)7.345 E 2.345(uggers need ne)-.2 F -.15(ve)-.25 G 4.845(ru).15
G 2.345(se this interf)-4.845 F 2.345(ace: it is only for)-.1 F(deb)
69.336 373 Q(ugging problems with the string section itself.)-.2 E F2
2.75(6.23.1 d)69.336 406 R(warf_get_str\(\))-.165 E F1
(int dwarf_get_str\()69.336 424 Q 12(Dwarf_Debug dbg,)117.336 436 R 24
(Dwarf_Off offset,)117.336 448 R 42(char **string,)117.336 460 R
(Dwarf_Signed *returned_str_len,)117.336 472 Q 6(Dwarf_Error *error\))
117.336 484 R F0 .991(The function)69.336 502 R F1(dwarf_get_str\(\))
3.491 E F0(returns)3.491 E F1(DW_DLV_OK)3.491 E F0 .991(and sets)3.491 F
F1(*returned_str_len)3.491 E F0 .991(to the length)3.491 F 2.326
(of the string, not counting the null terminator)69.336 514 R 4.825(,t)
-.4 G 2.325(hat be)-4.825 F 2.325(gins at the of)-.15 F 2.325
(fset specif)-.25 F 2.325(ied by)-.2 F F1(offset)4.825 E F0 2.325
(in the)4.825 F(.deb)69.336 526 Q .334(ug_str section.)-.2 F .334
(The location pointed to by)5.334 F F1(string)2.835 E F0 .335
(is set to a pointer to this string.)2.835 F .335(The ne)5.335 F .335
(xt string in)-.15 F .022(the .deb)69.336 538 R .022(ug_str section be)
-.2 F .022(gins at the pre)-.15 F(vious)-.25 E F1(offset)2.521 E F0
2.521(+1+)2.521 G F1(*returned_str_len)A F0 5.021(.A)C .021
(zero-length string)-2.5 F .271(is NO)69.336 550 R 2.771(Tt)-.4 G .271
(he end of the section.)-2.771 F .271(If there is no .deb)5.271 F .271
(ug_str section,)-.2 F F1(DW_DLV_NO_ENTRY)2.771 E F0 .272(is returned.)
2.771 F .272(If there)5.272 F .668(is an error)69.336 562 R(,)-.4 E F1
(DW_DLV_ERROR)3.168 E F0 .668(is returned.)3.168 F .668
(If we are at the end of the section \(that is,)5.668 F F1(offset)3.168
E F0 .668(is one past)3.168 F .023(the end of the section\))69.336 574 R
F1(DW_DLV_NO_ENTRY)2.524 E F0 .024(is returned.)2.524 F .024(If the)
5.024 F F1(offset)2.524 E F0 .024(is some other too-lar)2.524 F .024
(ge v)-.18 F .024(alue then)-.25 F F1(DW_DLV_ERROR)69.336 586 Q F0
(is returned.)2.5 E F3 3(6.24 Addr)69.336 620 R(ess Range Operations)
-.216 E F0 .481(These functions pro)69.336 638 R .481
(vide information about address ranges.)-.15 F .481
(Address ranges map ranges of pc v)5.481 F .48(alues to the)-.25 F
(corresponding compilation-unit die that co)69.336 650 Q -.15(ve)-.15 G
(rs the address range.).15 E F2 2.75(6.24.1 d)69.336 683 R
(warf_get_aranges\(\))-.165 E F0(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(1-)-2.5 G 0 Cg EP
%%Page: 92 92
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(2-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_get_aranges\()69.336 96 Q(Dwarf_Debug dbg,)
117.336 108 Q(Dwarf_Arange **aranges,)117.336 120 Q
(Dwarf_Signed * returned_arange_count,)117.336 132 Q
(Dwarf_Error *error\))117.336 144 Q F0 1.201(The function)69.336 162 R
F1(dwarf_get_aranges\(\))3.701 E F0(returns)3.701 E F1(DW_DLV_OK)3.701 E
F0 1.202(and sets)3.702 F F1(*returned_arange_count)3.702 E F0 .853
(to the count of the number of address ranges in the .deb)69.336 174 R
.852(ug_aranges section \(for all compilation units\).)-.2 F(It)5.852 E
(sets)69.336 186 Q F1(*aranges)2.75 E F0 .25(to point to a block of)2.75
F F1(Dwarf_Arange)2.751 E F0 .251
(descriptors, one for each address range.)2.751 F .251(It returns)5.251
F F1(DW_DLV_ERROR)69.336 198 Q F0(on error)2.5 E 5(.I)-.55 G 2.5(tr)-5 G
(eturns)-2.5 E F1(DW_DLV_NO_ENTRY)2.5 E F0(if there is no .deb)2.5 E
(ug_aranges section.)-.2 E F1(void exampleu\(Dwarf_Debug dbg\))89.336
228 Q({)89.336 240 Q(Dwarf_Signed cnt = 0;)101.336 252 Q
(Dwarf_Arange *arang = 0;)101.336 264 Q(int res = 0;)101.336 276 Q
(Dwarf_Error error = 0;)101.336 288 Q
(res = dwarf_get_aranges\(dbg, &arang,&cnt, &error\);)101.336 312 Q
(if \(res == DW_DLV_OK\) {)101.336 324 Q(for \(i = 0; i < cnt; ++i\) {)
113.336 336 Q(/* use arang[i] */)125.336 348 Q
(dwarf_dealloc\(dbg, arang[i], DW_DLA_ARANGE\);)125.336 360 Q(})113.336
372 Q(dwarf_dealloc\(dbg, arang, DW_DLA_LIST\);)113.336 384 Q(})101.336
396 Q(})89.336 420 Q/F2 11/Times-Bold@0 SF 2.75(6.24.2 d)69.336 459 R
(warf_get_arange\(\))-.165 E F1(int dwarf_get_arange\()69.336 477 Q
(Dwarf_Arange *aranges,)117.336 489 Q(Dwarf_Unsigned arange_count,)
117.336 501 Q(Dwarf_Addr address,)117.336 513 Q
(Dwarf_Arange *returned_arange,)117.336 525 Q(Dwarf_Error *error\);)
117.336 537 Q F0 .848(The function)69.336 555 R F1(dwarf_get_arange\(\))
3.348 E F0(tak)3.348 E .848(es as input a pointer to a block of)-.1 F F1
(Dwarf_Arange)3.347 E F0(pointers,)3.347 E .988
(and a count of the number of descriptors in the block.)69.336 567 R
.989(It then searches for the descriptor that co)5.988 F -.15(ve)-.15 G
.989(rs the).15 F(gi)69.336 579 Q -.15(ve)-.25 G(n).15 E F1(address)
2.823 E F0 5.323(.I)C 2.822(fi)-5.323 G 2.822(tf)-2.822 G .322
(inds one, it returns)-3.022 F F1(DW_DLV_OK)2.822 E F0 .322(and sets)
2.822 F F1(*returned_arange)2.822 E F0 .322(to the descriptor)2.822 F(.)
-.55 E .789(It returns)69.336 591 R F1(DW_DLV_ERROR)3.289 E F0 .789
(on error)3.289 F 5.789(.I)-.55 G 3.289(tr)-5.789 G(eturns)-3.289 E F1
(DW_DLV_NO_ENTRY)3.289 E F0 .789(if there is no .deb)3.289 F .79
(ug_aranges entry)-.2 F(co)69.336 603 Q -.15(ve)-.15 G
(ring that address.).15 E F2 2.75(6.24.3 d)69.336 684 R
(warf_get_cu_die_offset\(\))-.165 E F0(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(2-)-2.5 G 0 Cg EP
%%Page: 93 93
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(3-)-2.5 G/F1 10
/Courier@0 SF(int dwarf_get_cu_die_offset\()69.336 96 Q
(Dwarf_Arange arange,)117.336 108 Q 12
(Dwarf_Off *returned_cu_die_offset,)117.336 120 R(Dwarf_Error *error\);)
117.336 132 Q F0 1.93(The function)69.336 150 R F1
(dwarf_get_cu_die_offset\(\))4.43 E F0(tak)4.43 E 1.93(es a)-.1 F F1
(Dwarf_Arange)4.43 E F0 1.93(descriptor as input, and if)4.43 F .347
(successful returns)69.336 162 R F1(DW_DLV_OK)2.847 E F0 .347(and sets)
2.847 F F1(*returned_cu_die_offset)2.847 E F0 .347(to the of)2.847 F
.348(fset in the .deb)-.25 F(ug_info)-.2 E 1.486(section of the compila\
tion-unit DIE for the compilation-unit represented by the gi)69.336 174
R -.15(ve)-.25 G 3.985(na).15 G 1.485(ddress range.)-3.985 F(It)6.485 E
(returns)69.336 186 Q F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E
/F2 11/Times-Bold@0 SF 2.75(6.24.4 d)69.336 219 R
(warf_get_arange_cu_header_offset\(\))-.165 E F1
(int dwarf_get_arange_cu_header_offset\()69.336 237 Q
(Dwarf_Arange arange,)117.336 249 Q 12
(Dwarf_Off *returned_cu_header_offset,)117.336 261 R
(Dwarf_Error *error\))117.336 273 Q F0 1.487(The function)69.336 291 R
F1(dwarf_get_arange_cu_header_offset\(\))3.987 E F0(tak)3.987 E 1.487
(es a)-.1 F F1(Dwarf_Arange)3.987 E F0 1.488(descriptor as)3.987 F .915
(input, and if successful returns)69.336 303 R F1(DW_DLV_OK)3.415 E F0
.914(and sets)3.415 F F1(*returned_cu_header_offset)3.414 E F0 .914
(to the of)3.414 F(fset)-.25 E .447(in the .deb)69.336 315 R .448(ug_in\
fo section of the compilation-unit header for the compilation-unit repr\
esented by the gi)-.2 F -.15(ve)-.25 G(n).15 E(address range.)69.336 327
Q(It returns)5 E F1(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E
(This function added Re)69.336 351 Q 2.5(v1)-.25 G(.45, June, 2001.)-2.5
E .334(This function is declared as 'optional' in libdw)69.336 375 R
.334(arf.h on IRIX systems so the _MIPS_SYMBOL_PRESENT)-.1 F .258
(predicate may be used at run time to determine if the v)69.336 387 R
.259(ersion of libdw)-.15 F .259(arf link)-.1 F .259
(ed into an application has this)-.1 F(function.)69.336 399 Q F2 2.75
(6.24.5 d)69.336 456 R(warf_get_arange_inf)-.165 E(o\(\))-.275 E F1
(int dwarf_get_arange_info\()69.336 474 Q(Dwarf_Arange arange,)117.336
486 Q(Dwarf_Addr *start,)117.336 498 Q(Dwarf_Unsigned *length,)117.336
510 Q(Dwarf_Off *cu_die_offset,)117.336 522 Q(Dwarf_Error *error\))
117.336 534 Q F0 1.264(The function)69.336 552 R F1
(dwarf_get_arange_info\(\))3.764 E F0(returns)3.764 E F1(DW_DLV_OK)3.764
E F0 1.264(and stores the starting v)3.764 F 1.263(alue of the)-.25 F
.561(address range in the location pointed to by)69.336 564 R F1(start)
3.062 E F0 3.062(,t)C .562
(he length of the address range in the location pointed)-3.062 F .719
(to by)69.336 576 R F1(length)3.219 E F0 3.218(,a)C .718(nd the of)
-3.218 F .718(fset in the .deb)-.25 F .718
(ug_info section of the compilation-unit DIE for the compilation-)-.2 F
(unit represented by the address range.)69.336 588 Q(It returns)5 E F1
(DW_DLV_ERROR)2.5 E F0(on error)2.5 E(.)-.55 E/F3 12/Times-Bold@0 SF 3
(6.25 General)69.336 622 R(Lo)3 E 3(wL)-.12 G -2.76 -.18(ev e)-3 H 3(lO)
.18 G(perations)-3 E F0(This function is lo)69.336 640 Q(w-le)-.25 E
-.15(ve)-.25 G 2.5(la).15 G
(nd intended for use only by programs such as dw)-2.5 E(arf-dumpers.)-.1
E F2 2.75(6.25.1 d)69.336 673 R(warf_get_addr)-.165 E(ess_size\(\))-.198
E F1(int dwarf_get_address_size\(Dwarf_Debug dbg,)69.336 691 Q 6
(Dwarf_Half *addr_size,)117.336 703 R(Dwarf_Error *error\))117.336 715 Q
F0 5.911(The function)69.336 733 R F1(dwarf_get_address_size\(\))8.411 E
F0(returns)8.411 E F1(DW_DLV_OK)8.411 E F0 5.911
(on success and sets the)8.411 F(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(3-)-2.5 G 0 Cg EP
%%Page: 94 94
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(4-)-2.5 G/F1 10
/Courier@0 SF(*addr_size)69.336 96 Q F0 .196
(to the size in bytes of an address.)2.696 F .195(In case of error)5.196
F 2.695(,i)-.4 G 2.695(tr)-2.695 G(eturns)-2.695 E F1(DW_DLV_ERROR)2.695
E F0 .195(and does not)2.695 F(set)69.336 108 Q F1(*addr_size)2.5 E F0
(.)A .251(The address size returned is the o)69.336 132 R -.15(ve)-.15 G
.251(rall address size, which can be misleading if dif).15 F .252
(ferent compilation units)-.25 F(ha)69.336 144 Q 2.156 -.15(ve d)-.2 H
(if).15 E 1.856(ferent address sizes.)-.25 F(Man)6.856 E 4.356(yA)-.15 G
1.856(BIs ha)-4.356 F 2.156 -.15(ve o)-.2 H 1.856
(nly a single address size per e).15 F -.15(xe)-.15 G 1.856(cutable, b)
.15 F 1.856(ut dif)-.2 F(fering)-.25 E
(address sizes are becoming more common.)69.336 156 Q(Use)69.336 180 Q
F1(dwarf_get_die_address_size\(\))2.5 E F0(instead whene)2.5 E -.15(ve)
-.25 G 2.5(rp).15 G(ossible.)-2.5 E/F2 11/Times-Bold@0 SF 2.75(6.25.2 d)
69.336 213 R(warf_get_die_addr)-.165 E(ess_size\(\))-.198 E F1
(int dwarf_get_die_address_size\(Dwarf_Die die,)69.336 231 Q 6
(Dwarf_Half *addr_size,)117.336 243 R(Dwarf_Error *error\))117.336 255 Q
F0 3.244(The function)69.336 273 R F1(dwarf_get_die_address_size\(\))
5.744 E F0(returns)5.744 E F1(DW_DLV_OK)5.744 E F0 3.245
(on success and sets the)5.744 F F1(*addr_size)69.336 285 Q F0 .196
(to the size in bytes of an address.)2.696 F .195(In case of error)5.196
F 2.695(,i)-.4 G 2.695(tr)-2.695 G(eturns)-2.695 E F1(DW_DLV_ERROR)2.695
E F0 .195(and does not)2.695 F(set)69.336 297 Q F1(*addr_size)2.5 E F0
(.)A(The address size returned is the address size of the compilation u\
nit o)69.336 321 Q(wning the)-.25 E F1(die)2.5 E F0
(This is the preferred w)69.336 345 Q(ay to get address size when the)
-.1 E F1(Dwarf_Die)2.5 E F0(is kno)2.5 E(wn.)-.25 E/F3 12/Times-Bold@0
SF 3(6.26 Ranges)69.336 391 R(Operations \(.deb)3 E(ug_ranges\))-.24 E
F0 1.168(These functions pro)69.336 409 R 1.168
(vide information about the address ranges indicated by a)-.15 F F1
(DW_AT_ranges)6.169 E F0(attrib)3.669 E(ute)-.2 E 7.793
(\(the ranges are recorded in the)69.336 421 R F1(.debug_ranges)12.793 E
F0 7.793(section\) of a DIE.)10.293 F 7.793(Each call of)12.793 F F1
(dwarf_get_ranges_a\(\))69.336 433 Q F0(or)4.073 E F1
(dwarf_get_ranges\(\))4.073 E F0 1.573(returns a an array of Dw)4.073 F
1.574(arf_Ranges structs,)-.1 F
(each of which represents a single ranges entry)69.336 445 Q 7.5(.T)-.65
G(he struct is def)-7.5 E(ined in)-.2 E F1(libdwarf.h)5 E F0(.)A F2 2.75
(6.26.1 d)69.336 490 R(warf_get_ranges\(\))-.165 E F0 .243
(This is the original call and it will w)69.336 508 R .243(ork f)-.1 F
.243(ine when all compilation units ha)-.2 F .542 -.15(ve t)-.2 H .242
(he same address_size.).15 F(There)5.242 E .458(is no)69.336 520 R F1
(die)2.958 E F0(ar)2.958 E .459(gument to this original v)-.18 F .459
(ersion of the function.)-.15 F .459(Other ar)5.459 F .459
(guments \(and deallocation\) match the)-.18 F(use of)69.336 532 Q F1
(dwarf_get_ranges_a\(\))5 E F0 2.5(\(d)2.5 G(escribed ne)-2.5 E(xt\).)
-.15 E F2 2.75(6.26.2 d)69.336 565 R(warf_get_ranges_a\(\))-.165 E F1
(int dwarf_get_ranges_a\()69.336 583 Q(Dwarf_Debug dbg,)117.336 595 Q 6
(Dwarf_Off offset,)117.336 607 R 6(Dwarf_Die die,)117.336 619 R
(Dwarf_Ranges **ranges,)117.336 631 Q
(Dwarf_Signed * returned_ranges_count,)117.336 643 Q
(Dwarf_Unsigned * returned_byte_count,)117.336 655 Q
(Dwarf_Error *error\))117.336 667 Q F0 .345(The function)69.336 685 R F1
(dwarf_get_ranges_a\(\))2.845 E F0(returns)2.844 E F1(DW_DLV_OK)2.844 E
F0 .344(and sets)2.844 F F1(*returned_ranges_count)2.844 E F0 .689(to t\
he count of the number of address ranges in the group of ranges in the \
.deb)69.336 697 R .689(ug_ranges section at of)-.2 F(fset)-.25 E F1
(offset)69.336 709 Q F0(\(which ends with a pair of zeros of pointer)2.5
E 2.5(-size\). This)-.2 F(function is ne)2.5 E 2.5(wa)-.25 G 2.5(so)-2.5
G 2.5(f2)-2.5 G 2.5(7A)-2.5 G(pril 2009.)-2.5 E(The)69.336 733 Q F1
(offset)3.603 E F0(ar)3.603 E 1.103(gument should be the v)-.18 F 1.103
(alue of a)-.25 F F1(DW_AT_ranges)3.603 E F0(attrib)3.603 E 1.103
(ute of a Deb)-.2 F 1.102(ugging Information)-.2 F(re)69.336 768 Q 2.5
(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(4-)-2.5 G 0 Cg EP
%%Page: 95 95
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(5-)-2.5 G(Entry)69.336
96 Q(.)-.65 E(The)69.336 120 Q/F1 10/Courier@0 SF(die)4.132 E F0(ar)
4.132 E 1.632(gument should be the v)-.18 F 1.632(alue of a)-.25 F F1
(Dwarf_Die)4.133 E F0 1.633(pointer of a)4.133 F F1(Dwarf_Die)4.133 E F0
1.633(with the attrib)4.133 F(ute)-.2 E .104
(containing this range set of)69.336 132 R 2.604(fset. Because)-.25 F
.103(each compilation unit has its o)2.603 F .103(wn address_size f)-.25
F .103(ield this ar)-.2 F(gument)-.18 E .173
(is necessary to to correctly read ranges. \(Most e)69.336 144 R -.15
(xe)-.15 G .173(cutables ha).15 F .473 -.15(ve t)-.2 H .174
(he same address_size in e).15 F -.15(ve)-.25 G .174(ry compilation).15
F 2.093(unit, b)69.336 156 R 2.093(ut some ABIs allo)-.2 F 4.593(wm)-.25
G 2.093(ultiple address sized in an e)-4.593 F -.15(xe)-.15 G 4.593
(cutable\). If).15 F 4.593(aN)4.593 G 2.093(ULL pointer is passed in)
-4.593 F(libdw)69.336 168 Q(arf assumes a single address_size is approp\
riate for all ranges records.)-.1 E 1.356(The call sets)69.336 192 R F1
(*ranges)3.856 E F0 1.356(to point to a block of)3.856 F F1
(Dwarf_Ranges)3.857 E F0 1.357(structs, one for each address range.)
3.857 F(It)6.357 E(returns)69.336 204 Q F1(DW_DLV_ERROR)4.655 E F0 2.155
(on error)4.655 F 7.155(.I)-.55 G 4.655(tr)-7.155 G(eturns)-4.655 E F1
(DW_DLV_NO_ENTRY)4.655 E F0 2.154(if there is no)4.654 F F1
(.debug_ranges)7.154 E F0(section or if)69.336 216 Q F1(offset)2.5 E F0
(is past the end of the)2.5 E F1(.debug_ranges)2.5 E F0(section.)2.5 E
.742(If the)69.336 240 R F1(*returned_byte_count)3.242 E F0 .742
(pointer is passed as non-NULL the number of bytes that the returned)
3.242 F .564(ranges were tak)69.336 252 R .564
(en from is returned through the pointer \(for e)-.1 F .563
(xample if the returned_ranges_count is 2 and)-.15 F 1.07(the pointer)
69.336 264 R 1.07(-size is 4, then returned_byte_count will be 8\).)-.2
F 1.07(If the)6.07 F F1(*returned_byte_count)3.57 E F0 1.07(pointer is)
3.57 F 1.735(passed as NULL the parameter is ignored.)69.336 276 R(The)
6.734 E F1(*returned_byte_count)4.234 E F0 1.734
(is only of use to certain)4.234 F
(dumper applications, most applications will not use it.)69.336 288 Q F1
(void examplev\(Dwarf_Debug dbg,Dwarf_Unsigned offset,Dwarf_Die die\))
89.336 330 Q({)89.336 342 Q(Dwarf_Signed cnt = 0;)101.336 354 Q
(Dwarf_Ranges *ranges = 0;)101.336 366 Q(Dwarf_Unsigned bytes = 0;)
101.336 378 Q(Dwarf_Error error = 0;)101.336 390 Q(int res = 0;)101.336
402 Q(res = dwarf_get_ranges_a\(dbg,offset,die,)101.336 414 Q
(&ranges,&cnt,&bytes,&error\);)113.336 426 Q(if \(res == DW_DLV_OK\) {)
101.336 438 Q(Dwarf_Signed i;)113.336 450 Q
(for\( i = 0; i < cnt; ++i \) {)113.336 462 Q
(Dwarf_Ranges *cur = ranges+i;)125.336 474 Q(/* Use cur. */)125.336 486
Q(})113.336 498 Q(dwarf_ranges_dealloc\(dbg,ranges,cnt\);)113.336 510 Q
(})101.336 522 Q(})89.336 534 Q/F2 11/Times-Bold@0 SF 2.75(6.26.3 d)
69.336 573 R(warf_ranges_dealloc\(\))-.165 E F1
(int dwarf_ranges_dealloc\()69.336 591 Q(Dwarf_Debug dbg,)117.336 603 Q
(Dwarf_Ranges *ranges,)117.336 615 Q 6(Dwarf_Signed range_count,)117.336
627 R(\);)117.336 639 Q F0 .092(The function)69.336 657 R F1
(dwarf_ranges_dealloc\(\))2.592 E F0(tak)2.592 E .092
(es as input a pointer to a block of)-.1 F F1(Dwarf_Ranges)2.593 E F0
(array)2.593 E(and the number of structures in the block.)69.336 669 Q
(It frees all the data in the array of structures.)5 E/F3 12
/Times-Bold@0 SF 3(6.27 Gdb)69.336 703 R(Index operations)3 E F0 .039
(These functions get access to the f)69.336 721 R .039
(ast lookup tables def)-.1 F .039(ined by gdb and gcc and stored in the)
-.2 F F1(.gdb_index)2.538 E F0 4.528(section. The)69.336 733 R 2.028
(section is of suf)4.528 F -.2(fi)-.25 G 2.029(cient comple).2 F 2.029
(xity that a number of function interf)-.15 F 2.029(aces are needed.)-.1
F -.15(Fo)7.029 G(r).15 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(5-)-2.5 G 0 Cg EP
%%Page: 96 96
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(6-)-2.5 G 2.517
(additional information see "https://source)69.336 96 R -.1(wa)-.25 G
(re.or).1 E(g/gdb/onlinedocs/gdb/Inde)-.18 E(x-Section-F)-.15 E
(ormat.html#Inde)-.15 E(x-)-.15 E(Section-F)69.336 108 Q(ormat".)-.15 E
/F1 11/Times-Bold@0 SF 2.75(6.27.1 d)69.336 153 R
(warf_gdbindex_header\(\))-.165 E F0(int dw)69.336 171 Q(arf_gdbinde)-.1
E(x_header\(Dw)-.15 E(arf_Deb)-.1 E(ug dbg,)-.2 E(Dw)79.336 183 Q
(arf_Gdbinde)-.1 E 2.5(x*g)-.15 G(dbinde)-2.5 E(xptr)-.15 E(,)-.4 E(Dw)
79.336 195 Q(arf_Unsigned * v)-.1 E(ersion,)-.15 E(Dw)79.336 207 Q
(arf_Unsigned * cu_list_of)-.1 E(fset,)-.25 E(Dw)79.336 219 Q
(arf_Unsigned * types_cu_list_of)-.1 E(fset,)-.25 E(Dw)79.336 231 Q
(arf_Unsigned * address_area_of)-.1 E(fset,)-.25 E(Dw)79.336 243 Q
(arf_Unsigned * symbol_table_of)-.1 E(fset,)-.25 E(Dw)79.336 255 Q
(arf_Unsigned * constant_pool_of)-.1 E(fset,)-.25 E(Dw)79.336 267 Q
(arf_Unsigned * section_size,)-.1 E(Dw)79.336 279 Q
(arf_Unsigned * unused_reserv)-.1 E(ed,)-.15 E(const char)79.336 291 Q
(** section_name,)10 E(Dw)79.336 303 Q 7.5(arf_Error *)-.1 F(error\);)
2.5 E 1.205(The function)69.336 321 R/F2 10/Courier@0 SF
(dwarf_gdbindex_header\(\))3.705 E F0(tak)3.705 E 1.205
(es as input a pointer to a Dw)-.1 F(arf_Deb)-.1 E 1.205
(ug structure and)-.2 F(returns f)69.336 333 Q(ields through v)-.2 E
(arious pointers.)-.25 E 1.985(If the function returns D)69.336 351 R
(W_DL)-.3 E(V_NO_ENTR)-1 E 4.485(Yt)-.65 G 1.985(here is no .gdb_inde)
-4.485 F 4.485(xs)-.15 G 1.985(ection and none of the return-)-4.485 F
(pointer ar)69.336 363 Q(gument v)-.18 E(alues are set.)-.25 E .685
(If the function returns D)69.336 381 R(W_DL)-.3 E(V_ERR)-1 E(OR)-.4 E
F2(error)3.185 E F0 .685(is set to indicate the specif)3.185 F .685
(ic error)-.2 F 3.185(,b)-.4 G .685(ut no other return-)-3.385 F
(pointer ar)69.336 393 Q(guments are touched.)-.18 E 1.651
(If successful, the function returns D)69.336 411 R(W_DL)-.3 E 1.651
(V_OK and other v)-1 F 1.651(alues are set.)-.25 F 1.65(The other v)6.65
F 1.65(alues are set as)-.25 F(follo)69.336 423 Q(ws:)-.25 E .086(The f)
69.336 441 R(ield)-.2 E F2(*gdbindexptr)5.086 E F0 .086
(is set to an opaque pointer to a libdw)2.586 F .087
(arf_internal structure used as an ar)-.1 F(gument)-.18 E
(to other .gdbinde)69.336 453 Q 2.5(xf)-.15 G(unctions belo)-2.5 E -.65
(w.)-.25 G 1.243(The remaining f)69.336 471 R 1.243(ields are set to v)
-.2 F 1.243
(alues that are mostly of interest to a pretty-printer application.)-.25
F 1.242(See the)6.243 F .04(detailed layout specif)69.336 483 R .04
(ication for specif)-.2 F 2.54(ics. The)-.2 F -.25(va)2.54 G .04
(lues returned are recorded in the Dw).25 F(arf_Gdbinde)-.1 E 2.54(xo)
-.15 G(paque)-2.54 E(structure for the other gdbinde)69.336 495 Q 2.5
(xf)-.15 G(unctions documented belo)-2.5 E -.65(w.)-.25 G(The f)69.336
513 Q(ield)-.2 E F2(*version)5 E F0(is set to the v)2.5 E
(ersion of the gdb inde)-.15 E 2.5(xh)-.15 G(eader \(2\)..)-2.5 E(The f)
69.336 531 Q(ield)-.2 E F2(*cu_list_offset)5 E F0(is set to the of)2.5 E
(fset \(in the .gdb_inde)-.25 E 2.5(xs)-.15 G(ection\) of the cu-list.)
-2.5 E(The f)69.336 549 Q(ield)-.2 E F2(*types_cu_list_offset)5 E F0
(is set to the of)2.5 E(fset \(in the .gdb_inde)-.25 E 2.5(xs)-.15 G
(ection\) of the types-list.)-2.5 E(The f)69.336 567 Q(ield)-.2 E F2
(*address_area_offset)5 E F0(is set to the of)2.5 E
(fset \(in the .gdb_inde)-.25 E 2.5(xs)-.15 G
(ection\) of the address area.)-2.5 E(The f)69.336 585 Q(ield)-.2 E F2
(*symbol_table_offset)5 E F0(is set to the of)2.5 E
(fset \(in the .gdb_inde)-.25 E 2.5(xs)-.15 G
(ection\) of the symbol table.)-2.5 E 1.506(The f)69.336 603 R(ield)-.2
E F2(*constant_pool_offset)6.506 E F0 1.506(is set to the of)4.006 F
1.506(fset \(in the .gdb_inde)-.25 F 4.005(xs)-.15 G 1.505
(ection\) of the constant)-4.005 F(pool.)69.336 615 Q(The f)69.336 633 Q
(ield)-.2 E F2(*section_size)5 E F0(is set to the length)2.5 E
(of the .gdb_inde)5 E 2.5(xs)-.15 G(ection.)-2.5 E(The f)69.336 651 Q
(ield)-.2 E F2(*unused_reserved)5 E F0(is set to zero.)2.5 E .135(The f)
69.336 669 R(ield)-.2 E F2(*section_name)5.135 E F0 .136
(is set to the Elf object f)2.636 F .136(ile section name \(.gdb_inde)
-.2 F 2.636(x\). If)-.15 F 2.636(an)2.636 G .136(on-Elf object f)-2.636
F(ile)-.2 E .91(has such a section the v)69.336 681 R .91(alue set migh\
t be NULL or might point to an empty string \(NUL terminated\), so)-.25
F(code to account for NULL or empty)69.336 693 Q(.)-.65 E(The f)69.336
711 Q(ield)-.2 E F2(*error)5 E F0(is not set.)2.5 E .684(Here we sho)
69.336 729 R 3.184(wau)-.25 G .684
(se of the set of cu_list functions \(using all the functions in one e)
-3.184 F .684(xample mak)-.15 F .684(es it rather)-.1 F(too long\).)
69.336 741 Q(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5
(-9)120.71 G 2.5(6-)-2.5 G 0 Cg EP
%%Page: 97 97
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(7-)-2.5 G(re)69.336 768
Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(7-)-2.5 G 0
Cg EP
%%Page: 98 98
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(8-)-2.5 G/F1 10
/Courier@0 SF
(void examplew\(Dwarf_Debug dbg,Dwarf_Unsigned offset,Dwarf_Die die\))
89.336 96 Q({)89.336 108 Q(Dwarf_Gdbindex gindexptr = 0;)101.336 120 Q
(Dwarf_Unsigned version = 0;)101.336 132 Q
(Dwarf_Unsigned cu_list_offset = 0;)101.336 144 Q
(Dwarf_Unsigned types_cu_list_offset = 0;)101.336 156 Q
(Dwarf_Unsigned address_area_offset = 0;)101.336 168 Q
(Dwarf_Unsigned symbol_table_offset = 0;)101.336 180 Q
(Dwarf_Unsigned constant_pool_offset = 0;)101.336 192 Q
(Dwarf_Unsigned section_size = 0;)101.336 204 Q
(Dwarf_Unsigned reserved = 0;)101.336 216 Q(Dwarf_Error error = 0;)
101.336 228 Q(const char * section_name = 0;)101.336 240 Q(int res = 0;)
101.336 252 Q(res = dwarf_gdbindex_header\(dbg,&gindexptr,)101.336 264 Q
(&version,&cu_list_offset, &types_cu_list_offset,)113.336 276 Q
(&address_area_offset,&symbol_table_offset,)113.336 288 Q
(&constant_pool_offset, &section_size,)113.336 300 Q
(&reserved,&section_name,&error\);)113.336 312 Q
(if \(res == DW_DLV_NO_ENTRY\) {)101.336 324 Q(return;)131.336 336 Q 6
(}e)101.336 348 S(lse if \(res == DW_DLV_ERROR\) {)-6 E(return;)131.336
360 Q(})101.336 372 Q({)101.336 384 Q(/* do something with the data */)
113.336 396 Q(Dwarf_Unsigned length = 0;)113.336 408 Q
(Dwarf_Unsigned typeslength = 0;)113.336 420 Q(Dwarf_Unsigned i = 0;)
113.336 432 Q(res = dwarf_gdbindex_culist_array\(gindexptr,)113.336 444
Q(&length,&error\);)137.336 456 Q(/* Example actions. */)113.336 468 Q
(if \(res == DW_DLV_OK\) {)113.336 480 Q
(for\(i = 0; i < length; ++i\) {)137.336 492 Q
(Dwarf_Unsigned cuoffset = 0;)161.336 504 Q
(Dwarf_Unsigned culength = 0;)161.336 516 Q
(res = dwarf_gdbindex_culist_entry\(gindexptr,)161.336 528 Q
(i,&cuoffset,&culength,&error\);)185.336 540 Q
(if \(res == DW_DLV_OK\) {)161.336 552 Q
(/* Do something with cuoffset, culength */)185.336 564 Q(})161.336 576
Q(})137.336 588 Q(})113.336 600 Q
(res = dwarf_gdbindex_types_culist_array\(gindexptr,)113.336 612 Q
(&typeslength,&error\);)137.336 624 Q(if \(res == DW_DLV_OK\) {)113.336
636 Q(for\(i = 0; i < typeslength; ++i\) {)137.336 648 Q
(Dwarf_Unsigned cuoffset = 0;)161.336 660 Q
(Dwarf_Unsigned tuoffset = 0;)161.336 672 Q
(Dwarf_Unsigned culength = 0;)161.336 684 Q
(Dwarf_Unsigned type_signature)161.336 696 Q 6(=0)12 G(;)-6 E
(res = dwarf_gdbindex_types_culist_entry\(gindexptr,)161.336 708 Q
(i,&cuoffset,&tuoffset,&type_signature,&error\);)185.336 720 Q
(if \(res == DW_DLV_OK\) {)161.336 732 Q F0(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5(8-)-2.5 G 0 Cg EP
%%Page: 99 99
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-9)274.506 48 S 2.5(9-)-2.5 G/F1 10
/Courier@0 SF(/* Do something with cuoffset etc. */)185.336 96 Q(})
161.336 108 Q(})137.336 120 Q(})113.336 132 Q
(dwarf_gdbindex_free\(gindexptr\);)113.336 144 Q(})101.336 156 Q(})
89.336 168 Q/F2 11/Times-Bold@0 SF 2.75(6.27.2 d)69.336 255 R
(warf_gdbindex_culist_array\(\))-.165 E F0(int dw)69.336 273 Q
(arf_gdbinde)-.1 E(x_culist_array\(Dw)-.15 E(arf_Gdbinde)-.1 E 2.5(xg)
-.15 G(dbinde)-2.5 E(xptr)-.15 E(,)-.4 E(Dw)79.336 285 Q 15
(arf_Unsigned *)-.1 F(list_length,)2.5 E(Dw)79.336 297 Q 22.5
(arf_Error *)-.1 F(error\);)2.5 E(The function)69.336 315 Q F1
(dwarf_gdbindex_culist_array\(\))2.5 E F0(tak)2.5 E(es as input v)-.1 E
(alid Dw)-.25 E(arf_Gdbinde)-.1 E 2.5(xp)-.15 G(ointer)-2.5 E(.)-.55 E
4.247(While currently only D)69.336 333 R(W_DL)-.3 E 4.246
(V_OK is returned one should test for D)-1 F(W_DL)-.3 E(V_NO_ENTR)-1 E
6.746(Ya)-.65 G(nd)-6.746 E -.3(DW)69.336 345 S(_DL).3 E(V_ERR)-1 E
(OR and do)-.4 E(something sensible if either is returned.)5 E 1.021
(If successful, the function returns D)69.336 363 R(W_DL)-.3 E 1.021
(V_OK and returns the number of entries in the)-1 F 1.022
(culist through)6.022 F(the)69.336 375 Q F1(list_length)A F0(pointer)2.5
E(.)-.55 E F2 2.75(6.27.3 d)69.336 408 R(warf_gdbindex_culist_entry\(\))
-.165 E F0(int dw)69.336 426 Q(arf_gdbinde)-.1 E(x_culist_entry\(Dw)-.15
E(arf_Gdbinde)-.1 E 2.5(xg)-.15 G(dbinde)-2.5 E(xptr)-.15 E(,)-.4 E(Dw)
79.336 438 Q 5(arf_Unsigned entryinde)-.1 F(x,)-.15 E(Dw)79.336 450 Q
(arf_Unsigned * cu_of)-.1 E(fset,)-.25 E(Dw)79.336 462 Q
(arf_Unsigned * cu_length,)-.1 E(Dw)79.336 474 Q 7.5(arf_Error *)-.1 F
(error\);)2.5 E .559(The function)69.336 492 R F1
(dwarf_gdbindex_culist_entry\(\))3.059 E F0(tak)3.059 E .559
(es as input v)-.1 F .559(alid Dw)-.25 F(arf_Gdbinde)-.1 E 3.059(xp)-.15
G .558(ointer and)-3.059 F(an inde)69.336 504 Q 2.5(xi)-.15 G
(nto the culist array)-2.5 E 5(.V)-.65 G(alid inde)-6.11 E -.15(xe)-.15
G 2.5(sa).15 G(re 0 through)-2.5 E F1(list_length -1)2.5 E F0(.)2.5 E
1.289(If it returns D)69.336 522 R(W_DL)-.3 E(V_NO_ENTR)-1 E 3.789(Yt)
-.65 G 1.289(here is a coding error)-3.789 F 6.289(.I)-.55 G 3.789(fi)
-6.289 G 3.79(tr)-3.789 G 1.29(eturns D)-3.79 F(W_DL)-.3 E(V_ERR)-1 E
1.29(OR there is an)-.4 F(error of some kind and the)69.336 534 Q
(error is indicated by the v)5 E(ale returned through the)-.25 E F1
(error)2.5 E F0(pointer)2.5 E(.)-.55 E .879(On success it returns D)
69.336 552 R(W_DL)-.3 E .879(V_OK and returns the)-1 F F1(cu_offset)
3.379 E F0 .879(\(the section global of)3.379 F .878(fset of the CU in)
-.25 F(.deb)69.336 564 Q(ug_info\)\) and)-.2 E F1(cu_length)2.5 E F0
(\(the length of the CU in .deb)2.5 E(ug_info\) v)-.2 E
(alues through the pointers.)-.25 E F2 2.75(6.27.4 d)69.336 609 R
(warf_gdbindex_types_culist_array\(\))-.165 E F0(int dw)69.336 627 Q
(arf_gdbinde)-.1 E(x_types_culist_array\(Dw)-.15 E(arf_Gdbinde)-.1 E 2.5
(x/)-.15 G(*gdbinde)-2.5 E(xptr*/,)-.15 E(Dw)79.336 639 Q 27.5
(arf_Unsigned *)-.1 F(/*types_list_length*/,)2.5 E(Dw)79.336 651 Q 35
(arf_Error *)-.1 F(/*error*/\);)2.5 E 2.4(The function)69.336 669 R F1
(dwarf_gdbindex_types_culist_array\(\))4.9 E F0(tak)4.9 E 2.4
(es as input v)-.1 F 2.4(alid Dw)-.25 F(arf_Gdbinde)-.1 E(x)-.15 E
(pointer)69.336 681 Q(.)-.55 E 4.247(While currently only D)69.336 699 R
(W_DL)-.3 E 4.246(V_OK is returned one should test for D)-1 F(W_DL)-.3 E
(V_NO_ENTR)-1 E 6.746(Ya)-.65 G(nd)-6.746 E -.3(DW)69.336 711 S(_DL).3 E
(V_ERR)-1 E(OR and do)-.4 E(something sensible if either is returned.)5
E 1.688(If successful, the function returns D)69.336 729 R(W_DL)-.3 E
1.688(V_OK and returns the number of entries in the)-1 F 1.688
(types culist)6.688 F(through the)69.336 741 Q F1(list_length)A F0(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-9)120.71 G 2.5
(9-)-2.5 G 0 Cg EP
%%Page: 100 100
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(00 -)-2.5 E/F1 11
/Times-Bold@0 SF 2.75(6.27.5 d)69.336 99 R
(warf_gdbindex_types_culist_entry\(\))-.165 E F0(int dw)69.336 117 Q
(arf_gdbinde)-.1 E(x_types_culist_entry\()-.15 E(Dw)79.336 129 Q
(arf_Gdbinde)-.1 E 7.5(xg)-.15 G(dbinde)-7.5 E(xptr)-.15 E(,)-.4 E(Dw)
79.336 141 Q 5(arf_Unsigned entryinde)-.1 F(x,)-.15 E(Dw)79.336 153 Q
(arf_Unsigned * cu_of)-.1 E(fset,)-.25 E(Dw)79.336 165 Q
(arf_Unsigned * tu_of)-.1 E(fset,)-.25 E(Dw)79.336 177 Q
(arf_Unsigned * type_signature,)-.1 E(Dw)79.336 189 Q 7.5(arf_Error *)
-.1 F(error\);)2.5 E 2.4(The function)69.336 207 R/F2 10/Courier@0 SF
(dwarf_gdbindex_types_culist_entry\(\))4.9 E F0(tak)4.9 E 2.4
(es as input v)-.1 F 2.4(alid Dw)-.25 F(arf_Gdbinde)-.1 E(x)-.15 E
(pointer and an inde)69.336 219 Q 2.5(xi)-.15 G
(nto the types culist array)-2.5 E 5(.V)-.65 G(alid inde)-6.11 E -.15
(xe)-.15 G 2.5(sa).15 G(re 0 through)-2.5 E F2(types_list_length -1)2.5
E F0(.)2.5 E 1.289(If it returns D)69.336 237 R(W_DL)-.3 E(V_NO_ENTR)-1
E 3.789(Yt)-.65 G 1.289(here is a coding error)-3.789 F 6.289(.I)-.55 G
3.789(fi)-6.289 G 3.79(tr)-3.789 G 1.29(eturns D)-3.79 F(W_DL)-.3 E
(V_ERR)-1 E 1.29(OR there is an)-.4 F(error of some kind.)69.336 249 Q
(and the)5 E(error is indicated by the v)5 E(alue returned through the)
-.25 E F2(error)2.5 E F0(pointer)2.5 E(.)-.55 E .879
(On success it returns D)69.336 267 R(W_DL)-.3 E .879
(V_OK and returns the)-1 F F2(tu_offset)3.379 E F0 .879
(\(the section global of)3.379 F .878(fset of the CU in)-.25 F(.deb)
69.336 279 Q 1.295(ug_types\)\) and)-.2 F F2(tu_length)3.795 E F0 1.296
(\(the length of the CU in .deb)3.795 F 1.296(ug_types\) v)-.2 F 1.296
(alues through the pointers.)-.25 F(It)6.296 E(also returns)69.336 291 Q
(the type signature \(a 64bit v)5 E(alue\) throuth the)-.25 E F2
(type_signature)5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.27.6 d)69.336
324 R(warf_gdbindex_addr)-.165 E(essar)-.198 E(ea\(\))-.198 E F0(int dw)
69.336 342 Q(arf_gdbinde)-.1 E(x_addressarea\(Dw)-.15 E(arf_Gdbinde)-.1
E 2.5(x/)-.15 G(*gdbinde)-2.5 E(xptr*/,)-.15 E(Dw)79.336 354 Q 27.5
(arf_Unsigned *)-.1 F(/*addressarea_list_length*/,)2.5 E(Dw)79.336 366 Q
35(arf_Error *)-.1 F(/*error*/\);)2.5 E 1.822(The function)69.336 384 R
F2(dwarf_addressarea\(\))4.322 E F0(tak)4.322 E 1.822(es as input v)-.1
F 1.822(alid Dw)-.25 F(arf_Gdbinde)-.1 E 4.322(xp)-.15 G 1.821
(ointer and returns the)-4.322 F(length of the address area through)
69.336 396 Q F2(addressarea_list_length)2.5 E F0(.)A 1.289
(If it returns D)69.336 414 R(W_DL)-.3 E(V_NO_ENTR)-1 E 3.789(Yt)-.65 G
1.289(here is a coding error)-3.789 F 6.289(.I)-.55 G 3.789(fi)-6.289 G
3.79(tr)-3.789 G 1.29(eturns D)-3.79 F(W_DL)-.3 E(V_ERR)-1 E 1.29
(OR there is an)-.4 F(error of some kind.)69.336 426 Q(and the)5 E
(error is indicated by the v)5 E(alue returned through the)-.25 E F2
(error)2.5 E F0(pointer)2.5 E(.)-.55 E 1.431
(If successful, the function returns D)69.336 444 R(W_DL)-.3 E 1.431
(V_OK and returns the number of entries in the)-1 F 1.43(address area)
6.43 F(through the)69.336 456 Q F2(addressarea_list_length)2.5 E F0
(pointer)5 E(.)-.55 E F1 2.75(6.27.7 d)69.336 501 R(warf_gdbindex_addr)
-.165 E(essar)-.198 E(ea_entry\(\))-.198 E F0(int dw)69.336 519 Q
(arf_gdbinde)-.1 E(x_addressarea_entry\()-.15 E(Dw)79.336 531 Q
(arf_Gdbinde)-.1 E 7.5(xg)-.15 G(dbinde)-7.5 E(xptr)-.15 E(,)-.4 E(Dw)
79.336 543 Q 5(arf_Unsigned entryinde)-.1 F(x,)-.15 E(Dw)79.336 555 Q
(arf_Unsigned * lo)-.1 E(w_adddress,)-.25 E(Dw)79.336 567 Q
(arf_Unsigned * high_address,)-.1 E(Dw)79.336 579 Q
(arf_Unsigned * cu_inde)-.1 E(x,)-.15 E(Dw)79.336 591 Q 7.5(arf_Error *)
-.1 F(error\);)2.5 E 1.709(The function)69.336 609 R F2
(dwarf_addressarea_entry\(\))4.209 E F0(tak)4.209 E 1.709(es as input v)
-.1 F 1.709(alid Dw)-.25 F(arf_Gdbinde)-.1 E 4.209(xp)-.15 G 1.709
(ointer and an)-4.209 F(inde)69.336 621 Q 2.5(xi)-.15 G
(nto the address area \(v)-2.5 E(alid inde)-.25 E -.15(xe)-.15 G 2.5(sa)
.15 G(re zero through)-2.5 E F2(addressarea_list_length - 1)2.5 E F0(.)A
1.29(If it returns D)69.336 639 R(W_DL)-.3 E(V_NO_ENTR)-1 E 3.79(Yt)-.65
G 1.289(here is a coding error)-3.79 F 6.289(.I)-.55 G 3.789(fi)-6.289 G
3.789(tr)-3.789 G 1.289(eturns D)-3.789 F(W_DL)-.3 E(V_ERR)-1 E 1.289
(OR there is an)-.4 F(error of some kind.)69.336 651 Q(and the)5 E
(error is indicated by the v)5 E(alue returned through the)-.25 E F2
(error)2.5 E F0(pointer)2.5 E(.)-.55 E .942
(If successful, the function returns D)69.336 669 R(W_DL)-.3 E .943
(V_OK and returns The)-1 F F2 -2.557(low_address high_address)3.443 F F0
(and)3.443 E F2(cu_index)69.336 681 Q F0(through the pointers.)2.5 E(Gi)
69.336 699 Q -.15(ve)-.25 G 2.5(na).15 G 2.5(no)-2.5 G(pen Dw)-2.5 E
(arf_Gdbinde)-.1 E 2.5(xo)-.15 G(ne uses the function as follo)-2.5 E
(ws:)-.25 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5
(-1)118.21 G(00 -)-2.5 E 0 Cg EP
%%Page: 101 101
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(01 -)-2.5 E/F1 10/Courier@0
SF(void examplewgdbindex\(Dwarf_Gdbindex gdbindex\))69.336 96 Q({)69.336
108 Q(Dwarf_Unsigned list_len = 0;)81.336 120 Q(Dwarf_Unsigned i = 0;)
81.336 132 Q(int res = 0;)81.336 144 Q(Dwarf_Error err = 0;)81.336 156 Q
(res = dwarf_gdbindex_addressarea\(gdbindex, &list_len,&err\);)81.336
180 Q(if \(res != DW_DLV_OK\) {)81.336 192 Q
(/* Something wrong, ignore the addressarea */)93.336 204 Q(})81.336 216
Q(/* Iterate through the address area. */)81.336 228 Q(for\( i)81.336
240 Q 6(=0)12 G 6(;i<l)-6 G(ist_len; i++\) {)-6 E
(Dwarf_Unsigned lowpc = 0;)93.336 252 Q(Dwarf_Unsigned highpc = 0;)
93.336 264 Q(Dwarf_Unsigned cu_index,)93.336 276 Q
(res = dwarf_gdbindex_addressarea_entry\(gdbindex,i,)93.336 288 Q
(&lowpc,&highpc,)105.336 300 Q(&cu_index,)105.336 312 Q(&err\);)105.336
324 Q(if \(res != DW_DLV_OK\) {)93.336 336 Q
(/* Something wrong, ignore the addressarea */)105.336 348 Q(return;)
105.336 360 Q(})93.336 372 Q 6(/* We)93.336 384 R
(have a valid address area entry, do something)6 E(with it. */)117.336
396 Q(})81.336 408 Q(})69.336 420 Q/F2 11/Times-Bold@0 SF 2.75(6.27.8 d)
69.336 471 R(warf_gdbindex_symboltable_array\(\))-.165 E F0(int dw)
69.336 489 Q(arf_gdbinde)-.1 E(x_symboltable_array\(Dw)-.15 E
(arf_Gdbinde)-.1 E 2.5(xg)-.15 G(dbinde)-2.5 E(xptr)-.15 E(,)-.4 E(Dw)
79.336 501 Q 27.5(arf_Unsigned *)-.1 F(symtab_list_length,)2.5 E(Dw)
79.336 513 Q 35(arf_Error *)-.1 F(error\);)2.5 E .633
(One can look at the symboltable as a tw)69.336 531 R(o-le)-.1 E -.15
(ve)-.25 G 3.133(lt).15 G .633(able \(with The outer le)-3.133 F -.15
(ve)-.25 G 3.133(li).15 G(nde)-3.133 E -.15(xe)-.15 G 3.133(st).15 G
.633(hrough symbol names)-3.133 F .331(and the inner le)69.336 543 R
-.15(ve)-.25 G 2.831(li).15 G(nde)-2.831 E -.15(xe)-.15 G 2.832(st).15 G
.332(hrough all the compilation units that def)-2.832 F .332
(ine that symbol \(each symbol ha)-.2 F .332(ving a)-.2 F(dif)69.336 555
Q(ferent number of compilation units, this is not a simple rectangular \
table\).)-.25 E 3.258(The function)69.336 573 R F1
(dwarf_gdbindex_symboltable_array\(\))5.757 E F0(tak)5.757 E 3.257
(es as input v)-.1 F 3.257(alid Dw)-.25 F(arf_Gdbinde)-.1 E(x)-.15 E
(pointer)69.336 585 Q(.)-.55 E 1.289(If it returns D)69.336 603 R(W_DL)
-.3 E(V_NO_ENTR)-1 E 3.789(Yt)-.65 G 1.289(here is a coding error)-3.789
F 6.289(.I)-.55 G 3.789(fi)-6.289 G 3.79(tr)-3.789 G 1.29(eturns D)-3.79
F(W_DL)-.3 E(V_ERR)-1 E 1.29(OR there is an)-.4 F(error of some kind.)
69.336 615 Q(and the)5 E(error is indicated by the v)5 E
(alue returned through the)-.25 E F1(error)2.5 E F0(pointer)2.5 E(.)-.55
E 1.044(If successful, the function returns D)69.336 633 R(W_DL)-.3 E
1.044(V_OK and returns The)-1 F F1(symtab_list_length)3.543 E F0 1.043
(through the)3.543 F(pointer)69.336 645 Q(.)-.55 E(Gi)69.336 663 Q -.15
(ve)-.25 G 3.516(nav).15 G 1.016(alid Dw)-3.766 F(arf_Gdbinde)-.1 E
3.516(xp)-.15 G(ointer)-3.516 E 3.516(,o)-.4 G 1.017
(ne can access the entire symbol table as follo)-3.516 F 1.017
(ws \(using ')-.25 F(return')-.5 E(here to indicate we are gi)69.336 675
Q(ving up due to a problem while k)-.25 E(eeping the e)-.1 E
(xample code f)-.15 E(airly short\):)-.1 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(01 -)-2.5 E 0 Cg EP
%%Page: 102 102
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(02 -)-2.5 E/F1 10/Courier@0
SF(void examplex\(Dwarf_Gdbindex)69.336 96 Q(gdbindexr\))18 E({)69.336
108 Q(Dwarf_Unsigned symtab_list_length = 0;)81.336 120 Q
(Dwarf_Unsigned i = 0;)81.336 132 Q(Dwarf_Error err = 0;)81.336 144 Q
(int res = dwarf_gdbindex_symboltable_array\(gdbindex,)81.336 156 Q
(&symtab_list_length,err\);)93.336 168 Q(if \(res != DW_DLV_OK\) {)
81.336 180 Q(return;)93.336 192 Q(})81.336 204 Q(for\( i)81.336 216 Q 6
(=0)12 G 6(;i<s)-6 G(ymtab_list_length; i++\) {)-6 E
(Dwarf_Unsigned symnameoffset = 0;)93.336 228 Q
(Dwarf_Unsigned cuvecoffset = 0;)93.336 240 Q(Dwarf_Unsigned ii = 0;)
93.336 252 Q(const char *name = 0;)93.336 264 Q
(res = dwarf_gdbindex_symboltable_entry\(gdbindex,i,)93.336 276 Q
(&symnameoffset,&cuvecoffset,)141.336 288 Q(err\);)141.336 300 Q
(if \(res != DW_DLV_OK\) {)93.336 312 Q(return;)141.336 324 Q(})93.336
336 Q(res = dwarf_gdbindex_string_by_offset\(gdbindex,)93.336 348 Q
(symnameoffset,&name,err\);)141.336 360 Q(if\(res != DW_DLV_OK\) {)
93.336 372 Q(return;)141.336 384 Q(})93.336 396 Q
(res = dwarf_gdbindex_cuvector_length\(gdbindex,)93.336 408 Q
(cuvecoffset,&cuvec_len,err\);)141.336 420 Q(if\( res != DW_DLV_OK\) {)
93.336 432 Q(return;)141.336 444 Q(})93.336 456 Q
(for\(ii = 0; ii < cuvec_len; ++ii \) {)93.336 468 Q
(Dwarf_Unsigned attributes = 0;)105.336 480 Q
(Dwarf_Unsigned cu_index = 0;)105.336 492 Q
(Dwarf_Unsigned reserved1 = 0;)105.336 504 Q
(Dwarf_Unsigned symbol_kind = 0;)105.336 516 Q
(Dwarf_Unsigned is_static = 0;)105.336 528 Q
(res = dwarf_gdbindex_cuvector_inner_attributes\()105.336 552 Q
(gdbindex,cuvecoffset,ii,)117.336 564 Q(&attributes,err\);)117.336 576 Q
(if\( res != DW_DLV_OK\) {)105.336 588 Q(return;)117.336 600 Q(})105.336
612 Q(/* 'attributes' is a value with various internal)105.336 624 Q
(fields so we expand the fields. */)123.336 636 Q
(res = dwarf_gdbindex_cuvector_instance_expand_value\(gdbindex,)105.336
648 Q(attributes, &cu_index,&reserved1,&symbol_kind, &is_static,)117.336
660 Q(err\);)117.336 672 Q(if\( res != DW_DLV_OK\) {)105.336 684 Q
(return;)117.336 696 Q(})105.336 708 Q
(/* Do something with the attributes. */)105.336 720 Q(})93.336 732 Q F0
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G
(02 -)-2.5 E 0 Cg EP
%%Page: 103 103
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(03 -)-2.5 E/F1 10/Courier@0
SF(})81.336 96 Q(})69.336 108 Q/F2 11/Times-Bold@0 SF 2.75(6.27.9 d)
69.336 147 R(warf_gdbindex_symboltable_entry\(\))-.165 E F0(int dw)
69.336 165 Q(arf_gdbinde)-.1 E(x_symboltable_entry\()-.15 E(Dw)79.336
177 Q(arf_Gdbinde)-.1 E 7.5(xg)-.15 G(dbinde)-7.5 E(xptr)-.15 E(,)-.4 E
(Dw)79.336 189 Q 5(arf_Unsigned entryinde)-.1 F(x,)-.15 E(Dw)79.336 201
Q(arf_Unsigned * string_of)-.1 E(fset,)-.25 E(Dw)79.336 213 Q
(arf_Unsigned * cu_v)-.1 E(ector_of)-.15 E(fset,)-.25 E(Dw)79.336 225 Q
7.5(arf_Error *)-.1 F(error\);)2.5 E 3.258(The function)69.336 243 R F1
(dwarf_gdbindex_symboltable_entry\(\))5.757 E F0(tak)5.757 E 3.257
(es as input v)-.1 F 3.257(alid Dw)-.25 F(arf_Gdbinde)-.1 E(x)-.15 E
(pointer and an entry inde)69.336 255 Q(x\(v)-.15 E(alid inde)-.25 E 2.5
(xv)-.15 G(alues being zero through)-2.75 E F1(symtab_list_length -1)2.5
E F0(\).)A 1.289(If it returns D)69.336 273 R(W_DL)-.3 E(V_NO_ENTR)-1 E
3.789(Yt)-.65 G 1.289(here is a coding error)-3.789 F 6.289(.I)-.55 G
3.789(fi)-6.289 G 3.79(tr)-3.789 G 1.29(eturns D)-3.79 F(W_DL)-.3 E
(V_ERR)-1 E 1.29(OR there is an)-.4 F(error of some kind.)69.336 285 Q
(and the)5 E(error is indicated by the v)5 E(alue returned through the)
-.25 E F1(error)2.5 E F0(pointer)2.5 E(.)-.55 E 7.287
(If successful, the function returns D)69.336 303 R(W_DL)-.3 E 7.287
(V_OK and returns The)-1 F F1(string_offset)9.787 E F0(and)9.787 E F1
(cu_vector_offset)69.336 315 Q F0(through the pointers.)2.5 E(See the e)
5 E(xample abo)-.15 E .3 -.15(ve w)-.15 H(hich uses this function.).15 E
F2 2.75(6.27.10 d)69.336 360 R(warf_gdbindex_cuv)-.165 E
(ector_length\(\))-.11 E F0(int dw)69.336 378 Q(arf_gdbinde)-.1 E(x_cuv)
-.15 E(ector_length\()-.15 E(Dw)79.336 390 Q(arf_Gdbinde)-.1 E 7.5(xg)
-.15 G(dbinde)-7.5 E(x,)-.15 E(Dw)79.336 402 Q 5(arf_Unsigned cuv)-.1 F
(ector_of)-.15 E(fset,)-.25 E(Dw)79.336 414 Q
(arf_Unsigned * innercount,)-.1 E(Dw)79.336 426 Q 7.5(arf_Error *)-.1 F
(error\);)2.5 E .496(The function)69.336 444 R F1
(dwarf_gdbindex_cuvector_length\(\))2.996 E F0(tak)2.996 E .496
(es as input v)-.1 F .497(alid Dw)-.25 F(arf_Gdbinde)-.1 E 2.997(xp)-.15
G(ointer)-2.997 E(and an a cu v)69.336 456 Q(ector of)-.15 E(fset.)-.25
E 1.29(If it returns D)69.336 474 R(W_DL)-.3 E(V_NO_ENTR)-1 E 3.79(Yt)
-.65 G 1.289(here is a coding error)-3.79 F 6.289(.I)-.55 G 3.789(fi)
-6.289 G 3.789(tr)-3.789 G 1.289(eturns D)-3.789 F(W_DL)-.3 E(V_ERR)-1 E
1.289(OR there is an)-.4 F(error of some kind.)69.336 486 Q(and the)5 E
(error is indicated by the v)5 E(alue returned through the)-.25 E F1
(error)2.5 E F0(pointer)2.5 E(.)-.55 E .075
(If successful, the function returns D)69.336 504 R(W_DL)-.3 E .075
(V_OK and returns the)-1 F F1(inner_count)2.576 E F0 .076
(through the pointer)5.076 F 5.076(.T)-.55 G(he)-5.076 E F1(inner_count)
69.336 516 Q F0 .062(is the number of compilation unit v)5.062 F .061
(ectors for this array of v)-.15 F 2.561(ectors. See)-.15 F .061(the e)
2.561 F .061(xample abo)-.15 F -.15(ve)-.15 G(which uses this function.)
69.336 528 Q F2 2.75(6.27.11 d)69.336 585 R(warf_gdbindex_cuv)-.165 E
(ector_inner_attrib)-.11 E(utes\(\))-.22 E F0(int dw)69.336 603 Q
(arf_gdbinde)-.1 E(x_cuv)-.15 E(ector_inner_attrib)-.15 E(utes\()-.2 E
(Dw)79.336 615 Q(arf_Gdbinde)-.1 E 7.5(xg)-.15 G(dbinde)-7.5 E(x,)-.15 E
(Dw)79.336 627 Q 5(arf_Unsigned cuv)-.1 F(ector_of)-.15 E(fset,)-.25 E
(Dw)79.336 639 Q 5(arf_Unsigned innerinde)-.1 F(x,)-.15 E(/* The attr_v)
79.336 651 Q(alue is a f)-.25 E(ield of bits. F)-.2 E(or e)-.15 E
(xpanded v)-.15 E(ersion)-.15 E 2.5(use dw)89.336 663 R(arf_gdbinde)-.1
E(x_cuv)-.15 E(ector_e)-.15 E(xpand_v)-.15 E(alue\(\) */)-.25 E(Dw)
79.336 675 Q(arf_Unsigned * attr_v)-.1 E(alue,)-.25 E(Dw)79.336 687 Q
7.5(arf_Error *)-.1 F(error\);)2.5 E 7.838(The function)69.336 705 R F1
(dwarf_gdbindex_cuvector_inner_attributes\(\))10.338 E F0(tak)10.338 E
7.839(es as input v)-.1 F(alid)-.25 E(Dw)69.336 717 Q(arf_Gdbinde)-.1 E
2.668(xp)-.15 G .168(ointer and an a cu v)-2.668 F .168(ector of)-.15 F
.168(fset and a)-.25 F F1(inner_index)2.668 E F0(\(v)2.668 E(alid)-.25 E
F1(inner_index)2.668 E F0 -.25(va)2.667 G .167(lues are).25 F
(zero through)69.336 729 Q F1(inner_count - 1)2.5 E F0(.)A(re)69.336 768
Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(03 -)-2.5 E 0 Cg
EP
%%Page: 104 104
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(04 -)-2.5 E 1.289
(If it returns D)69.336 96 R(W_DL)-.3 E(V_NO_ENTR)-1 E 3.789(Yt)-.65 G
1.289(here is a coding error)-3.789 F 6.289(.I)-.55 G 3.789(fi)-6.289 G
3.79(tr)-3.789 G 1.29(eturns D)-3.79 F(W_DL)-.3 E(V_ERR)-1 E 1.29
(OR there is an)-.4 F(error of some kind.)69.336 108 Q(and the)5 E
(error is indicated by the v)5 E(alue returned through the)-.25 E/F1 10
/Courier@0 SF(error)2.5 E F0(pointer)2.5 E(.)-.55 E .473
(If successful, the function returns D)69.336 126 R(W_DL)-.3 E .473
(V_OK and returns The)-1 F F1(attr_value)2.973 E F0 .473
(through the pointer)2.973 F 5.473(.T)-.55 G(he)-5.473 E F1(attr_value)
69.336 138 Q F0 .622(is actually composed of se)3.122 F -.15(ve)-.25 G
.622(ral f).15 F .622(ields, see the ne)-.2 F .622(xt function which e)
-.15 F .622(xpands the v)-.15 F 3.122(alue. See)-.25 F(the e)69.336 150
Q(xample abo)-.15 E .3 -.15(ve w)-.15 H(hich uses this function.).15 E
/F2 11/Times-Bold@0 SF 2.75(6.27.12 d)69.336 207 R(warf_gdbindex_cuv)
-.165 E(ector_instance_expand_v)-.11 E(alue\(\))-.11 E F0(int dw)69.336
225 Q(arf_gdbinde)-.1 E(x_cuv)-.15 E(ector_instance_e)-.15 E(xpand_v)
-.15 E(alue\()-.25 E(Dw)79.336 237 Q(arf_Gdbinde)-.1 E 7.5(xg)-.15 G
(dbinde)-7.5 E(x,)-.15 E(Dw)79.336 249 Q 5(arf_Unsigned attr_v)-.1 F
(alue,)-.25 E(Dw)79.336 261 Q(arf_Unsigned * cu_inde)-.1 E(x,)-.15 E(Dw)
79.336 273 Q(arf_Unsigned * reserv)-.1 E(ed1,)-.15 E(Dw)79.336 285 Q
(arf_Unsigned * symbol_kind,)-.1 E(Dw)79.336 297 Q
(arf_Unsigned * is_static,)-.1 E(Dw)79.336 309 Q 7.5(arf_Error *)-.1 F
(error\);)2.5 E 2.839(The function)69.336 327 R F1
(dwarf_gdbindex_cuvector_instance_expand_value\(\))5.339 E F0(tak)5.338
E 2.838(es as input v)-.1 F(alid)-.25 E(Dw)69.336 339 Q(arf_Gdbinde)-.1
E 2.5(xp)-.15 G(ointer and an)-2.5 E F1(attr_value)2.5 E F0(.)A 1.289
(If it returns D)69.336 357 R(W_DL)-.3 E(V_NO_ENTR)-1 E 3.789(Yt)-.65 G
1.289(here is a coding error)-3.789 F 6.289(.I)-.55 G 3.789(fi)-6.289 G
3.79(tr)-3.789 G 1.29(eturns D)-3.79 F(W_DL)-.3 E(V_ERR)-1 E 1.29
(OR there is an)-.4 F(error of some kind.)69.336 369 Q(and the)5 E
(error is indicated by the v)5 E(alue returned through the)-.25 E F1
(error)2.5 E F0(pointer)2.5 E(.)-.55 E
(If successful, the function returns D)69.336 387 Q(W_DL)-.3 E
(V_OK and returns the follo)-1 E(wing v)-.25 E
(alues through the pointers:)-.25 E(The)69.336 411 Q F1(cu_index)4.31 E
F0 -.2(fi)4.31 G 1.81(eld is the inde).2 F 4.31(xi)-.15 G 4.31(nt)-4.31
G 1.81(he applicable CU list of a compilation unit. F)-4.31 F 1.81
(or the purpose of)-.15 F(inde)69.336 423 Q .732
(xing the CU list and the types CU list form a single array so the)-.15
F F1(cu_index)3.232 E F0 .733(can be indicating either)3.232 F(list.)
69.336 435 Q(The)69.336 459 Q F1(symbol_kind)3.244 E F0 -.2(fi)3.244 G
.744(eld is a small inte).2 F .744
(ger with the symbol kind\( zero is reserv)-.15 F .744
(ed, one is a tyhpe, 2 is a)-.15 F -.25(va)69.336 471 S
(riable or enum v).25 E(alue, etc\).)-.25 E(The)69.336 495 Q F1
(reserved1)3.477 E F0 -.2(fi)3.477 G 3.478(eld should).2 F(ha)3.478 E
1.278 -.15(ve t)-.2 H .978(he v).15 F .978(alue zero and is the v)-.25 F
.978(alue of a bit f)-.25 F .978(ield def)-.2 F .978(ined as reserv)-.2
F .978(ed for)-.15 F(future use.)69.336 507 Q(The)69.336 531 Q F1
(is_static)2.5 E F0 -.2(fi)2.5 G(eld is zero if the CU inde).2 E -.15
(xe)-.15 G 2.5(di).15 G 2.5(sg)-2.5 G(lobal and one if the CU inde)-2.5
E -.15(xe)-.15 G 2.5(di).15 G 2.5(ss)-2.5 G(tatic.)-2.5 E(See the e)
69.336 567 Q(xample abo)-.15 E .3 -.15(ve w)-.15 H
(hich uses this function.).15 E F2 2.75(6.27.13 d)69.336 612 R
(warf_gdbindex_string_by_offset\(\))-.165 E F0(int dw)69.336 630 Q
(arf_gdbinde)-.1 E(x_string_by_of)-.15 E(fset\()-.25 E(Dw)79.336 642 Q
(arf_Gdbinde)-.1 E 7.5(xg)-.15 G(dbinde)-7.5 E(xptr)-.15 E(,)-.4 E(Dw)
79.336 654 Q 5(arf_Unsigned stringof)-.1 F(fset,)-.25 E(const char)
79.336 666 Q(** string_ptr)10 E(,)-.4 E(Dw)79.336 678 Q 5(arf_Error *)
-.1 F(error\);)5 E 4.115(The function)69.336 696 R F1
(dwarf_gdbindex_string_by_offset\(\))6.615 E F0(tak)6.614 E 4.114
(es as input v)-.1 F 4.114(alid Dw)-.25 F(arf_Gdbinde)-.1 E(x)-.15 E
1.005(pointer and a)69.336 708 R F1(stringoffset)3.505 E F0 1.005
(If it returns D)3.505 F(W_DL)-.3 E(V_NO_ENTR)-1 E 3.505(Yt)-.65 G 1.005
(here is a coding error)-3.505 F 6.006(.I)-.55 G 3.506(fi)-6.006 G 3.506
(tr)-3.506 G(eturns)-3.506 E -.3(DW)69.336 720 S(_DL).3 E(V_ERR)-1 E
.172(OR there is an error of some kind.)-.4 F .172(and the)5.172 F .172
(error is indicated by the v)5.172 F .171(alue returned through)-.25 F
(the)69.336 732 Q F1(error)2.5 E F0(pointer)2.5 E(.)-.55 E(re)69.336 768
Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(04 -)-2.5 E 0 Cg
EP
%%Page: 105 105
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(05 -)-2.5 E .068(If it succ\
eeds, the call returns a pointer to a string from the 'constant pool' t\
hrough the)69.336 96 R/F1 10/Courier@0 SF(string_ptr)2.569 E F0 5.069
(.T)C(he)-5.069 E(string pointed to must ne)69.336 108 Q -.15(ve)-.25 G
2.5(rb).15 G 2.5(ef)-2.5 G(ree\(\)d.)-2.5 E(See the e)69.336 126 Q
(xample abo)-.15 E .3 -.15(ve w)-.15 H(hich uses this function.).15 E/F2
12/Times-Bold@0 SF 3(6.28 Deb)69.336 172 R(ug Fission \(.deb)-.24 E
(ug_tu_index, .deb)-.24 E(ug_cu_index\) operations)-.24 E F0 2.213 -.8
(We n)69.336 190 T .612(ame things "xu" as these sections ha).8 F .912
-.15(ve t)-.2 H .612
(he same format so we let "x" stand for either section.).15 F(These)
5.612 E .04(functions get access to the)69.336 202 R(inde)5.04 E 2.54
(xf)-.15 G .04
(unctions needed to access and print the contents of an object f)-2.54 F
.04(ile which is)-.2 F .926(an aggre)69.336 214 R -.05(ga)-.15 G .926
(te of .dw).05 F 3.426(oo)-.1 G 3.426(bjects. These)-3.426 F .925
(sections are implemented in gcc/gdb and are proposed to be part of)
3.425 F -.3(DW)69.336 226 S 1.186(ARF5 \(As of July 2014 D)-.9 F -1.2
(WA)-.3 G 1.186(RF5 is not f)1.2 F 3.686(inished\). The)-.2 F 1.186
(idea is that much deb)3.686 F 1.186(ug information can be)-.2 F .74
(separated of)69.336 238 R 3.24(fi)-.25 G .74(nto indi)-3.24 F .74
(vidual .dw)-.25 F 3.24(oE)-.1 G .74(lf objects and then aggre)-3.24 F
-.05(ga)-.15 G .739(ted simply into a single .dwp object so the).05 F
-.15(exe)69.336 250 S(cutable need not ha).15 E .3 -.15(ve t)-.2 H
(he complete deb).15 E(ug information in it at runtime yet allo)-.2 E
2.5(wg)-.25 G(ood deb)-2.5 E(ugging.)-.2 E -.15(Fo)69.336 268 S 32.417
(ra).15 G 29.918(dditional information, see "https://gcc.gnu.or)-32.417
F(g/wiki/Deb)-.18 E(ugFissionD)-.2 E(WP",)-.3 E("https://gcc.gnu.or)
69.336 280 Q(g/wiki/Deb)-.18 E 250.88(ugFission", and)-.2 F("http://www)
69.336 292 Q(.bayarea.net/~cary/dw)-.65 E .994
(arf/Accelerated%20Access%20Diagram.png" and sometime in 2015, the)-.1 F
-.3(DW)69.336 304 S(ARF5 standard.)-.9 E 5.24
(There are FORM access functions related to Deb)69.336 322 R 5.24
(ug Fission.)-.2 F(See)10.24 E F1(dwarf_formaddr\(\))7.74 E F0(and)7.74
E F1(dwarf_get_debug_addr_index\(\))69.336 334 Q F0(and)2.5 E F1
(dwarf_get_debug_str_index\(\))2.5 E F0(.)A(The FORM with the hash v)
69.336 352 Q(alue \(for a reference to)-.25 E 2.5(at)5 G(ype unit \) is)
-2.5 E F1(DW_FORM_ref_sig8)2.5 E F0(.)A 1.725(In a compilation unit of)
69.336 370 R(Deb)6.725 E 1.726(ug Fission object \(or a .dwp P)-.2 F
1.726(ackage FIle\))-.15 F F1(DW_AT_dwo_id)4.226 E F0 1.726(the hash is)
4.226 F -.15(ex)69.336 382 S(pected to be).15 E F1(DW_FORM_data8)2.5 E
F0(.)A(The)69.336 400 Q F1(DWARF5)4.52 E F0 2.02(standard def)4.52 F
2.019(ines the hash as an 8 byte v)-.2 F 2.019(alue which we could use)
-.25 F F1(Dwarf_Unsigned)4.519 E F0(.)A
(Instead \(and mostly for type safety\) we def)69.336 412 Q(ine the v)
-.2 E(alue as)-.25 E 2.5(as)5 G(tructure whose type name is)-2.5 E F1
(Dwarf_Sig8)2.5 E F0(.)A 12.163 -.8(To l)69.336 442 T 10.563
(ook up a name in the hash \(to f).8 F 10.564(ind which CU\(s\) it e)-.2
F 10.564(xists in\).)-.15 F(use)15.564 E F1
(dwarf_get_debugfission_for_key\(\)fP, defined below.)69.336 454 Q
18.857(The second group of interfaces here beginning with)69.336 472 R
7.5(dwarf_get_xu_index_header\(\) are useful if one wants to print a)
69.336 484 R(.debug_tu_index or .debug_cu_index section.)69.336 496 Q
2.182
(To access DIE, macro, etc information the support is built into DIE,)
69.336 514 R 1.8
(Macro, etc operations so applications usually won't need to use these)
69.336 526 R(operations at all.)69.336 538 Q/F3 11/Times-Bold@0 SF 2.75
(6.28.1 Dwarf_Deb)69.336 571 R(ug_Fission_P)-.22 E(er_CU)-.22 E F0(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(05 -)
-2.5 E 0 Cg EP
%%Page: 106 106
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(06 -)-2.5 E(#def)69.336 96 Q
(ine D)-.2 E(W_FISSION_SECT_COUNT 12)-.3 E(struct Dw)69.336 108 Q
(arf_Deb)-.1 E 2.5(ug_Fission_Per_CU_s {)-.2 F 2.5(/* Do)79.336 120 R
(not free the string. It contains "cu" or "tu". */)2.5 E 2.5(/* If)
79.336 132 R(this is not set \(ie, not a CU/TU in)2.5 E -.3(DW)5 G 2.5
(PP).3 G(ackage File\))-2.65 E(then pcu_type will be NULL.)89.336 144 Q
(*/)5 E(const char)79.336 156 Q 2.5(*p)7.5 G(cu_type;)-2.5 E
(/* pcu_inde)79.336 168 Q 2.5(xi)-.15 G 2.5(st)-2.5 G(he inde)-2.5 E 2.5
(x\()-.15 G(range 1 to N \))-2.5 E(into the tu/cu table of of)86.836 180
Q(fsets and the table)-.25 E(of sizes.)86.836 192 Q 2.5(1t)5 G 2.5(oNa)
-2.5 G 2.5(st)-2.5 G(he zero inde)-2.5 E 2.5(xi)-.15 G 2.5(sr)-2.5 G
(eserv)-2.5 E(ed)-.15 E(for special purposes.)86.836 204 Q(Not a v)5 E
(alue one)-.25 E(actually needs. */)86.836 216 Q(Dw)79.336 228 Q
(arf_Unsigned pcu_inde)-.1 E(x;)-.15 E(Dw)79.336 240 Q 10
(arf_Sig8 pcu_hash;)-.1 F(/* 8 byte)5 E(*/)5 E 2.5(/* [0])79.336 252 R
(has of)2.5 E(fset and size 0.)-.25 E([1]-[8] are D)89.336 264 Q
(W_SECT_* inde)-.3 E -.15(xe)-.15 G 2.5(sa).15 G(nd the)-2.5 E -.25(va)
89.336 276 S(lues are).25 E(the of)5 E(fset and size)-.25 E
(of the respecti)89.336 288 Q .3 -.15(ve s)-.25 H(ection contrib).15 E
(ution)-.2 E(of a single .dw)89.336 300 Q 2.5(oo)-.1 G
(bject. When pcu_size[n] is)-2.5 E
(zero the corresponding section is not present. */)89.336 312 Q(Dw)
79.336 324 Q(arf_Unsigned pcu_of)-.1 E(fset[D)-.25 E
(W_FISSION_SECT_COUNT];)-.3 E(Dw)79.336 336 Q(arf_Unsigned pcu_size[D)
-.1 E(W_FISSION_SECT_COUNT];)-.3 E(Dw)79.336 348 Q
(arf_Unsigned unused1;)-.1 E(Dw)79.336 360 Q(arf_Unsigned unused2;)-.1 E
(};)69.336 372 Q .139(The structure is used to return data to callers w\
ith the data from either .deb)69.336 390 R(ug_tu_inde)-.2 E 2.638(xo)
-.15 G 2.638(r.)-2.638 G(deb)-2.638 E(ug_cu_inde)-.2 E(x)-.15 E
(that is applicable to a single compilation unit or type unit.)69.336
402 Q .16(Callers to the applicable functions \(see belo)69.336 420 R
.16(w\) should allocate the structure and zero all the bytes in it.)-.25
F(The)5.16 E .444(structure has a fe)69.336 432 R 2.944(wf)-.25 G .443
(ields that are presently unused. These are reserv)-3.144 F .443
(ed for future use since it is impossible)-.15 F
(to alter the structure without breaking binary compatibility)69.336 444
Q(.)-.65 E/F1 11/Times-Bold@0 SF 2.75(6.28.2 d)69.336 477 R(warf_die_fr)
-.165 E(om_hash_signatur)-.198 E(e\(\))-.198 E F0(int dw)69.336 495 Q
(arf_die_from_hash_signature\(Dw)-.1 E(arf_Deb)-.1 E(ug dbg,)-.2 E(Dw)
79.336 507 Q(arf_Sig8 *)-.1 E(hash_sig,)12.5 E(const char *)79.336 519 Q
(sig_type,)12.5 E(Dw)79.336 531 Q 15(arf_Die* returned_die,)-.1 F(Dw)
79.336 543 Q 10(arf_Error* error\);)-.1 F .193(The function)69.336 561 R
/F2 10/Courier@0 SF(dwarf_die_from_hash_signature\(\))2.693 E F0 .194
(is the most direct w)2.694 F .194(ay to go from the hash data)-.1 F
1.406(from a)69.336 573 R F2(DW_FORM_ref_sig8)3.906 E F0 1.406(or a)
3.906 F F2(DW_AT_dwo_id)3.906 E F0(\(form)3.905 E F2(DW_FORM_data8)3.905
E F0 3.905(\)t)C 3.905(oaD)-3.905 G 1.405(IE from a .dwp)-3.905 F
(package f)69.336 585 Q(ile or a .dw)-.2 E 2.5(oo)-.1 G(bject f)-2.5 E
(ile \( .dw)-.2 E 2.5(oa)-.1 G(ccess not supported yet\).)-2.5 E 1.124
(The caller passes in)69.336 603 R F2(dbg)3.624 E F0 1.124
(which should be)3.624 F F2(Dwarf_Debug)3.624 E F0 1.125
(open/initialized on a .dwp package f)3.624 F 1.125(ile \(or a)-.2 F
(.dw)69.336 615 Q 2.5(oo)-.1 G(bject f)-2.5 E(ile\).)-.2 E .562
(The caller also)69.336 633 R .561(passes in)5.561 F F2(hash_sig)3.061 E
F0 3.061(,ap)C .561
(ointer to the hash signature for which the caller wishes to f)-3.061 F
.561(ind a)-.2 F(DIE.)69.336 645 Q 1.08(The caller also)69.336 663 R
1.08(passes in)6.08 F F2(sig_type)3.58 E F0 1.081
(which must contain either "tu" \(identifying the hash referring to a)
3.58 F(type unit\) or "cu" \(identifying the hash as referring to a com\
pilation unit\).)69.336 675 Q .133(On success the function returns)
69.336 693 R F2(DW_DLV_OK)2.633 E F0 .132(and sets)2.633 F F2
(*returned_die)2.632 E F0 .132(to be a pointer to a v)2.632 F .132
(alid DIE for)-.25 F .366(the compilation unit or type unit.)69.336 705
R .367(If the type is "tu" the DIE returned is the specif)5.366 F .367
(ic type DIE that the hash)-.2 F .63(refers to.)69.336 717 R .63(If the\
 type is "cu" the DIE returned is the compilation unit DIE of the compi\
lation unit referred)5.63 F(to.)69.336 729 Q(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(06 -)-2.5 E 0 Cg EP
%%Page: 107 107
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(07 -)-2.5 E(When appropriat\
e the caller should free the space of the returned DIE by a call someth\
ing lik)69.336 96 Q(e)-.1 E(dw)79.336 114 Q(arf_dealloc\(dbg,die,D)-.1 E
(W_DLA_DIE\);)-.3 E 4.879(If there is no D)69.336 132 R 4.879(WP P)-.3 F
4.88
(ackage File section or the hash cannot be found the function returns)
-.15 F/F1 10/Courier@0 SF(DW_DLV_NO_ENTRY)69.336 144 Q F0 .443(and lea)
2.943 F -.15(ve)-.2 G(s).15 E F1(returned_die)2.943 E F0 2.943
(untouched. Only)2.943 F(.dw)2.943 E 2.943(oo)-.1 G .442
(bjects and .dwp package f)-2.943 F(iles)-.2 E(ha)69.336 156 Q .3 -.15
(ve t)-.2 H(he package f).15 E(ile inde)-.2 E 2.5(xs)-.15 G(ections.)
-2.5 E .125(If there is an error of some sort the function returns)
69.336 174 R F1(DW_DLV_ERROR)2.625 E F0 2.625(,l)C(ea)-2.625 E -.15(ve)
-.2 G(s).15 E F1(returned_die)2.625 E F0(untouched,)2.625 E(and sets)
69.336 186 Q F1(*error)2.5 E F0
(to indicate the precise error encountered.)2.5 E/F2 11/Times-Bold@0 SF
2.75(6.28.3 d)69.336 237 R(warf_get_deb)-.165 E(ugf)-.22 E(ission_f)
-.275 E(or_die\(\))-.275 E F0(int dw)69.336 255 Q(arf_get_deb)-.1 E(ugf)
-.2 E(ission_for_die\(Dw)-.2 E(arf_Die die,)-.1 E(Dw)79.336 267 Q
(arf_Deb)-.1 E(ug_Fission_Per_CU * percu_out,)-.2 E(Dw)79.336 279 Q
(arf_Error *)-.1 E(error\);)5 E .696(The function)69.336 297 R F1
(dwarf_get_debugfission_for_die\(\))3.196 E F0 .696(returns the deb)
3.196 F .695(ug f)-.2 F .695(ission for the compilation)-.2 F
(unit the DIE is a part of.)69.336 309 Q(An)5 E 2.5(yD)-.15 G
(IE in the compilation \(or type\) unit will get the same result.)-2.5 E
(On a call to this function ensure the pointed-to space is fully initia\
lized.)69.336 327 Q(On success the function returns)69.336 345 Q F1
(DW_DLV_OK)2.5 E F0(and f)2.5 E(ills in the f)-.2 E(ields of)-.2 E F1
(*percu_out)2.5 E F0(for which it has data.)2.5 E 4.215
(If there is no D)69.336 363 R 4.215(WP P)-.3 F 4.215
(ackage File section the function returns)-.15 F F1(DW_DLV_NO_ENTRY)
6.716 E F0 4.216(and lea)6.716 F -.15(ve)-.2 G(s).15 E F1(*percu_out)
69.336 375 Q F0 2.5(untouched. Only)2.5 F(.dwp package f)2.5 E(iles ha)
-.2 E .3 -.15(ve t)-.2 H(he package f).15 E(ile inde)-.2 E 2.5(xs)-.15 G
(ections.)-2.5 E .982
(If there is an error of some sort the function returns)69.336 393 R F1
(DW_DLV_ERROR)3.482 E F0 3.482(,l)C(ea)-3.482 E -.15(ve)-.2 G(s).15 E F1
(*percu_out)3.482 E F0(untouched,)3.482 E(and sets)69.336 405 Q F1
(*error)2.5 E F0(to indicate the precise error encountered.)2.5 E F2
2.75(6.28.4 d)69.336 450 R(warf_get_deb)-.165 E(ugf)-.22 E(ission_f)
-.275 E(or_k)-.275 E(ey\(\))-.11 E F0(int dw)69.336 468 Q(arf_get_deb)
-.1 E(ugf)-.2 E(ission_for_k)-.2 E -.15(ey)-.1 G(\(Dw).15 E(arf_Deb)-.1
E(ug dbg,)-.2 E(Dw)79.336 480 Q(arf_Sig8 *)-.1 E -.1(ke)42.5 G -.65(y,)
-.05 G(const char *)79.336 492 Q -.1(ke)42.5 G(y_type ,)-.05 E(Dw)79.336
504 Q(arf_Deb)-.1 E(ug_Fission_Per_CU * percu_out,)-.2 E(Dw)79.336 516 Q
(arf_Error *)-.1 E(error\);)40 E 4.153(The function)69.336 546 R F1
(dwarf_get_debugfission_for_key\(\))6.653 E F0 4.153(returns the deb)
6.653 F 4.153(ug f)-.2 F 4.154(ission data for the)-.2 F
(compilation unit in a .dwp)69.336 558 Q(package f)5 E(ile.)-.2 E 4.216
(If there is no D)69.336 576 R 4.216(WP P)-.3 F 4.215
(ackage File section the function returns)-.15 F F1(DW_DLV_NO_ENTRY)
6.715 E F0 4.215(and lea)6.715 F -.15(ve)-.2 G(s).15 E F1(*percu_out)
69.336 588 Q F0 2.5(untouched. Only)2.5 F(.dwp package f)2.5 E(iles ha)
-.2 E .3 -.15(ve t)-.2 H(he package f).15 E(ile inde)-.2 E 2.5(xs)-.15 G
(ections.)-2.5 E .982
(If there is an error of some sort the function returns)69.336 606 R F1
(DW_DLV_ERROR)3.482 E F0 3.482(,l)C(ea)-3.482 E -.15(ve)-.2 G(s).15 E F1
(*percu_out)3.483 E F0(untouched,)3.483 E(and sets)69.336 618 Q F1
(*error)2.5 E F0(to indicate the precise error encountered.)2.5 E F2
2.75(6.28.5 d)69.336 651 R(warf_get_xu_index_header\(\))-.165 E F0(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(07 -)
-2.5 E 0 Cg EP
%%Page: 108 108
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(08 -)-2.5 E(int dw)69.336 96
Q(arf_get_xu_inde)-.1 E(x_header\(Dw)-.15 E(arf_Deb)-.1 E(ug dbg,)-.2 E
(const char *)79.336 108 Q(section_type, /* "tu" or "cu" */)5 E(Dw)
79.336 120 Q(arf_Xu_Inde)-.1 E(x_Header *)-.15 E(xuhdr)12.5 E(,)-.4 E
(Dw)79.336 132 Q(arf_Unsigned *)-.1 E -.15(ve)30 G(rsion_number).15 E(,)
-.4 E(Dw)79.336 144 Q(arf_Unsigned *)-.1 E(of)30 E 7.5(fsets_count /*)
-.25 F(L*/,)2.5 E(Dw)79.336 156 Q(arf_Unsigned *)-.1 E 12.5
(units_count /*)30 F(N*/,)2.5 E(Dw)79.336 168 Q(arf_Unsigned *)-.1 E
(hash_slots_count /* M*/,)30 E(const char)79.336 180 Q 25(** sect_name,)
12.5 F(Dw)79.336 192 Q(arf_Error *)-.1 E(err\);)37.5 E .999
(The function)69.336 210 R/F1 10/Courier@0 SF
(dwarf_get_xu_index_header\(\))3.499 E F0(tak)3.498 E .998
(es as input a v)-.1 F .998(alid Dw)-.25 F(arf_Deb)-.1 E .998
(ug pointer and an)-.2 F F1(section_type)69.336 222 Q F0 -.25(va)2.5 G
(lue, which must one of the strings).25 E F1(tu)2.5 E F0(or)2.5 E F1(cu)
2.5 E F0(.)A(It returns D)69.336 240 Q(W_DL)-.3 E(V_NO_ENTR)-1 E 2.5(Yi)
-.65 G 2.5(ft)-2.5 G(he section requested is not in the object f)-2.5 E
(ile.)-.2 E 1.968(It returns D)69.336 258 R(W_DL)-.3 E(V_ERR)-1 E 1.969
(OR there is an error of some kind.)-.4 F 1.969(and the)6.969 F 1.969
(error is indicated by the v)6.969 F(alue)-.25 E(returned through the)
69.336 270 Q F1(error)2.5 E F0(pointer)2.5 E(.)-.55 E
(If successful, the function returns D)69.336 288 Q(W_DL)-.3 E
(V_OK and returns the follo)-1 E(wing v)-.25 E
(alues through the pointers:)-.25 E(The)69.336 306 Q F1(xuhdr)2.5 E F0
-.2(fi)2.5 G(eld is a pointer usable in other operations \(see belo).2 E
(w\).)-.25 E(The)69.336 324 Q F1(version_number)2.654 E F0 -.2(fi)2.654
G .154(eld is a the inde).2 F 2.653(xv)-.15 G .153(ersion number)-2.803
F 5.153(.F)-.55 G .153(or gcc before D)-5.303 F -1.2(WA)-.3 G .153
(RF5 the v)1.2 F .153(ersion number)-.15 F(is 2.)69.336 336 Q -.15(Fo)5
G 2.5(rD).15 G -1.2(WA)-2.8 G(RF5 the v)1.2 E(ersion number is 5.)-.15 E
(The)69.336 354 Q F1(offsets_count)2.83 E F0 -.2(fi)2.83 G .331
(eld is a the number of columns in the table of section of).2 F 2.831
(fsets. Sometimes)-.25 F(kno)2.831 E(wn)-.25 E(as)69.336 366 Q F1(L)2.5
E F0(.)A(The)69.336 384 Q F1(units_count)4.148 E F0 -.2(fi)4.148 G 1.647
(eld is a the number of compilation units or type units in the inde).2 F
4.147(x. Sometimes)-.15 F(kno)69.336 396 Q(wn as)-.25 E F1(N)2.5 E F0(.)
A(The)69.336 414 Q F1(hash_slots_count)2.5 E F0 -.2(fi)2.5 G
(eld is a the number of slots in the hash table.).2 E(Sometimes kno)5 E
(wn as)-.25 E F1(M)2.5 E F0(.)A(The)69.336 432 Q F1(sect_name)3.155 E F0
-.2(fi)3.155 G .655(eld is the name of the section in the object f).2 F
3.155(ile. Because)-.2 F .655(non-Elf objects may not use)3.155 F 1.473
(section names callers must recognize that the sect_name may be set to \
NULL \(zero\) or to point to the)69.336 444 R
(empty string and this is not considered an error)69.336 456 Q(.)-.55 E
(An e)69.336 486 Q(xample of initializing and disposing of a)-.15 E F1
(Dwarf_Xu_Index_Header)2.5 E F0(follo)2.5 E(ws.)-.25 E(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(08 -)-2.5 E 0 Cg
EP
%%Page: 109 109
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(09 -)-2.5 E/F1 10/Courier@0
SF(void exampley\(Dwarf_Debug dbg, const char *type\))69.336 96 Q({)
69.336 108 Q(/* type is "tu" or "cu" */)81.336 120 Q(int res = 0;)81.336
132 Q(Dwarf_Xu_Index_Header xuhdr = 0;)81.336 144 Q
(Dwarf_Unsigned version_number = 0;)81.336 156 Q
(Dwarf_Unsigned offsets_count = 0; /*L */)81.336 168 Q
(Dwarf_Unsigned units_count = 0; /* M */)81.336 180 Q
(Dwarf_Unsigned hash_slots_count = 0; /* N */)81.336 192 Q
(Dwarf_Error err = 0;)81.336 204 Q(const char * ret_type = 0;)81.336 216
Q(const char * section_name = 0;)81.336 228 Q
(res = dwarf_get_xu_index_header\(dbg,)81.336 252 Q(type,)93.336 264 Q
(&xuhdr,)93.336 276 Q(&version_number,)93.336 288 Q(&offsets_count,)
93.336 300 Q(&units_count,)93.336 312 Q(&hash_slots_count,)93.336 324 Q
(&section_name,)93.336 336 Q(&err\);)93.336 348 Q
(if \(res == DW_DLV_NO_ENTRY\) {)81.336 360 Q(/* No such section. */)
93.336 372 Q(return;)93.336 384 Q(})81.336 396 Q
(if \(res == DW_DLV_ERROR\) {)81.336 408 Q(/* Something wrong. */)93.336
420 Q(return;)93.336 432 Q(})81.336 444 Q(if \(res == DW_DLV_ERROR\) {)
81.336 456 Q(/* Impossible error. */)93.336 468 Q
(dwarf_xu_header_free\(xuhdr\);)93.336 480 Q(return;)93.336 492 Q(})
81.336 504 Q(/* Do something with the xuhdr here . */)81.336 516 Q
(dwarf_xu_header_free\(xuhdr\);)81.336 528 Q(})69.336 540 Q/F2 11
/Times-Bold@0 SF 2.75(6.28.6 d)69.336 561 R
(warf_get_xu_index_section_type\(\))-.165 E F0(int dw)69.336 579 Q
(arf_get_xu_inde)-.1 E(x_section_type\()-.15 E(Dw)79.336 591 Q
(arf_Xu_Inde)-.1 E(x_Header xuhdr)-.15 E(,)-.4 E
(const char ** typename,)79.336 603 Q(const char ** sectionname,)79.336
615 Q(Dw)79.336 627 Q(arf_Error * error\);)-.1 E 18.584(The function)
69.336 645 R F1(dwarf_get_xu_section_type\(\))21.084 E F0(tak)21.084 E
18.584(es as input a v)-.1 F(alid)-.25 E F1(Dwarf_Xu_Index_Header)69.336
657 Q F0 6.176(.I)C 3.676(ti)-6.176 G 3.676(so)-3.676 G 1.175
(nly useful when one already as an open)-3.676 F F1(xuhdr)3.675 E F0 -.2
(bu)3.675 G 3.675(to).2 G 1.175(ne does not)-3.675 F(kno)69.336 669 Q
2.5(wi)-.25 G 2.5(ft)-2.5 G(his is a type unit or compilation unit inde)
-2.5 E 2.5(xs)-.15 G(ection.)-2.5 E 5.09(If it returns D)69.336 687 R
(W_DL)-.3 E(V_NO_ENTR)-1 E 7.59(Ys)-.65 G 5.09
(omething is wrong \(should ne)-7.59 F -.15(ve)-.25 G 7.59(rh).15 G 7.59
(appen\). If)-7.59 F 5.09(it returns)7.59 F -.3(DW)69.336 699 S(_DL).3 E
(V_ERR)-1 E(OR something is wrong and the)-.4 E F1(error)2.5 E F0 -.2
(fi)2.5 G(eld is set to indicate a specif).2 E(ic error)-.2 E(.)-.55 E
(If successful, the function returns D)69.336 717 Q(W_DL)-.3 E
(V_OK and sets the follo)-1 E(wing ar)-.25 E
(guments through the pointers:)-.18 E F1(typename)69.336 735 Q F0 1.516
(is set to the string)4.016 F F1(tu)6.516 E F0(or)4.016 E F1(cu)6.516 E
F0 1.516(to indcate the inde)4.016 F 4.016(xi)-.15 G 4.016(so)-4.016 G
4.016(fa)-4.016 G 1.515(type unit or a compilation unit,)-.001 F(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(09 -)
-2.5 E 0 Cg EP
%%Page: 110 110
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(10 -)-2.5 E(respecti)69.336
96 Q -.15(ve)-.25 G(ly).15 E(.)-.65 E/F1 10/Courier@0 SF(sectionname)
69.336 114 Q F0 1.467(is set to name of the object f)3.966 F 1.467
(ile section.)-.2 F 1.467(Because non-Elf objects may not use section)
6.467 F .241(names callers must recognize that the sect_name may be set\
 to NULL \(zero\) or to point to the empty string)69.336 126 R
(and this is not considered an error)69.336 138 Q(.)-.55 E
(Neither string should be free\(\)d.)69.336 156 Q/F2 11/Times-Bold@0 SF
2.75(6.28.7 d)69.336 201 R(warf_get_xu_header_fr)-.165 E(ee\(\))-.198 E
F0 -.2(vo)69.336 219 S(id dw).2 E(arf_xu_header_free\(Dw)-.1 E
(arf_Xu_Inde)-.1 E(x_Header xuhdr\);)-.15 E .948(The function)69.336 237
R F1(dwarf_get_xu_header_free\(\))3.448 E F0(tak)3.449 E .949
(es as input a v)-.1 F(alid)-.25 E F1(Dwarf_Xu_Index_Header)3.449 E F0
.149(and frees all the special data allocated for this access type.)
69.336 249 R .148(Once called, an)5.148 F 2.648(yp)-.15 G .148
(ointers returned by use of the)-2.648 F F1(xuhdr)69.336 261 Q F0
(should be considered stale and unusable.)2.5 E F2 2.75(6.28.8 d)69.336
294 R(warf_get_xu_hash_entry\(\))-.165 E F0(int dw)69.336 312 Q
(arf_get_xu_hash_entry\()-.1 E(Dw)79.336 324 Q(arf_Xu_Inde)-.1 E
(x_Header xuhdr)-.15 E(,)-.4 E(Dw)79.336 336 Q 17.5(arf_Unsigned inde)
-.1 F(x,)-.15 E(Dw)79.336 348 Q 10(arf_Sig8 *)-.1 F(hash_v)15 E(alue,)
-.25 E(Dw)79.336 360 Q(arf_Unsigned *)-.1 E(inde)15 E(x_to_sections,)
-.15 E(Dw)79.336 372 Q(arf_Error *)-.1 E(error\);)22.5 E 1.698
(The function)69.336 390 R F1(dwarf_get_xu_hash_entry\(\))4.198 E F0
(tak)4.199 E 1.699(es as input a v)-.1 F(alid)-.25 E F1
(Dwarf_Xu_Index_Header)4.199 E F0 5.882(and an)69.336 402 R F1(index)
10.882 E F0 5.881(of a hash slot entry \(v)8.382 F 5.881
(alid hash slot inde)-.25 F 8.381(xv)-.15 G 5.881
(alues are zero \(0\) through)-8.631 F F1(hash_slots_count -1)69.336 414
Q F0(\(M-1\)\).)2.5 E(If it returns D)69.336 432 Q(W_DL)-.3 E(V_NO_ENTR)
-1 E 2.5(Ys)-.65 G(omething is wrong)-2.5 E(If it returns D)69.336 450 Q
(W_DL)-.3 E(V_ERR)-1 E(OR something is wrong and the)-.4 E F1(error)2.5
E F0 -.2(fi)2.5 G(eld is set to indicate a specif).2 E(ic error)-.2 E(.)
-.55 E(If successful, the function returns D)69.336 468 Q(W_DL)-.3 E
(V_OK and sets the follo)-1 E(wing ar)-.25 E
(guments through the pointers:)-.18 E F1(hash_value)69.336 486 Q F0
(is set to the 64bit hash of of the symbol name.)2.5 E F1
(index_to_sections)69.336 504 Q F0(is set to the inde)2.5 E 2.5(xi)-.15
G(nto of)-2.5 E(fset-size tables of this hash entry)-.25 E(.)-.65 E
4.447(If both)69.336 522 R F1(hash_value)6.947 E F0(and)6.947 E F1
(index_to_sections)6.947 E F0 4.448
(are zero \(0\) then the hash slot is unused.)6.948 F F1
(index_to_sections)69.336 534 Q F0 .601
(is used in calls to the function)3.101 F F1
(dwarf_get_xu_section_offset\(\))3.101 E F0 .601(as the)3.101 F F1
(row_index)69.336 546 Q F0(.)A(An e)69.336 564 Q(xample of use follo)
-.15 E(ws.)-.25 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E
2.5(-1)118.21 G(10 -)-2.5 E 0 Cg EP
%%Page: 111 111
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(11 -)-2.5 E/F1 10/Courier@0
SF(void examplez\( Dwarf_Xu_Index_Header xuhdr,)69.336 96 Q
(Dwarf_Unsigned hash_slots_count\))81.336 108 Q({)69.336 120 Q 6
(/* hash_slots_count)81.336 132 R(returned by)6 E
(dwarf_get_xu_index_header\(\), see above. */)105.336 144 Q
(static Dwarf_Sig8 zerohashval;)81.336 156 Q(Dwarf_Error err = 0;)81.336
180 Q(Dwarf_Unsigned h = 0;)81.336 192 Q
(for\( h = 0; h < hash_slots_count; h++\) {)81.336 216 Q
(Dwarf_Sig8 hashval;)93.336 228 Q(Dwarf_Unsigned index = 0;)93.336 240 Q
(Dwarf_Unsigned col = 0;)93.336 252 Q(int res = 0;)93.336 264 Q
(res = dwarf_get_xu_hash_entry\(xuhdr,h,)93.336 288 Q
(&hashval,&index,&err\);)105.336 300 Q(if \(res == DW_DLV_ERROR\) {)
93.336 312 Q(/* Oops. hash_slots_count wrong. */)105.336 324 Q(return;)
105.336 336 Q 6(}e)93.336 348 S(lse if \(res == DW_DLV_NO_ENTRY\) {)-6 E
(/* Impossible */)105.336 360 Q(return;)105.336 372 Q 6(}e)93.336 384 S
(lse if \(!memcmp\(&hashval,&zerohashval,sizeof\(Dwarf_Sig8\)\))-6 E
(&& index == 0 \) {)105.336 396 Q(/* An unused hash slot */)105.336 408
Q(continue;)105.336 420 Q(})93.336 432 Q
(/*Here, hashval and index \(a row index into offsets and lengths\))
93.336 444 Q(are valid. */)105.336 456 Q(})81.336 468 Q(})69.336 480 Q
/F2 11/Times-Bold@0 SF 2.75(6.28.9 d)69.336 543 R
(warf_get_xu_section_names\(\))-.165 E F0(int dw)69.336 561 Q
(arf_get_xu_section_names\()-.1 E(Dw)79.336 573 Q(arf_Xu_Inde)-.1 E
(x_Header xuhdr)-.15 E(,)-.4 E(Dw)79.336 585 Q 17.5
(arf_Unsigned column_inde)-.1 F(x,)-.15 E(Dw)79.336 597 Q 15
(arf_Unsigned* number)-.1 F(,)-.4 E(const char **)79.336 609 Q(name,)
22.5 E(Dw)79.336 621 Q(arf_Error *)-.1 E(err\);)22.5 E 17.727
(The function)69.336 639 R F1(dwarf_get_xu_section_names\(\))20.227 E F0
(tak)20.227 E 17.727(es as input a v)-.1 F(alid)-.25 E F1
(Dwarf_Xu_Index_Header)69.336 651 Q F0 1.234(and a)3.734 F F1
(column_index)6.234 E F0 1.234(of a hash slot entry \(v)3.734 F 1.233
(alid column_inde)-.25 F 3.733(xv)-.15 G(alues)-3.983 E
(are zero \(0\) through)69.336 663 Q F1(offsets_count -1)2.5 E F0
(\(L-1\)\).)2.5 E(If it returns D)69.336 681 Q(W_DL)-.3 E(V_NO_ENTR)-1 E
2.5(Ys)-.65 G(omething is wrong)-2.5 E(If it returns D)69.336 699 Q
(W_DL)-.3 E(V_ERR)-1 E(OR something is wrong and the)-.4 E F1(error)2.5
E F0 -.2(fi)2.5 G(eld is set to indicate a specif).2 E(ic error)-.2 E(.)
-.55 E(If successful, the function returns D)69.336 717 Q(W_DL)-.3 E
(V_OK and sets the follo)-1 E(wing ar)-.25 E
(guments through the pointers:)-.18 E F1(number)69.336 735 Q F0 .797
(is set to a number identifying which section this column applies to. F)
3.297 F .797(or e)-.15 F .798(xample, if the v)-.15 F .798(alue is)-.25
F(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G
(11 -)-2.5 E 0 Cg EP
%%Page: 112 112
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(12 -)-2.5 E/F1 10/Courier@0
SF(DW_SECT_INFO)69.336 96 Q F0 1.763(\(1\) the column came from)4.263 F
4.262(a.)6.762 G(deb)-4.262 E(ug_info.dw)-.2 E 4.262(os)-.1 G 4.262
(ection. See)-4.262 F 1.762(the table of)4.262 F F1(DW_SECT_)4.262 E F0
(identif)69.336 108 Q(iers and asigned numbers in D)-.2 E -1.2(WA)-.3 G
(RF5.)1.2 E F1(name)69.336 126 Q F0
(is set to the applicable spelling of the section identif)2.5 E(ier)-.2
E 2.5(,f)-.4 G(or e)-2.5 E(xample)-.15 E F1(DW_SECT_INFO)2.5 E F0(.)A/F2
11/Times-Bold@0 SF 2.75(6.28.10 d)69.336 171 R
(warf_get_xu_section_offset\(\))-.165 E F0(int dw)69.336 189 Q
(arf_get_xu_section_of)-.1 E(fset\()-.25 E(Dw)79.336 201 Q(arf_Xu_Inde)
-.1 E(x_Header xuhdr)-.15 E(,)-.4 E(Dw)79.336 213 Q 17.5
(arf_Unsigned ro)-.1 F(w_inde)-.25 E(x,)-.15 E(Dw)79.336 225 Q 17.5
(arf_Unsigned column_inde)-.1 F(x,)-.15 E(Dw)79.336 237 Q 15
(arf_Unsigned* sec_of)-.1 F(fset,)-.25 E(Dw)79.336 249 Q 15
(arf_Unsigned* sec_size,)-.1 F(Dw)79.336 261 Q(arf_Error *)-.1 E
(error\);)22.5 E 16.87(The function)69.336 279 R F1
(dwarf_get_xu_section_offset\(\))19.37 E F0(tak)19.37 E 16.87
(es as input a v)-.1 F(alid)-.25 E F1(Dwarf_Xu_Index_Header)69.336 291 Q
F0 .81(and a)3.31 F F1(row_index)5.81 E F0(\(see)3.31 E F1
(dwarf_get_xu_hash_entry\(\))3.31 E F0(abo)3.31 E -.15(ve)-.15 G 3.31
(\)a).15 G(nd)-3.31 E(a)69.336 303 Q F1(column_index)7.556 E F0 7.557
(.V)C 2.557(alid ro)-8.667 F(w_inde)-.25 E 5.057(xv)-.15 G 2.557
(alues are one \(1\) through)-5.307 F F1(units_count)5.057 E F0 2.557
(\(N\) b)5.057 F 2.557(ut one uses)-.2 F F1(dwarf_get_xu_hash_entry\(\))
69.336 315 Q F0(\(abo)4.076 E -.15(ve)-.15 G 4.076(\)t).15 G 4.076(og)
-4.076 G 1.576(et ro)-4.076 F 4.076(wi)-.25 G(nde)-4.076 E 4.075(x. V)
-.15 F 1.575(alid column_inde)-1.11 F 4.075(xv)-.15 G 1.575
(alues are zero \(0\))-4.325 F(through)69.336 327 Q F1(offsets_count -1)
2.5 E F0(\(L-1\).)2.5 E(If it returns D)69.336 345 Q(W_DL)-.3 E
(V_NO_ENTR)-1 E 2.5(Ys)-.65 G(omething is wrong.)-2.5 E(If it returns D)
69.336 363 Q(W_DL)-.3 E(V_ERR)-1 E(OR something is wrong and the)-.4 E
F1(error)2.5 E F0 -.2(fi)2.5 G(eld is set to indicate a specif).2 E
(ic error)-.2 E(.)-.55 E(If successful, the function returns D)69.336
381 Q(W_DL)-.3 E(V_OK and sets the follo)-1 E(wing ar)-.25 E
(guments through the pointers:)-.18 E F1(sec_offset)69.336 399 Q F0 4.03
(,\()C F1 1.53(base offset)-4.03 F F0 4.03(\)i)C 4.031(ss)-4.03 G 1.531
(et to the base of)-4.031 F 1.531
(fset of the initial compilation-unit-header section)-.25 F(tak)69.336
411 Q(en from)-.1 E 2.5(a.)5 G(dw)-2.5 E 2.5(oo)-.1 G 2.5
(bject. The base)-2.5 F(of)2.5 E
(fset is the data from a single section of a .dw)-.25 E 2.5(oo)-.1 G
(bject.)-2.5 E F1(sec_size)69.336 429 Q F0 .628
(is set to the length of the)3.128 F .628(original section tak)5.628 F
.628(en from a .dw)-.1 F 3.128(oo)-.1 G 3.128(bject. This)-3.128 F .628
(is the length in the)3.128 F(applicable section in the .dwp o)69.336
441 Q -.15(ve)-.15 G 2.5(rw).15 G(hich the base of)-2.5 E(fset applies.)
-.25 E 26.436(An e)69.336 459 R 26.437(xample of use of)-.15 F F1
(dwarf_get_xu_section_names\(\))28.937 E F0(and)28.937 E F1
(dwarf_get_xu_section_offset\(\))69.336 471 Q F0(follo)2.5 E(ws.)-.25 E
(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G
(12 -)-2.5 E 0 Cg EP
%%Page: 113 113
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(13 -)-2.5 E/F1 10/Courier@0
SF(void exampleza\(Dwarf_Xu_Index_Header xuhdr,)69.336 96 Q
(Dwarf_Unsigned offsets_count, Dwarf_Unsigned index \))81.336 108 Q({)
69.336 120 Q(Dwarf_Error err = 0;)81.336 132 Q(Dwarf_Unsigned col = 0;)
81.336 144 Q 6(/* We)81.336 156 R 6(use 'offsets_count')6 F(returned by)
6 E 6(ad)105.336 168 S(warf_get_xu_index_header\(\) call.)-6 E
(We use 'index' returned by a)105.336 180 Q
(dwarf_get_xu_hash_entry\(\) call. */)105.336 192 Q
(for \(col = 0; col < offsets_count; col++\) {)81.336 204 Q
(Dwarf_Unsigned off = 0;)93.336 216 Q(Dwarf_Unsigned len = 0;)93.336 228
Q(const char * name = 0;)93.336 240 Q(Dwarf_Unsigned num = 0;)93.336 252
Q(int res = 0;)93.336 264 Q(res = dwarf_get_xu_section_names\(xuhdr,)
93.336 288 Q(col,&num,&name,&err\);)189.336 300 Q
(if \(res != DW_DLV_OK\) {)93.336 312 Q(break;)117.336 324 Q(})93.336
336 Q(res = dwarf_get_xu_section_offset\(xuhdr,)93.336 348 Q
(index,col,&off,&len,&err\);)189.336 360 Q(if \(res != DW_DLV_OK\) {)
93.336 372 Q(break;)117.336 384 Q(})93.336 396 Q
(/* Here we have the DW_SECT_ name and number)93.336 408 Q
(and the base offset and length of the)111.336 420 Q
(section data applicable to the hash)111.336 432 Q(that got us here.)
111.336 444 Q(Use the values.*/)111.336 456 Q(})81.336 468 Q(})69.336
492 Q/F2 12/Times-Bold@0 SF 3(6.29 T)69.336 532 R 1.32 -.66(AG A)-1.08 H
(TTR etc names as strings)-.48 E F0 1.241(These functions turn a v)
69.336 550 R 1.241(alue into a string.)-.25 F 1.241(So applications w)
6.241 F 1.24(anting the string "D)-.1 F(W_T)-.3 E -.4(AG)-.93 G
(_compile_unit").4 E(gi)69.336 562 Q -.15(ve)-.25 G 2.5(nt).15 G(he v)
-2.5 E(alue 0x11 \(the v)-.25 E(alue def)-.25 E(ined for this T)-.2 E
-.4(AG)-.93 G 2.5(\)c).4 G(an do so easily)-2.5 E(.)-.65 E
(The general form is)69.336 586 Q F1(int dwarf_get_<something>_name\()
89.336 604 Q(unsigned value,)137.336 616 Q(char **s_out,)137.336 628 Q
(\);)137.336 640 Q F0 .292(If the)69.336 670 R F1(value)2.793 E F0 .293
(passed in is kno)2.793 F .293(wn, the function returns)-.25 F F1
(DW_DLV_OK)2.793 E F0 .293(and places a pointer to the appropriate)2.793
F 1.409(string into)69.336 682 R F1(*s_out)6.409 E F0 8.909(.T)C 1.408
(he string is in static storage and applications must ne)-8.909 F -.15
(ve)-.25 G 3.908(rf).15 G 1.408(ree the string.)-3.908 F 1.408(If the)
6.408 F F1(value)69.336 694 Q F0 .115(is not kno)2.615 F(wn,)-.25 E F1
(DW_DLV_NO_ENTRY)2.615 E F0 .115(is returned and)2.615 F F1(*s_out)2.615
E F0 .115(is not set.)2.615 F F1(DW_DLV_ERROR)5.115 E F0 .115(is ne)
2.615 F -.15(ve)-.25 G(r).15 E(returned.)69.336 706 Q F1(Libdwarf)69.336
730 Q F0(generates these functions at libdw)2.5 E(arf b)-.1 E
(uild time by reading dw)-.2 E(arf.h.)-.1 E(re)69.336 768 Q 2.5(v2)-.25
G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(13 -)-2.5 E 0 Cg EP
%%Page: 114 114
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(14 -)-2.5 E(All these follo)
69.336 96 Q 2.5(wt)-.25 G(his pattern rigidly)-2.5 E 2.5(,s)-.65 G 2.5
(ot)-2.5 G(he details of each are not repeated for each function.)-2.5 E
.12(The choice of 'unsigned' for the v)69.336 120 R .12(alue type ar)
-.25 F .12(gument \(the code v)-.18 F .12(alue\) ar)-.25 F .12
(gument is some)-.18 F .12(what arbitrary)-.25 F 2.62(,')-.65 G(int')
-2.62 E(could ha)69.336 132 Q .3 -.15(ve b)-.2 H(een used.).15 E .039
(The library simply assumes the v)69.336 156 R .039
(alue passed in is applicable.)-.25 F .04(So, for e)5.039 F .04
(xample, passing a T)-.15 F .84 -.4(AG v)-.93 H .04(alue code to).15 F
/F1 10/Courier@0 SF(dwarf_get_ACCESS_name\(\))69.336 168 Q F0 .225
(is a coding error which libdw)2.725 F .224(arf will process as if it w)
-.1 F .224(as an accessibility)-.1 F(code v)69.336 180 Q 2.5
(alue. Examples)-.25 F(of bad and good usage are:)2.5 E F1
(void examplezb\(void\))89.336 210 Q({)89.336 222 Q
(const char * out = 0;)101.336 234 Q(int res = 0;)101.336 246 Q
(/* The following is wrong, do not do it! */)101.336 270 Q
(res = dwarf_get_ACCESS_name\(DW_TAG_entry_point,&out\);)101.336 282 Q
(/* Nothing one does here with 'res' or 'out')101.336 294 Q
(is meaningful. */)119.336 306 Q(/* The following is meaningful.*/)
101.336 330 Q(res = dwarf_get_TAG_name\(DW_TAG_entry_point,&out\);)
101.336 342 Q(if\( res == DW_DLV_OK\) {)101.336 354 Q
(/* Here 'out' is a pointer one can use which)113.336 366 Q
(points to the string "DW_TAG_entry_point". */)131.336 378 Q 6(}e)
101.336 390 S(lse {)-6 E(/* Here 'out' has not been touched, it is)
113.336 402 Q 6(uninitialized. Do)131.336 414 R(not use it. */)6 E(})
101.336 426 Q(})89.336 438 Q/F2 11/Times-Bold@0 SF 2.75(6.29.1 d)69.336
513 R(warf_get_A)-.165 E(CCESS_name\(\))-.605 E F0
(Returns an accessibility code name)69.336 531 Q(through the)5 E F1
(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F2 2.75(6.29.2 d)69.336 552 R
(warf_get_A)-.165 E(T_name\(\))-1.045 E F0(Returns an attrib)69.336 570
Q(ute code name)-.2 E(through the)5 E F1(s_out)2.5 E F0(pointer)2.5 E(.)
-.55 E F2 2.75(6.29.3 d)69.336 591 R(warf_get_A)-.165 E(TE_name\(\))
-1.045 E F0(Returns a base type encoding name)69.336 609 Q(through the)5
E F1(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F2 2.75(6.29.4 d)69.336 630 R
(warf_get_ADDR_name\(\))-.165 E F0 4.41
(Returns an address type encoding name)69.336 648 R 4.411(through the)
9.411 F F1(s_out)6.911 E F0(pointer)6.911 E 9.411(.A)-.55 G 6.911(so)
-9.411 G 6.911(ft)-6.911 G 4.411(his writing only)-6.911 F F1
(DW_ADDR_none)69.336 660 Q F0(is def)2.5 E(ined in)-.2 E F1(dwarf.h)5 E
F0(.)A F2 2.75(6.29.5 d)69.336 681 R(warf_get_A)-.165 E(TCF_name\(\))
-1.045 E F0 .242(Returns a SUN code flag encoding name)69.336 699 R .242
(through the)5.242 F F1(s_out)2.742 E F0(pointer)2.742 E 5.242(.T)-.55 G
.241(his code flag is entirely a D)-5.242 F -1.2(WA)-.3 G(RF)1.2 E -.15
(ex)69.336 711 S(tension.).15 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(14 -)-2.5 E 0 Cg EP
%%Page: 115 115
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(15 -)-2.5 E/F1 11
/Times-Bold@0 SF 2.75(6.29.6 d)69.336 99 R(warf_get_CHILDREN_name\(\))
-.165 E F0 .95
(Returns a child determination name \(which is seen in the abbre)69.336
117 R .95(viations section data\) through the)-.25 F/F2 10/Courier@0 SF
(s_out)3.45 E F0(pointer)69.336 129 Q 5.42(.T)-.55 G .42(he only v)-5.42
F .42(alue this recognizes for a 'yes' v)-.25 F .42(alue is 1.)-.25 F
.419(As a flag v)5.419 F .419(alue this is not quite correct \(an)-.25 F
(y)-.15 E .293(non-zero v)69.336 141 R .293(alue means yes\) b)-.25 F
.293(ut dealing with this is left up to client code \(normally compiler\
s really do emit)-.2 F 2.5(av)69.336 153 S(alue of 1 for a flag\).)-2.75
E F1 2.75(6.29.7 d)69.336 174 R(warf_get_childr)-.165 E(en_name\(\))
-.198 E F0 1.254(Returns a child determination name through the)69.336
192 R F2(s_out)3.753 E F0(pointer)3.753 E 3.753(,t)-.4 G 1.253
(hough this v)-3.753 F 1.253(ersion is really a libdw)-.15 F(arf)-.1 E
(artif)69.336 204 Q 3.935(act. The)-.1 F 1.435(standard function is)
3.935 F F2(dwarf_get_CHILDREN_name\(\))6.435 E F0 1.436
(which appears just abo)3.935 F -.15(ve)-.15 G 6.436(.A).15 G 3.936(sa)
-6.436 G .618(flag v)69.336 216 R .618
(alue this is not quite correct \(an)-.25 F 3.118(yn)-.15 G .618
(on-zero v)-3.118 F .617(alue means yes\) b)-.25 F .617
(ut dealing with this is left up to client)-.2 F
(code \(normally compilers really do emit a v)69.336 228 Q
(alue of 1 for a flag\).)-.25 E F1 2.75(6.29.8 d)69.336 249 R
(warf_get_CC_name\(\))-.165 E F0 2.5(Returns a)69.336 267 R(calling con)
2.5 E -.15(ve)-.4 G(ntion case code name through the).15 E F2(s_out)2.5
E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.9 d)69.336 288 R(warf_get_CF)
-.165 E(A_name\(\))-.99 E F0 2.5(Returns a)69.336 306 R
(call frame information instruction name through the)2.5 E F2(s_out)2.5
E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.10 d)69.336 327 R
(warf_get_DS_name\(\))-.165 E F0(Returns a decimal sign code name)69.336
345 Q(through the)5 E F2(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75
(6.29.11 d)69.336 366 R(warf_get_DSC_name\(\))-.165 E F0 2.5(Returns a)
69.336 384 R(discriminant descriptor code name through the)2.5 E F2
(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.12 d)69.336 405 R
(warf_get_EH_name\(\))-.165 E F0 2.5(Returns a)69.336 423 R(GNU e)2.5 E
(xception header code name through the)-.15 E F2(s_out)2.5 E F0(pointer)
2.5 E(.)-.55 E F1 2.75(6.29.13 d)69.336 444 R(warf_get_END_name\(\))
-.165 E F0(Returns an endian code name)69.336 462 Q(through the)5 E F2
(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.14 d)69.336 483 R
(warf_get_FORM_name\(\))-.165 E F0(Returns an form code name)69.336 501
Q(through the)5 E F2(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75
(6.29.15 d)69.336 522 R(warf_get_FRAME_name\(\))-.165 E F0 1.102
(Returns a frame code name)69.336 540 R 1.102(through the)6.102 F F2
(s_out)3.602 E F0(pointer)3.602 E 6.103(.T)-.55 G 1.103
(hese are dependent on the particular ABI, so)-6.103 F 1.555(unless the)
69.336 552 R F2(dwarf.h)4.055 E F0 1.555(used to generate libdw)4.055 F
1.554(arf matches your ABI these names are unlik)-.1 F 1.554
(ely to be v)-.1 F(ery)-.15 E(useful and certainly w)69.336 564 Q(on')
-.1 E 2.5(tb)-.18 G 2.5(ee)-2.5 G(ntirely appropriate.)-2.5 E F1 2.75
(6.29.16 d)69.336 585 R(warf_get_ID_name\(\))-.165 E F0 2.5(Returns an)
69.336 603 R(identif)2.5 E(ier case code name through the)-.2 E F2
(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.17 d)69.336 624 R
(warf_get_INL_name\(\))-.165 E F0 2.5(Returns an)69.336 642 R
(inline code name through the)2.5 E F2(s_out)2.5 E F0(pointer)2.5 E(.)
-.55 E F1 2.75(6.29.18 d)69.336 663 R(warf_get_LANG_name\(\))-.165 E F0
2.5(Returns a)69.336 681 R(language code name through the)2.5 E F2
(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.19 d)69.336 702 R
(warf_get_LNE_name\(\))-.165 E F0 2.5(Returns a)69.336 720 R
(line table e)2.5 E(xtended opcode code name through the)-.15 E F2
(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(15 -)-2.5 E 0 Cg EP
%%Page: 116 116
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(16 -)-2.5 E/F1 11
/Times-Bold@0 SF 2.75(6.29.20 d)69.336 99 R(warf_get_LNS_name\(\))-.165
E F0 2.5(Returns a)69.336 117 R
(line table standard opcode code name through the)2.5 E/F2 10/Courier@0
SF(s_out)2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.21 d)69.336 138 R
(warf_get_MA)-.165 E(CINFO_name\(\))-.605 E F0 2.5(Returns a)69.336 156
R(macro information macinfo code name through the)2.5 E F2(s_out)2.5 E
F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.22 d)69.336 177 R
(warf_get_OP_name\(\))-.165 E F0 2.5(Returns a)69.336 195 R -.3(DW)2.5 G
(ARF e)-.9 E(xpression operation code name through the)-.15 E F2(s_out)
2.5 E F0(pointer)2.5 E(.)-.55 E F1 2.75(6.29.23 d)69.336 216 R
(warf_get_ORD_name\(\))-.165 E F0 2.5(Returns an)69.336 234 R
(array ordering code name through the)2.5 E F2(s_out)2.5 E F0(pointer)
2.5 E(.)-.55 E F1 2.75(6.29.24 d)69.336 255 R(warf_get_T)-.165 E -.605
(AG)-.99 G(_name\(\)).605 E F0 2.5(Returns a)69.336 273 R -1.04 -.93
(TA G)2.5 H(name through the)3.43 E F2(s_out)2.5 E F0(pointer)2.5 E(.)
-.55 E F1 2.75(6.29.25 d)69.336 294 R(warf_get_VIR)-.165 E(TU)-.44 E
(ALITY_name\(\))-.66 E F0 2.5(Returns a)69.336 312 R
(virtuality code name through the)2.5 E F2(s_out)2.5 E F0(pointer)2.5 E
(.)-.55 E F1 2.75(6.29.26 d)69.336 333 R(warf_get_VIS_name\(\))-.165 E
F0(Returns a visibility code name)69.336 351 Q(through the)5 E F2(s_out)
2.5 E F0(pointer)2.5 E(.)-.55 E/F3 12/Times-Bold@0 SF 3(6.30 Section)
69.336 397 R(Operations)3 E F0 .703(In checking D)69.336 415 R -1.2(WA)
-.3 G .703(RF in link)1.2 F .704
(once sections for correctness it has been found useful to ha)-.1 F
1.004 -.15(ve c)-.2 H .704(ertain section-).15 F .69
(oriented operations when processing object f)69.336 427 R 3.189
(iles. Normally)-.2 F .689
(these operations are not needed or useful in a)3.189 F(fully-link)
69.336 439 Q(ed e)-.1 E -.15(xe)-.15 G(cutable or shared library).15 E
(.)-.65 E .004(While the code is written with Elf sections in mind, it \
is quite possible to process)69.336 463 R .005
(non-Elf objects with code)5.005 F
(that implements certain function pointers \(see)69.336 475 Q F2
(struct Dwarf_Obj_Access_interface_s)2.5 E F0(\).)A(So f)69.336 499 Q
(ar no one with such non-elf code has come forw)-.1 E
(ard to open-source it.)-.1 E F1 2.75(6.30.1 d)69.336 532 R
(warf_get_section_count\(\))-.165 E F2(int dwarf_get_section_count\()
69.336 550 Q(Dwarf_Debug dbg\))87.336 562 Q F0
(Returns a count of the number of object sections found.)69.336 592 Q F1
2.75(6.30.2 d)69.336 649 R(warf_get_section_inf)-.165 E(o_by_name\(\))
-.275 E F2(int dwarf_get_section_info_by_name\()69.336 667 Q
(const char *section_name,)87.336 679 Q(Dwarf_Addr *section_addr,)87.336
691 Q(Dwarf_Unsigned *section_size,)87.336 703 Q(Dwarf_Error *error\))
87.336 715 Q F0 .93(The function)69.336 733 R F2
(dwarf_get_section_info_by_name\(\))3.43 E F0(returns)3.43 E F2
(DW_DLV_OK)3.43 E F0 .93(if the section gi)3.43 F -.15(ve)-.25 G 3.43
(nb).15 G(y)-3.43 E(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5
E 2.5(-1)118.21 G(16 -)-2.5 E 0 Cg EP
%%Page: 117 117
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(17 -)-2.5 E/F1 10/Courier@0
SF(section_name)69.336 96 Q F0 -.1(wa)4.702 G 4.702(ss).1 G 2.202
(een by libdw)-4.702 F 4.702(arf. On)-.1 F 2.202(success it sets)4.702 F
F1(*section_addr)4.702 E F0 2.203(to the virtual address)4.703 F
(assigned to the section by the link)69.336 108 Q(er or compiler and)-.1
E F1(*section_size)2.5 E F0(to the size of the object section.)2.5 E
(It returns D)69.336 132 Q(W_DL)-.3 E(V_ERR)-1 E(OR on error)-.4 E(.)
-.55 E/F2 11/Times-Bold@0 SF 2.75(6.30.3 d)69.336 153 R
(warf_get_section_inf)-.165 E(o_by_index\(\))-.275 E F1
(int dwarf_get_section_info_by_index\()69.336 171 Q(int section_index,)
87.336 183 Q(const char **section_name,)87.336 195 Q
(Dwarf_Addr *section_addr,)87.336 207 Q(Dwarf_Unsigned *section_size,)
87.336 219 Q(Dwarf_Error *error\))87.336 231 Q F0 .264(The function)
69.336 249 R F1(dwarf_get_section_info_by_index\(\))2.764 E F0(returns)
2.764 E F1(DW_DLV_OK)2.763 E F0 .263(if the section gi)2.763 F -.15(ve)
-.25 G 2.763(nb).15 G(y)-2.763 E F1(section_index)69.336 261 Q F0 -.1
(wa)2.702 G 2.702(ss).1 G .202(een by libdw)-2.702 F(arf.)-.1 E F1
(*section_addr)5.202 E F0 .203
(to the virtual address assigned to the section)2.702 F(by the link)
69.336 273 Q(er or compiler and)-.1 E F1(*section_size)2.5 E F0
(to the size of the object section.)2.5 E(No free or deallocate of info\
rmation returned should be done by callers.)69.336 297 Q/F3 12
/Times-Bold@0 SF 3(6.31 Utility)69.336 343 R(Operations)3 E F0 .563(The\
se functions aid in the management of errors encountered when using fun\
ctions in the)69.336 361 R/F4 10/Times-Italic@0 SF(libdwarf)3.063 E F0
(library)3.063 E(and releasing memory allocated as a result of a)69.336
373 Q F4(libdwarf)2.5 E F0(operation.)2.5 E -.15(Fo)69.336 391 S 3.494
(rc).15 G .994(lients that wish to encode LEB numbers tw)-3.494 F 3.494
(oi)-.1 G(nterf)-3.494 E .994(aces are pro)-.1 F .995
(vided to the producer code')-.15 F 3.495(si)-.55 G(nternal)-3.495 E
(LEB function.)69.336 403 Q F2 2.75(6.31.1 d)69.336 436 R(warf_err)-.165
E(no\(\))-.165 E F1(Dwarf_Unsigned dwarf_errno\()69.336 454 Q
(Dwarf_Error error\))117.336 466 Q F0(The function)69.336 484 Q F1
(dwarf_errno\(\))2.5 E F0
(returns the error number corresponding to the error specif)2.5 E
(ied by)-.2 E F1(error)2.5 E F0(.)A F2 2.75(6.31.2 d)69.336 517 R
(warf_errmsg\(\))-.165 E F1(const char* dwarf_errmsg\()69.336 535 Q
(Dwarf_Error error\))117.336 547 Q F0 .117(The function)69.336 565 R F1
(dwarf_errmsg\(\))2.617 E F0 .117(returns a pointer to a null-terminate\
d error message string corresponding)2.617 F(to the error specif)69.336
577 Q(ied by)-.2 E F1(error)2.5 E F0 5(.T)C
(he string should not be deallocated using)-5 E F1(dwarf_dealloc\(\))2.5
E F0(.)A .254(The string should be considered to be a temporary string.)
69.336 601 R .254(That is, the returned pointer may become stale if)
5.254 F 6.937(you do libdw)69.336 613 R 6.937(arf calls on the)-.1 F F1
(Dwarf_Debug)9.436 E F0 6.936(instance other than)9.436 F F1
(dwarf_errmsg\(\))9.436 E F0(or)9.436 E F1(dwarf_errno\(\))69.336 625 Q
F0 6.12(.S)C 3.62(oc)-6.12 G(op)-3.62 E 3.62(yt)-.1 G 1.12
(he errmsg string \( or print it\) b)-3.62 F 1.121
(ut do not depend on the pointer remaining)-.2 F -.25(va)69.336 637 S
(lid past other libdw).25 E(arf calls to the)-.1 E F1(Dwarf_Debug)2.5 E
F0(instance that detected an error)2.5 E F2 2.75(6.31.3 d)69.336 682 R
(warf_get_harmless_err)-.165 E(or_list\(\))-.198 E F0(re)69.336 768 Q
2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(17 -)-2.5 E 0 Cg
EP
%%Page: 118 118
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(18 -)-2.5 E/F1 10/Courier@0
SF(int dwarf_get_harmless_error_list\(Dwarf_Debug dbg,)69.336 96 Q 6
(unsigned count,)93.336 108 R(const char ** errmsg_ptrs_array,)93.336
120 Q(unsigned * newerr_count\);)93.336 132 Q F0 2.146(The harmless err\
ors are not denoted by error returns from the other libdw)69.336 150 R
2.146(arf functions.)-.1 F 2.146(Instead, this)7.146 F .192
(function returns strings of an)69.336 162 R 2.692(yh)-.15 G .192
(armless errors that ha)-2.692 F .492 -.15(ve b)-.2 H .193
(een seen in the current object.).15 F .193(Clients ne)5.193 F -.15(ve)
-.25 G 2.693(rn).15 G(eed)-2.693 E(call this, b)69.336 174 Q
(ut if a client wishes to report an)-.2 E 2.5(ys)-.15 G
(uch errors it may call.)-2.5 E 1.928(Only a f)69.336 198 R(ix)-.2 E
1.927(ed number of harmless errors are recorded. It is a circular list,\
 so if more than the current)-.15 F
(maximum is encountered older harmless error messages are lost.)69.336
210 Q .272(The caller passes in a pointer to an array of pointer)69.336
234 R .272(-to-char as the ar)-.2 F(gument)-.18 E F1(errmsg_ptrs_array)
2.772 E F0 5.272(.T)C(he)-5.272 E 2.505(caller must pro)69.336 246 R
2.505(vide this array)-.15 F 5.005(,l)-.65 G(ibdw)-5.005 E 2.504
(arf does not pro)-.1 F 2.504(vide it.)-.15 F 2.504
(The caller need not initialize the array)7.504 F(elements.)69.336 258 Q
(The caller passes in the number of elements of the array of pointer)
69.336 282 Q(-to-char thru)-.2 E F1(count)2.5 E F0 7.5(.S)C(ince the)
-7.5 E 1.934
(If there are no unreported harmless errors the function returns)69.336
306 R F1(DW_DLV_NO_ENTRY)4.434 E F0 1.934(and the function)4.434 F(ar)
69.336 318 Q(guments are ignored.)-.18 E(Otherwise the function returns)
5 E F1(DW_DLV_OK)2.5 E F0(and uses the ar)2.5 E(guments.)-.18 E F1
(libdwarf)69.336 342 Q F0 .834
(assigns error strings to the errmsg_ptrs_array)3.334 F 5.834(.T)-.65 G
.833(he MININUM\(count-1, number of messages)-5.834 F .88
(recorded\) pointers are assigned to the array)69.336 354 R 5.88(.T)-.65
G .881(he array is terminated with a NULL pointer)-5.88 F 5.881(.\()-.55
G .881(That is, one)-5.881 F .358(array entry is reserv)69.336 366 R
.357(ed for a NULL pointer\).)-.15 F .357(So if)5.357 F F1(count)2.857 E
F0 .357(is 5 up to 4 strings may be returned through the)2.857 F(array)
69.336 378 Q 2.5(,a)-.65 G(nd one array entry is set to NULL.)-2.5 E
.585(Because the list is circular and messages may ha)69.336 402 R .885
-.15(ve b)-.2 H .586
(een dropped the function also returns the actual error).15 F .916
(count of harmless errors encountered through)69.336 414 R F1
(newerr_count)3.416 E F0 .916(\(unless the ar)3.416 F .916
(gument is NULL, in which)-.18 F(case it is ignored\).)69.336 426 Q
1.873(Each call to this function resets the circular error b)69.336 450
R(uf)-.2 E 1.873(fer and the error count.)-.25 F 1.874
(So think of this call as)6.873 F
(reporting harmless errors since the last call to it.)69.336 462 Q .277
(The pointers returned through)69.336 486 R F1(errmsg_ptrs_array)2.777 E
F0 .277(are only v)2.777 F .277(alid till the ne)-.25 F .276
(xt call to libdw)-.15 F 2.776(arf. Do)-.1 F(not)2.776 E(sa)69.336 498 Q
.3 -.15(ve t)-.2 H(he pointers, the).15 E 2.5(yb)-.15 G(ecome in)-2.5 E
-.25(va)-.4 G 2.5(lid. Cop).25 F 2.5(yt)-.1 G
(he strings if you wish to sa)-2.5 E .3 -.15(ve t)-.2 H(hem.).15 E
(Calling this function neither allocates an)69.336 522 Q 2.5(ys)-.15 G
(pace in memory nor frees an)-2.5 E 2.5(ys)-.15 G(pace in memory)-2.5 E
(.)-.65 E/F2 11/Times-Bold@0 SF 2.75(6.31.4 d)69.336 567 R
(warf_insert_harmless_err)-.165 E(or\(\))-.198 E F0 -.2(vo)69.336 585 S
(id dw).2 E(arf_insert_harmless_error\(Dw)-.1 E(arf_Deb)-.1 E(ug dbg,)
-.2 E(char * ne)79.336 597 Q(werror\);)-.25 E 1.386
(This function is used to test)69.336 615 R F1
(dwarf_get_harmless_error_list)3.886 E F0 3.886(.I)C 3.886(ts)-3.886 G
1.386(imply adds a harmless error)-3.886 F 4.476(string. There)69.336
627 R 1.975(is little reason client code should use this function.)4.476
F 1.975(It e)6.975 F 1.975(xists so that the harmless error)-.15 F
(functions can be easily tested for correctness and leaks.)69.336 639 Q
F2 2.75(6.31.5 d)69.336 672 R(warf_set_harmless_err)-.165 E
(or_list_size\(\))-.198 E F1
(unsigned dwarf_set_harmless_error_list_size\(Dwarf_Debug dbg,)69.336
690 Q(unsigned maxcount\))93.336 702 Q
(dwarf_set_harmless_error_list_size)69.336 720 Q F0 .678
(returns the number of harmless error strings the library)3.177 F .997
(is currently set to hold.)69.336 732 R(If)5.997 E F1(maxcount)3.497 E
F0 .996
(is non-zero the library changes the maximum it will record to be)3.497
F(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G
(18 -)-2.5 E 0 Cg EP
%%Page: 119 119
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(19 -)-2.5 E/F1 10/Courier@0
SF(maxcount)69.336 96 Q F0(.)A 1.914(It is e)69.336 120 R 1.914
(xtremely unwise to mak)-.15 F(e)-.1 E F1(maxcount)4.415 E F0(lar)4.415
E 1.915(ge because)-.18 F F1(libdwarf)4.415 E F0 1.915
(allocates space for)4.415 F F1(maxcount)4.415 E F0(strings immediately)
69.336 132 Q(.)-.65 E .439
(The set of errors enumerated in Figure 3 belo)69.336 162 R 2.939(ww)
-.25 G .439(ere def)-2.939 F .439(ined in Dw)-.2 F .439(arf 1.)-.1 F
.439(These errors are not used by the)5.439 F F1(libdwarf)69.336 174 Q
F0(implementation for Dw)2.5 E(arf 2 or later)-.1 E(.)-.55 E .4 LW
419.951 196.5 150.721 196.5 DL/F2 10/Times-Bold@0 SF(SYMBOLIC N)155.721
206 Q 14.54(AME DESCRIPTION)-.2 F 419.951 210.5 150.721 210.5 DL F0 -.3
(DW)155.721 220 S 42.71(_DLE_NE No).3 F(error \(0\))2.5 E -.3(DW)155.721
232 S 31.04(_DLE_VMM V).3 F(ersion of D)-1.11 E -1.2(WA)-.3 G
(RF information ne)1.2 E(wer)-.25 E(than libdw)260.061 244 Q(arf)-.1 E
-.3(DW)155.721 256 S 34.37(_DLE_MAP Memory).3 F(map f)2.5 E(ailure)-.1 E
-.3(DW)155.721 268 S 37.71(_DLE_LEE Propag).3 F(ation of libelf error)
-.05 E -.3(DW)155.721 280 S 36.04(_DLE_NDS No).3 F(deb)2.5 E(ug section)
-.2 E -.3(DW)155.721 292 S 37.15(_DLE_NLS No).3 F(line section)2.5 E -.3
(DW)155.721 304 S 45.49(_DLE_ID Requested).3 F
(information not associated)2.5 E(with descriptor)260.061 316 Q -.3(DW)
155.721 328 S 39.93(_DLE_IOF I/O).3 F -.1(fa)2.5 G(ilure).1 E -.3(DW)
155.721 340 S 34.37(_DLE_MAF Memory).3 F(allocation f)2.5 E(ailure)-.1 E
-.3(DW)155.721 352 S 45.49(_DLE_IA In).3 F -.25(va)-.4 G(lid ar).25 E
(gument)-.18 E -.3(DW)155.721 364 S 33.82(_DLE_MDE Mangled).3 F(deb)2.5
E(ugging entry)-.2 E -.3(DW)155.721 376 S 34.93(_DLE_MLE Mangled).3 F
(line number entry)2.5 E -.3(DW)155.721 388 S 36.04(_DLE_FNO File).3 F
(descriptor does not refer)2.5 E(to an open f)260.061 400 Q(ile)-.2 E
-.3(DW)155.721 412 S 36.59(_DLE_FNR File).3 F(is not a re)2.5 E(gular f)
-.15 E(ile)-.2 E -.3(DW)155.721 424 S(_DLE_FW).3 E 37.52(AF)-1.2 G
(ile is opened with wrong access)-37.52 E -.3(DW)155.721 436 S 34.93
(_DLE_NOB File).3 F(is not an object f)2.5 E(ile)-.2 E -.3(DW)155.721
448 S 34.37(_DLE_MOF Mangled).3 F(object f)2.5 E(ile header)-.2 E -.3
(DW)155.721 460 S 30.49(_DLE_EOLL End).3 F(of location list entries)2.5
E -.3(DW)155.721 472 S 29.38(_DLE_NOLL No).3 F(location list section)2.5
E -.3(DW)155.721 484 S(_DLE_B).3 E 16.94(ADOFF In)-.35 F -.25(va)-.4 G
(lid of).25 E(fset)-.25 E -.3(DW)155.721 496 S 37.15(_DLE_EOS End).3 F
(of section)2.5 E -.3(DW)155.721 508 S(_DLE_A).3 E(TR)-1.11 E 16.44
(UNC Abbre)-.4 F(viations section appears)-.25 E(truncated)260.061 520 Q
-.3(DW)155.721 532 S(_DLE_B).3 E 12.5(ADBITC Address)-.35 F
(size passed to)2.5 E(dw)260.061 544 Q(arf bad)-.1 E 419.951 548.5
150.721 548.5 DL 419.951 196.5 419.951 548.5 DL 150.721 196.5 150.721
548.5 DL F2(Figur)225.491 562 Q 2.5(e6)-.18 G(.)-2.5 E F0(Dw)5 E
(arf Error Codes)-.1 E .601(The set of errors returned by)69.336 592 R
F1(Libdwarf)3.101 E F0 .601(functions is listed belo)3.101 F 4.401 -.65
(w. T)-.25 H .601(he list does lengthen: the ones listed).65 F
(here are not really a complete list.)69.336 604 Q
(Some of the errors are SGI specif)5 E(ic.)-.2 E(re)69.336 768 Q 2.5(v2)
-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(19 -)-2.5 E 0 Cg EP
%%Page: 120 120
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(20 -)-2.5 E .4 LW 475.901
88.5 94.771 88.5 DL/F1 10/Times-Bold@0 SF(SYMBOLIC N)99.771 98 Q 123.88
(AME DESCRIPTION)-.2 F 475.901 102.5 94.771 102.5 DL F0 -.3(DW)99.771
112 S 105.94(_DLE_DBG_ALLOC Could).3 F(not allocate Dw)2.5 E(arf_Deb)-.1
E(ug struct)-.2 E -.3(DW)99.771 124 S(_DLE_FST).3 E -1.11(AT)-.93 G
(_ERR)1.11 E 98.92(OR Error)-.4 F(in fstat\(\)-ing object)2.5 E -.3(DW)
99.771 136 S(_DLE_FST).3 E -1.11(AT)-.93 G(_MODE_ERR)1.11 E 64.48
(OR Error)-.4 F(in mode of object f)2.5 E(ile)-.2 E -.3(DW)99.771 148 S
(_DLE_INIT_A).3 E(CCESS_WR)-.4 E 60.63(ONG Incorrect)-.4 F(access to dw)
2.5 E(arf_init\(\))-.1 E -.3(DW)99.771 160 S(_DLE_ELF_BEGIN_ERR).3 E
74.11(OR Error)-.4 F(in elf_be)2.5 E(gin\(\) on object)-.15 E -.3(DW)
99.771 172 S(_DLE_ELF_GETEHDR_ERR).3 E 58(OR Error)-.4 F
(in elf_getehdr\(\) on object)2.5 E -.3(DW)99.771 184 S
(_DLE_ELF_GETSHDR_ERR).3 E 58.55(OR Error)-.4 F
(in elf_getshdr\(\) on object)2.5 E -.3(DW)99.771 196 S
(_DLE_ELF_STRPTR_ERR).3 E 67.98(OR Error)-.4 F
(in elf_strptr\(\) on object)2.5 E -.3(DW)99.771 208 S(_DLE_DEB).3 E
(UG_INFO_DUPLICA)-.1 E 43.27(TE Multiple)-1.11 F(.deb)2.5 E
(ug_info sections)-.2 E -.3(DW)99.771 220 S(_DLE_DEB).3 E 71.05
(UG_INFO_NULL No)-.1 F(data in .deb)2.5 E(ug_info section)-.2 E -.3(DW)
99.771 232 S(_DLE_DEB).3 E(UG_ABBREV_DUPLICA)-.1 E 26.04(TE Multiple)
-1.11 F(.deb)2.5 E(ug_abbre)-.2 E(v)-.25 E(sections)313.451 244 Q -.3
(DW)99.771 256 S(_DLE_DEB).3 E 53.82(UG_ABBREV_NULL No)-.1 F
(data in .deb)2.5 E(ug_abbre)-.2 E 2.5(vs)-.25 G(ection)-2.5 E -.3(DW)
99.771 268 S(_DLE_DEB).3 E(UG_ARANGES_DUPLICA)-.1 E 19.38(TE Multiple)
-1.11 F(.deb)2.5 E(ug_arange)-.2 E(sections)313.451 280 Q -.3(DW)99.771
292 S(_DLE_DEB).3 E 47.16(UG_ARANGES_NULL No)-.1 F(data in .deb)2.5 E
(ug_arange section)-.2 E -.3(DW)99.771 304 S(_DLE_DEB).3 E
(UG_LINE_DUPLICA)-.1 E 43.83(TE Multiple)-1.11 F(.deb)2.5 E
(ug_line sections)-.2 E -.3(DW)99.771 316 S(_DLE_DEB).3 E 71.61
(UG_LINE_NULL No)-.1 F(data in .deb)2.5 E(ug_line section)-.2 E -.3(DW)
99.771 328 S(_DLE_DEB).3 E(UG_LOC_DUPLICA)-.1 E 46.6(TE Multiple)-1.11 F
(.deb)2.5 E(ug_loc sections)-.2 E -.3(DW)99.771 340 S(_DLE_DEB).3 E
74.38(UG_LOC_NULL No)-.1 F(data in .deb)2.5 E(ug_loc section)-.2 E -.3
(DW)99.771 352 S(_DLE_DEB).3 E(UG_MA)-.1 E(CINFO_DUPLICA)-.4 E 20.89
(TE Multiple)-1.11 F(.deb)2.5 E(ug_macinfo)-.2 E(sections)313.451 364 Q
-.3(DW)99.771 376 S(_DLE_DEB).3 E(UG_MA)-.1 E 48.67(CINFO_NULL No)-.4 F
(data in .deb)2.5 E(ug_macinfo section)-.2 E -.3(DW)99.771 388 S
(_DLE_DEB).3 E(UG_PUBN)-.1 E(AMES_DUPLICA)-.35 E 12.5(TE Multiple)-1.11
F(.deb)2.5 E(ug_pubnames)-.2 E(sections)313.451 400 Q -.3(DW)99.771 412
S(_DLE_DEB).3 E(UG_PUBN)-.1 E 40.28(AMES_NULL No)-.35 F(data in .deb)2.5
E(ug_pubnames)-.2 E(section)313.451 424 Q -.3(DW)99.771 436 S(_DLE_DEB)
.3 E(UG_STR_DUPLICA)-.1 E 48.26(TE Multiple)-1.11 F(.deb)2.5 E
(ug_str sections)-.2 E -.3(DW)99.771 448 S(_DLE_DEB).3 E 76.04
(UG_STR_NULL No)-.1 F(data in .deb)2.5 E(ug_str section)-.2 E -.3(DW)
99.771 460 S(_DLE_CU_LENGTH_ERR).3 E 68.56(OR Length)-.4 F
(of compilation-unit bad)2.5 E -.3(DW)99.771 472 S(_DLE_VERSION_ST).3 E
(AMP_ERR)-.93 E 46.7(OR Incorrect)-.4 F -1.11(Ve)2.5 G(rsion Stamp)1.11
E -.3(DW)99.771 484 S(_DLE_ABBREV_OFFSET_ERR).3 E 45.76(OR Of)-.4 F
(fset in .deb)-.25 E(ug_abbre)-.2 E 2.5(vb)-.25 G(ad)-2.5 E -.3(DW)
99.771 496 S(_DLE_ADDRESS_SIZE_ERR).3 E 55.77(OR Size)-.4 F
(of addresses in tar)2.5 E(get bad)-.18 E -.3(DW)99.771 508 S(_DLE_DEB)
.3 E 47.71(UG_INFO_PTR_NULL Pointer)-.1 F(into .deb)2.5 E(ug_info in)-.2
E(DIE null)313.451 520 Q -.3(DW)99.771 532 S 117.06(_DLE_DIE_NULL Null)
.3 F(Dw)2.5 E(arf_Die)-.1 E -.3(DW)99.771 544 S(_DLE_STRING_OFFSET_B).3
E 62.39(AD Of)-.35 F(fset in .deb)-.25 E(ug_str bad)-.2 E -.3(DW)99.771
556 S(_DLE_DEB).3 E(UG_LINE_LENGTH_B)-.1 E 32.52(AD Length)-.35 F
(of .deb)2.5 E(ug_line)-.2 E(se)313.451 568 Q(gment bad)-.15 E -.3(DW)
99.771 580 S(_DLE_LINE_PR).3 E(OLOG_LENGTH_B)-.4 E 27.26(AD Length)-.35
F(of .deb)2.5 E(ug_line)-.2 E(prolog bad)315.951 592 Q -.3(DW)99.771 604
S(_DLE_LINE_NUM_OPERANDS_B).3 E 30.74(AD Number)-.35 F
(of operands to line)2.5 E(instr bad)313.451 616 Q -.3(DW)99.771 628 S
(_DLE_LINE_SET_ADDR_ERR).3 E 48.56(OR Error)-.4 F(in D)2.5 E
(W_LNE_set_address)-.3 E(instruction)315.951 640 Q 475.901 644.5 94.771
644.5 DL 475.901 88.5 475.901 644.5 DL 94.771 88.5 94.771 644.5 DL F1
(Figur)184.096 658 Q 2.5(e7)-.18 G(.)-2.5 E F0(Dw)5 E
(arf 2 Error Codes \(continued belo)-.1 E(w\))-.25 E(re)69.336 768 Q 2.5
(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(20 -)-2.5 E 0 Cg EP
%%Page: 121 121
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(21 -)-2.5 E .4 LW 492.486
88.5 78.186 88.5 DL/F1 10/Times-Bold@0 SF(SYMBOLIC N)83.186 98 Q 115.54
(AME DESCRIPTION)-.2 F 492.486 102.5 78.186 102.5 DL F0 -.3(DW)83.186
124 S(_DLE_LINE_EXT_OPCODE_B).3 E 39.07(AD Error)-.35 F(in D)2.5 E
(W_EXTENDED_OPCODE)-.3 E(instruction)291.026 136 Q -.3(DW)83.186 148 S
(_DLE_D).3 E -1.2(WA)-.3 G 63(RF_LINE_NULL Null)1.2 F(Dw)2.5 E
(arf_line ar)-.1 E(gument)-.18 E -.3(DW)83.186 160 S
(_DLE_INCL_DIR_NUM_B).3 E 57.4(AD Error)-.35 F
(in included directory for)2.5 E(gi)288.526 172 Q -.15(ve)-.25 G 2.5(nl)
.15 G(ine)-2.5 E -.3(DW)83.186 184 S(_DLE_LINE_FILE_NUM_B).3 E 54.07
(AD File)-.35 F(number in .deb)2.5 E(ug_line bad)-.2 E -.3(DW)83.186 196
S(_DLE_ALLOC_F).3 E 97.23(AIL F)-.74 F
(ailed to allocate required structs)-.15 E -.3(DW)83.186 208 S 104.27
(_DLE_DBG_NULL Null).3 F(Dw)2.5 E(arf_Deb)-.1 E(ug ar)-.2 E(gument)-.18
E -.3(DW)83.186 220 S(_DLE_DEB).3 E(UG_FRAME_LENGTH_B)-.1 E 12.5
(AD Error)-.35 F(in length of frame)2.5 E -.3(DW)83.186 232 S
(_DLE_FRAME_VERSION_B).3 E 48.5(AD Bad)-.35 F -.15(ve)2.5 G
(rsion stamp for frame).15 E -.3(DW)83.186 244 S
(_DLE_CIE_RET_ADDR_REG_ERR).3 E 20.77(OR Bad)-.4 F(re)2.5 E
(gister specif)-.15 E(ied for)-.2 E(return address)288.526 256 Q -.3(DW)
83.186 268 S 106.49(_DLE_FDE_NULL Null).3 F(Dw)2.5 E(arf_Fde ar)-.1 E
(gument)-.18 E -.3(DW)83.186 280 S 80.38(_DLE_FDE_DBG_NULL No).3 F(Dw)
2.5 E(arf_Deb)-.1 E(ug associated with FDE)-.2 E -.3(DW)83.186 292 S
109.27(_DLE_CIE_NULL Null).3 F(Dw)2.5 E(arf_Cie ar)-.1 E(gument)-.18 E
-.3(DW)83.186 304 S 83.16(_DLE_CIE_DBG_NULL No).3 F(Dw)2.5 E(arf_Deb)-.1
E(ug associated with CIE)-.2 E -.3(DW)83.186 316 S(_DLE_FRAME_T).3 E
(ABLE_COL_B)-.93 E 35.54(AD Bad)-.35 F(column in frame table)2.5 E
(specif)288.526 328 Q(ied)-.2 E -.3(DW)83.186 340 S(_DLE_PC_NO).3 E
40.78(T_IN_FDE_RANGE PC)-.4 F(requested not in address range of FDE)2.5
E -.3(DW)83.186 352 S(_DLE_CIE_INSTR_EXEC_ERR).3 E 37.99(OR Error)-.4 F
(in e)2.5 E -.15(xe)-.15 G(cuting instructions in CIE).15 E -.3(DW)
83.186 364 S(_DLE_FRAME_INSTR_EXEC_ERR).3 E 19.65(OR Error)-.4 F(in e)
2.5 E -.15(xe)-.15 G(cuting instructions in FDE).15 E -.3(DW)83.186 376
S 83.15(_DLE_FDE_PTR_NULL Null).3 F(Pointer to Dw)2.5 E(arf_Fde specif)
-.1 E(ied)-.2 E -.3(DW)83.186 388 S 62.6(_DLE_RET_OP_LIST_NULL No).3 F
(location to store pointer to Dw)2.5 E(arf_Frame_Op)-.1 E -.3(DW)83.186
400 S 50.95(_DLE_LINE_CONTEXT_NULL Dw).3 F(arf_Line has no conte)-.1 E
(xt)-.15 E -.3(DW)83.186 412 S 45.94(_DLE_DBG_NO_CU_CONTEXT dbg).3 F
(has no CU conte)2.5 E(xt for dw)-.15 E(arf_siblingof\(\))-.1 E -.3(DW)
83.186 424 S 50.39(_DLE_DIE_NO_CU_CONTEXT Dw).3 F
(arf_Die has no CU conte)-.1 E(xt)-.15 E -.3(DW)83.186 436 S
(_DLE_FIRST_DIE_NO).3 E 64.11(T_CU First)-.4 F(DIE in CU not D)2.5 E
(W_T)-.3 E -.4(AG)-.93 G(_compilation_unit).4 E -.3(DW)83.186 448 S
53.72(_DLE_NEXT_DIE_PTR_NULL Error).3 F(in mo)2.5 E(ving to ne)-.15 E
(xt DIE in .deb)-.15 E(ug_info)-.2 E -.3(DW)83.186 460 S(_DLE_DEB).3 E
(UG_FRAME_DUPLICA)-.1 E 23.81(TE Multiple)-1.11 F(.deb)2.5 E
(ug_frame sections)-.2 E -.3(DW)83.186 472 S(_DLE_DEB).3 E 51.59
(UG_FRAME_NULL No)-.1 F(data in .deb)2.5 E(ug_frame section)-.2 E -.3
(DW)83.186 484 S(_DLE_ABBREV_DECODE_ERR).3 E 32.99(OR Error)-.4 F
(in decoding abbre)2.5 E(viation)-.25 E -.3(DW)83.186 496 S(_DLE_D).3 E
-1.2(WA)-.3 G 45.21(RF_ABBREV_NULL Null)1.2 F(Dw)2.5 E(arf_Abbre)-.1 E
2.5(vs)-.25 G(pecif)-2.5 E(ied)-.2 E -.3(DW)83.186 508 S(_DLE_A).3 E
100.38(TTR_NULL Null)-1.11 F(Dw)2.5 E(arf_Attrib)-.1 E(ute specif)-.2 E
(ied)-.2 E -.3(DW)83.186 520 S(_DLE_DIE_B).3 E 114.62(AD DIE)-.35 F(bad)
2.5 E -.3(DW)83.186 532 S(_DLE_DIE_ABBREV_B).3 E 69.06(AD No)-.35 F
(abbre)2.5 E(viation found for code in DIE)-.25 E -.3(DW)83.186 544 S
(_DLE_A).3 E(TTR_FORM_B)-1.11 E 72.94(AD Inappropriate)-.35 F(attrib)2.5
E(ute form for attrib)-.2 E(ute)-.2 E -.3(DW)83.186 556 S(_DLE_A).3 E
42.05(TTR_NO_CU_CONTEXT No)-1.11 F(CU conte)2.5 E(xt for Dw)-.15 E
(arf_Attrib)-.1 E(ute struct)-.2 E -.3(DW)83.186 568 S(_DLE_A).3 E
(TTR_FORM_SIZE_B)-1.11 E 46.83(AD Size)-.35 F(of block in attrib)2.5 E
(ute v)-.2 E(alue bad)-.25 E -.3(DW)83.186 580 S(_DLE_A).3 E 74.27
(TTR_DBG_NULL No)-1.11 F(Dw)2.5 E(arf_Deb)-.1 E(ug for Dw)-.2 E
(arf_Attrib)-.1 E(ute struct)-.2 E -.3(DW)83.186 592 S(_DLE_B).3 E 79.6
(AD_REF_FORM Inappropriate)-.35 F(form for reference attrib)2.5 E(ute)
-.2 E -.3(DW)83.186 604 S(_DLE_A).3 E(TTR_FORM_OFFSET_B)-1.11 E 31.82
(AD Of)-.35 F(fset reference attrib)-.25 E(ute outside current CU)-.2 E
-.3(DW)83.186 616 S(_DLE_LINE_OFFSET_B).3 E 67.39(AD Of)-.35 F
(fset of lines for current CU outside .deb)-.25 E(ug_line)-.2 E -.3(DW)
83.186 628 S(_DLE_DEB).3 E(UG_STR_OFFSET_B)-.1 E 32.48(AD Of)-.35 F
(fset into .deb)-.25 E(ug_str past its end)-.2 E -.3(DW)83.186 640 S
65.93(_DLE_STRING_PTR_NULL Pointer).3 F(to pointer into .deb)2.5 E
(ug_str NULL)-.2 E -.3(DW)83.186 652 S(_DLE_PUBN).3 E(AMES_VERSION_ERR)
-.35 E 16.67(OR V)-.4 F(ersion stamp of pubnames incorrect)-1.11 E -.3
(DW)83.186 664 S(_DLE_PUBN).3 E(AMES_LENGTH_B)-.35 E 32.19(AD Read)-.35
F(pubnames past end of .deb)2.5 E(ug_pubnames)-.2 E -.3(DW)83.186 676 S
(_DLE_GLOB).3 E 85.18(AL_NULL Null)-.35 F(Dw)2.5 E(arf_Global specif)-.1
E(ied)-.2 E -.3(DW)83.186 688 S(_DLE_GLOB).3 E 33.52(AL_CONTEXT_NULL No)
-.35 F(conte)2.5 E(xt for Dw)-.15 E(arf_Global gi)-.1 E -.15(ve)-.25 G
(n).15 E -.3(DW)83.186 700 S(_DLE_DIR_INDEX_B).3 E 77.96(AD Error)-.35 F
(in directory inde)2.5 E 2.5(xr)-.15 G(ead)-2.5 E 492.486 704.5 78.186
704.5 DL 492.486 88.5 492.486 704.5 DL 78.186 88.5 78.186 704.5 DL F1
(Figur)184.096 718 Q 2.5(e8)-.18 G(.)-2.5 E F0(Dw)5 E
(arf 2 Error Codes \(continued belo)-.1 E(w\))-.25 E(re)69.336 768 Q 2.5
(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(21 -)-2.5 E 0 Cg EP
%%Page: 122 122
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(22 -)-2.5 E .4 LW 498.471
88.5 72.201 88.5 DL/F1 10/Times-Bold@0 SF(SYMBOLIC N)77.201 98 Q 157.93
(AME DESCRIPTION)-.2 F 498.471 102.5 72.201 102.5 DL F0 -.3(DW)77.201
112 S(_DLE_LOC_EXPR_B).3 E 123.11(AD Bad)-.35 F
(operator read for location e)2.5 E(xpression)-.15 E -.3(DW)77.201 124 S
(_DLE_DIE_LOC_EXPR_B).3 E 101.45(AD Expected)-.35 F(block v)2.5 E
(alue for attrib)-.25 E(ute)-.2 E(not found)324.931 136 Q -.3(DW)77.201
148 S(_DLE_OFFSET_B).3 E 137.55(AD Of)-.35 F(fset for ne)-.25 E
(xt compilation-unit in)-.15 E(.deb)324.931 160 Q(ug_info bad)-.2 E -.3
(DW)77.201 172 S(_DLE_MAKE_CU_CONTEXT_F).3 E 72.96(AIL Could)-.74 F
(not mak)2.5 E 2.5(eC)-.1 G 2.5(Uc)-2.5 G(onte)-2.5 E(xt)-.15 E -.3(DW)
77.201 184 S(_DLE_ARANGE_OFFSET_B).3 E 90.89(AD Of)-.35 F
(fset into .deb)-.25 E(ug_info in)-.2 E(.deb)324.931 196 Q
(ug_aranges bad)-.2 E -.3(DW)77.201 208 S(_DLE_SEGMENT_SIZE_B).3 E
100.34(AD Se)-.35 F(gment size will be 0 for MIPS)-.15 E
(processorsand should al)324.931 220 Q -.1(wa)-.1 G(ys be < 8.).1 E -.3
(DW)77.201 232 S(_DLE_ARANGE_LENGTH_B).3 E 87.02(AD Length)-.35 F
(of arange section in)2.5 E(.deb)324.931 244 Q(ug_arange bad)-.2 E -.3
(DW)77.201 256 S(_DLE_ARANGE_DECODE_ERR).3 E 74.28(OR Aranges)-.4 F
(do not end at end)2.5 E(of .deb)324.931 268 Q(ug_aranges)-.2 E -.3(DW)
77.201 280 S 120.55(_DLE_ARANGES_NULL NULL).3 F(pointer to Dw)2.5 E
(arf_Arange specif)-.1 E(ied)-.2 E -.3(DW)77.201 292 S 126.11
(_DLE_ARANGE_NULL NULL).3 F(Dw)2.5 E(arf_Arange specif)-.1 E(ied)-.2 E
-.3(DW)77.201 304 S(_DLE_NO_FILE_N).3 E 124.79(AME No)-.35 F -.2(fi)2.5
G(le name for Dw).2 E(arf_Line struct)-.1 E -.3(DW)77.201 316 S 129.43
(_DLE_NO_COMP_DIR No).3 F(Compilation directory for)2.5 E
(compilation-unit)324.931 328 Q -.3(DW)77.201 340 S
(_DLE_CU_ADDRESS_SIZE_B).3 E 83.11(AD CU)-.35 F(header address size not)
2.5 E(match Elf class)324.931 352 Q -.3(DW)77.201 364 S
(_DLE_ELF_GETIDENT_ERR).3 E 89.28(OR Error)-.4 F
(in elf_getident\(\) on object)2.5 E -.3(DW)77.201 376 S(_DLE_NO_A).3 E
115.54(T_MIPS_FDE DIE)-1.11 F(does not ha)2.5 E -.15(ve)-.2 G -.3(DW)
324.931 388 S(_A).3 E(T_MIPS_fde attrib)-1.11 E(ute)-.2 E -.3(DW)77.201
400 S 115.54(_DLE_NO_CIE_FOR_FDE No).3 F(CIE specif)2.5 E(ied for FDE)
-.2 E -.3(DW)77.201 412 S 79.44(_DLE_DIE_ABBREV_LIST_NULL No).3 F(abbre)
2.5 E(viation for the code)-.25 E(in DIE found)324.931 424 Q -.3(DW)
77.201 436 S(_DLE_DEB).3 E(UG_FUNCN)-.1 E(AMES_DUPLICA)-.35 E 39.33
(TE Multiple)-1.11 F(.deb)2.5 E(ug_funcnames sections)-.2 E -.3(DW)
77.201 448 S(_DLE_DEB).3 E(UG_FUNCN)-.1 E 67.11(AMES_NULL No)-.35 F
(data in .deb)2.5 E(ug_funcnames section)-.2 E -.3(DW)77.201 460 S
(_DLE_DEB).3 E(UG_FUNCN)-.1 E(AMES_VERSION_ERR)-.35 E 12.5(OR V)-.4 F
(ersion stamp in)-1.11 E(.deb)324.931 472 Q(ug_funcnames bad)-.2 E -.3
(DW)77.201 484 S(_DLE_DEB).3 E(UG_FUNCN)-.1 E(AMES_LENGTH_B)-.35 E 28.02
(AD Length)-.35 F(error in reading)2.5 E(.deb)324.931 496 Q
(ug_funcnames)-.2 E -.3(DW)77.201 508 S 141.1(_DLE_FUNC_NULL NULL).3 F
(Dw)2.5 E(arf_Func specif)-.1 E(ied)-.2 E -.3(DW)77.201 520 S 89.44
(_DLE_FUNC_CONTEXT_NULL No).3 F(conte)2.5 E(xt for Dw)-.15 E
(arf_Func struct)-.1 E -.3(DW)77.201 532 S(_DLE_DEB).3 E(UG_TYPEN)-.1 E
(AMES_DUPLICA)-.35 E 41(TE Multiple)-1.11 F(.deb)2.5 E
(ug_typenames sections)-.2 E -.3(DW)77.201 544 S(_DLE_DEB).3 E(UG_TYPEN)
-.1 E 68.78(AMES_NULL No)-.35 F(data in .deb)2.5 E(ug_typenames section)
-.2 E -.3(DW)77.201 556 S(_DLE_DEB).3 E(UG_TYPEN)-.1 E(AMES_VERSION_ERR)
-.35 E 14.17(OR V)-.4 F(ersion stamp in)-1.11 E(.deb)324.931 568 Q
(ug_typenames bad)-.2 E -.3(DW)77.201 580 S(_DLE_DEB).3 E(UG_TYPEN)-.1 E
(AMES_LENGTH_B)-.35 E 29.69(AD Length)-.35 F(error in reading)2.5 E
(.deb)324.931 592 Q(ug_typenames)-.2 E -.3(DW)77.201 604 S 142.77
(_DLE_TYPE_NULL NULL).3 F(Dw)2.5 E(arf_T)-.1 E(ype specif)-.8 E(ied)-.2
E -.3(DW)77.201 616 S 91.11(_DLE_TYPE_CONTEXT_NULL No).3 F(conte)2.5 E
(xt for Dw)-.15 E(arf_T)-.1 E(ype gi)-.8 E -.15(ve)-.25 G(n).15 E -.3
(DW)77.201 628 S(_DLE_DEB).3 E(UG_V)-.1 E(ARN)-1.35 E(AMES_DUPLICA)-.35
E 46.24(TE Multiple)-1.11 F(.deb)2.5 E(ug_v)-.2 E(arnames sections)-.25
E -.3(DW)77.201 640 S(_DLE_DEB).3 E(UG_V)-.1 E(ARN)-1.35 E 74.02
(AMES_NULL No)-.35 F(data in .deb)2.5 E(ug_v)-.2 E(arnames section)-.25
E -.3(DW)77.201 652 S(_DLE_DEB).3 E(UG_V)-.1 E(ARN)-1.35 E
(AMES_VERSION_ERR)-.35 E 19.41(OR V)-.4 F(ersion stamp in)-1.11 E(.deb)
324.931 664 Q(ug_v)-.2 E(arnames bad)-.25 E -.3(DW)77.201 676 S
(_DLE_DEB).3 E(UG_V)-.1 E(ARN)-1.35 E(AMES_LENGTH_B)-.35 E 34.93
(AD Length)-.35 F(error in reading)2.5 E(.deb)324.931 688 Q(ug_v)-.2 E
(arnames)-.25 E 498.471 692.5 72.201 692.5 DL 498.471 88.5 498.471 692.5
DL 72.201 88.5 72.201 692.5 DL F1(Figur)184.096 706 Q 2.5(e9)-.18 G(.)
-2.5 E F0(Dw)5 E(arf 2 Error Codes \(continued belo)-.1 E(w\))-.25 E(re)
69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(22 -)
-2.5 E 0 Cg EP
%%Page: 123 123
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(23 -)-2.5 E .4 LW 488.946
88.5 81.726 88.5 DL/F1 10/Times-Bold@0 SF(SYMBOLIC N)86.726 98 Q 161.25
(AME DESCRIPTION)-.2 F 488.946 102.5 81.726 102.5 DL F0 -.3(DW)86.726
112 S(_DLE_V).3 E 151.33(AR_NULL NULL)-1.35 F(Dw)2.5 E(arf_V)-.1 E
(ar specif)-1.11 E(ied)-.2 E -.3(DW)86.726 124 S(_DLE_V).3 E 99.67
(AR_CONTEXT_NULL No)-1.35 F(conte)2.5 E(xt for Dw)-.15 E(arf_V)-.1 E
(ar gi)-1.11 E -.15(ve)-.25 G(n).15 E -.3(DW)86.726 136 S(_DLE_DEB).3 E
(UG_WEAKN)-.1 E(AMES_DUPLICA)-.35 E 39.33(TE Multiple)-1.11 F(.deb)2.5 E
(ug_weaknames section)-.2 E -.3(DW)86.726 148 S(_DLE_DEB).3 E(UG_WEAKN)
-.1 E 67.11(AMES_NULL No)-.35 F(data in .deb)2.5 E(ug_v)-.2 E
(arnames section)-.25 E -.3(DW)86.726 160 S(_DLE_DEB).3 E(UG_WEAKN)-.1 E
(AMES_VERSION_ERR)-.35 E 12.5(OR V)-.4 F(ersion stamp in)-1.11 E(.deb)
337.776 172 Q(ug_v)-.2 E(arnames bad)-.25 E -.3(DW)86.726 184 S
(_DLE_DEB).3 E(UG_WEAKN)-.1 E(AMES_LENGTH_B)-.35 E 28.02(AD Length)-.35
F(error in reading)2.5 E(.deb)337.776 196 Q(ug_weaknames)-.2 E -.3(DW)
86.726 208 S 141.1(_DLE_WEAK_NULL NULL).3 F(Dw)2.5 E(arf_W)-.1 E
(eak specif)-.8 E(ied)-.2 E -.3(DW)86.726 220 S 89.44
(_DLE_WEAK_CONTEXT_NULL No).3 F(conte)2.5 E(xt for Dw)-.15 E(arf_W)-.1 E
(eak gi)-.8 E -.15(ve)-.25 G(n).15 E 488.946 224.5 81.726 224.5 DL
488.946 88.5 488.946 224.5 DL 81.726 88.5 81.726 224.5 DL F1(Figur)
219.241 238 Q 2.5(e1)-.18 G(0.)-2.5 E F0(Dw)5 E(arf 2 Error Codes)-.1 E
1.109(This list of errors is not complete; additional errors ha)69.336
268 R 1.408 -.15(ve b)-.2 H 1.108(een added.).15 F 1.108
(Some of the abo)6.108 F 1.408 -.15(ve e)-.15 H 1.108(rrors may be).15 F
3.12(unused. Errors)69.336 280 R .62(may not ha)3.12 F .92 -.15(ve t)-.2
H .621(he same meaning in dif).15 F .621(ferent releases.)-.25 F .621
(Since most error codes are returned)5.621 F .632(from only one)69.336
292 R .632(place \(or a v)5.632 F .632
(ery small number of places\) in the source it is normally v)-.15 F .632
(ery useful to simply)-.15 F(search the)69.336 304 Q/F2 10/Courier@0 SF
(libdwarf)2.5 E F0(source to f)2.5 E
(ind out where a particular error code is generated.)-.2 E/F3 11
/Times-Bold@0 SF 2.75(6.31.6 d)69.336 337 R(warf_dealloc\(\))-.165 E F2
(void dwarf_dealloc\()69.336 355 Q(Dwarf_Debug dbg,)117.336 367 Q
(void* space,)117.336 379 Q(Dwarf_Unsigned type\))117.336 391 Q F0
(The function)69.336 409 Q F2(dwarf_dealloc)2.5 E F0
(frees the dynamic storage pointed to by)2.5 E F2(space)2.501 E F0 2.501
(,a)C .001(nd allocated to the gi)-2.501 F -.15(ve)-.25 G(n).15 E F2
(Dwarf_Debug)69.336 421 Q F0 6.276(.T)C 1.276(he ar)-6.276 F(gument)-.18
E F2(type)3.776 E F0 1.276(is an inte)3.776 F 1.275
(ger code that specif)-.15 F 1.275(ies the allocation type of the re)-.2
F(gion)-.15 E(pointed to by the)69.336 433 Q F2(space)2.5 E F0 5(.R)C
(efer to section 4 for details on)-5 E/F4 10/Times-Italic@0 SF(libdwarf)
2.5 E F0(memory management.)2.5 E F3 2.75(6.31.7 d)69.336 466 R
(warf_encode_leb128\(\))-.165 E F0(int dw)69.336 484 Q
(arf_encode_leb128\(Dw)-.1 E(arf_Unsigned v)-.1 E(al,)-.25 E
(int * nbytes,)79.336 496 Q(char * space,)79.336 508 Q 5(int splen\);)
79.336 520 R .463(The function)69.336 538 R F2(dwarf_encode_leb128)2.963
E F0 .463(encodes the v)2.963 F(alue)-.25 E F2(val)2.963 E F0 .463
(in the caller)2.963 F(-pro)-.2 E .464(vided b)-.15 F(uf)-.2 E .464
(fer that)-.25 F F2(space)2.964 E F0(points to.)69.336 550 Q(The caller)
5 E(-pro)-.2 E(vided b)-.15 E(uf)-.2 E(fer must be at least)-.25 E F2
(splen)2.5 E F0(bytes long.)2.5 E .832(The function returns)69.336 574 R
F2(DW_DLV_OK)3.332 E F0 .832(if the encoding succeeds.)3.332 F(If)5.832
E F2(splen)5.832 E F0 .832(is too small to encode the v)3.332 F(alue,)
-.25 E F2(DW_DLV_ERROR)69.336 586 Q F0(will be returned.)2.5 E .607
(If the call succeeds, the number of bytes of)69.336 610 R F2(space)
3.107 E F0 .608(that are used in the encoding are returned through the)
3.107 F(pointer)69.336 622 Q F2(nbytes)2.5 E F3 2.75(6.31.8 d)69.336 667
R(warf_encode_signed_leb128\(\))-.165 E F0(int dw)69.336 685 Q
(arf_encode_signed_leb128\(Dw)-.1 E(arf_Signed v)-.1 E(al,)-.25 E
(int * nbytes,)79.336 697 Q(char * space,)79.336 709 Q(int splen\);)
79.336 721 Q(re)69.336 768 Q 2.5(v2)-.25 G(.31, Oct 5, 2015)-2.5 E 2.5
(-1)118.21 G(23 -)-2.5 E 0 Cg EP
%%Page: 124 124
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(24 -)-2.5 E .212
(The function)69.336 96 R/F1 10/Courier@0 SF(dwarf_encode_signed_leb128)
2.711 E F0 .211(is the same as)2.711 F F1(dwarf_encode_leb128)2.711 E F0
-.15(ex)2.711 G .211(cept that).15 F(the ar)69.336 108 Q(gument)-.18 E
F1(val)5 E F0(is signed.)2.5 E(re)69.336 768 Q 2.5(v2)-.25 G
(.31, Oct 5, 2015)-2.5 E 2.5(-1)118.21 G(24 -)-2.5 E 0 Cg EP
%%Page: 125 125
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 2.5(-1)272.006 48 S(25 -)-2.5 E/F1 11
/Times-Roman@0 SF(re)69.336 771 Q 2.75(v2)-.275 G(.31, Oct 5, 2015)-2.75
E 2.75(-1)108.431 G(25 -)-2.75 E 0 Cg EP
%%Page: 126 126
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(CONTENTS)256.615 104 Q(1.)69.336 156 Q(INTR)
81.836 156 Q(ODUCTION)-.44 E 8.25(.....................................\
.......................................................................\
.... 1)176.836 156 R(1.1)81.836 169 Q(Cop)104.336 169 Q(yright)-.11 E
8.25(..................................................................\
.................................................... 1)160.336 169 R
(1.2)81.836 182 Q(Purpose and Scope)104.336 182 Q 8.25(................\
.......................................................................\
................ 1)201.586 182 R(1.3)81.836 195 Q(Document History)
104.336 195 Q 8.25(....................................................\
.................................................... 1)198.836 195 R
(1.4)81.836 208 Q(Def)104.336 208 Q(initions)-.22 E 8.25(..............\
.......................................................................\
............................... 2)165.836 208 R(1.5)81.836 221 Q(Ov)
104.336 221 Q(ervie)-.165 E(w)-.275 E 8.25(............................\
.......................................................................\
................... 2)160.336 221 R(1.6)81.836 234 Q(Items Changed)
104.336 234 Q 8.25(....................................................\
.......................................................... 3)182.336 234
R(1.7)81.836 247 Q(Items Remo)104.336 247 Q -.165(ve)-.165 G(d).165 E
8.25(..................................................................\
........................................... 4)185.086 247 R(1.8)81.836
260 Q(Re)104.336 260 Q(vision History)-.275 E 8.25(....................\
.......................................................................\
................ 4)190.586 260 R(2.)69.336 279 Q -.88(Ty)81.836 279 S
(pes Def).88 E(initions)-.22 E 8.25(...................................\
.......................................................................\
........ 4)171.336 279 R(2.1)81.836 292 Q(General Description)104.336
292 Q 8.25(............................................................\
.......................................... 5)204.336 292 R(2.2)81.836
305 Q(Scalar T)104.336 305 Q(ypes)-.88 E 8.25(.........................\
.......................................................................\
................. 5)174.086 305 R(2.3)81.836 318 Q(Aggre)104.336 318 Q
-.055(ga)-.165 G(te T).055 E(ypes)-.88 E 8.25(.........................\
.......................................................................\
........... 6)190.586 318 R(2.3.1)104.336 331 Q(Location Record)139.336
331 Q 8.25(............................................................\
.................................. 6)226.336 331 R(2.3.2)104.336 344 Q
(Location Description)139.336 344 Q 8.25(..............................\
......................................................... 6)245.586 344
R(2.3.3)104.336 357 Q(Data Block)139.336 357 Q 8.25(...................\
.......................................................................\
............. 7)201.586 357 R(2.3.4)104.336 370 Q
(Frame Operation Codes: D)139.336 370 Q -1.32(WA)-.33 G(RF 2)1.32 E 8.25
(................................................................ 7)
308.836 370 R(2.3.5)104.336 383 Q(Frame Re)139.336 383 Q(gtable: D)-.165
E -1.32(WA)-.33 G(RF 2)1.32 E 8.25(....................................\
......................................... 8)273.086 383 R(2.3.6)104.336
396 Q(Frame Operation Codes: D)139.336 396 Q -1.32(WA)-.33 G
(RF 3 \(and D)1.32 E -1.32(WA)-.33 G(RF2\))1.32 E 8.25
(...................................... 9)380.336 396 R(2.3.7)104.336
409 Q(Frame Re)139.336 409 Q(gtable: D)-.165 E -1.32(WA)-.33 G(RF 3)1.32
E 8.25(................................................................\
............. 9)273.086 409 R(2.3.8)104.336 422 Q(Macro Details Record)
139.336 422 Q 8.25(....................................................\
................................ 11)248.336 422 R(2.4)81.836 435 Q
(Opaque T)104.336 435 Q(ypes)-.88 E 8.25(..............................\
.......................................................................\
........ 11)179.586 435 R(3.)69.336 454 Q(UTF-8 strings)81.836 454 Q
8.25(..................................................................\
................................................... 14)157.586 454 R(4.)
69.336 473 Q(Error Handling)81.836 473 Q 8.25(.........................\
.......................................................................\
.................... 14)160.336 473 R(4.1)81.836 486 Q(Returned v)
104.336 486 Q(alues in the functional interf)-.275 E(ace)-.11 E 8.25
(................................................................ 15)
303.336 486 R(5.)69.336 505 Q(Memory Management)81.836 505 Q 8.25(.....\
.......................................................................\
............................ 16)193.336 505 R(5.1)81.836 518 Q
(Read-only Properties)104.336 518 Q 8.25(..............................\
.................................................................... 16)
209.836 518 R(5.2)81.836 531 Q(Storage Deallocation)104.336 531 Q 8.25(\
.......................................................................\
........................... 16)209.836 531 R(6.)69.336 550 Q
(Functional Interf)81.836 550 Q(ace)-.11 E 8.25(.......................\
.......................................................................\
.............. 18)182.336 550 R(6.1)81.836 563 Q
(Initialization Operations)104.336 563 Q 8.25(.........................\
.................................................................... 18)
223.586 563 R(6.1.1)104.336 576 Q(dw)139.336 576 Q(arf_init\(\))-.11 E
8.25(..................................................................\
.................................. 18)204.336 576 R(6.1.2)104.336 589 Q
(dw)139.336 589 Q(arf_elf_init\(\))-.11 E 8.25(........................\
...................................................................... \
19)220.836 589 R(6.1.3)104.336 602 Q(dw)139.336 602 Q(arf_get_elf\(\))
-.11 E 8.25(...........................................................\
................................... 19)220.836 602 R(6.1.4)104.336 615 Q
(dw)139.336 615 Q(arf_set_tied_dbg\(\))-.11 E 8.25(....................\
................................................................. 20)
245.586 615 R(6.1.5)104.336 628 Q(dw)139.336 628 Q(arf_f)-.11 E
(inish\(\))-.22 E 8.25(................................................\
................................................ 21)215.336 628 R(6.1.6)
104.336 641 Q(dw)139.336 641 Q(arf_set_stringcheck\(\))-.11 E 8.25(....\
.......................................................................\
..... 21)259.336 641 R(6.1.7)104.336 654 Q(dw)139.336 654 Q
(arf_set_reloc_application\(\))-.11 E 8.25(............................\
........................................... 21)284.086 654 R(6.1.8)
104.336 667 Q(dw)139.336 667 Q(arf_record_cmdline_options\(\))-.11 E
8.25
(.................................................................. 21)
297.836 667 R(6.2)81.836 680 Q(Section size operations)104.336 680 Q
8.25(..................................................................\
............................. 22)218.086 680 R(6.2.1)104.336 693 Q(dw)
139.336 693 Q(arf_get_section_max_of)-.11 E(fsets_b\(\))-.275 E 8.25
(.............................................................. 22)
308.836 693 R(6.2.2)104.336 706 Q(dw)139.336 706 Q
(arf_get_section_max_of)-.11 E(fsets\(\))-.275 E 8.25
(.................................................................. 22)
297.836 706 R(6.3)81.836 719 Q(Printf Callbacks)104.336 719 Q 8.25(....\
.......................................................................\
............................... 22)187.836 719 R(i)283.807 771 Q 0 Cg EP
%%Page: 127 127
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(6.3.1)104.336 104 Q(dw)139.336 104 Q(arf_re)-.11
E(gister_printf_callback)-.165 E 8.25(.................................\
..................................... 23)286.836 104 R(6.3.2)104.336 117
Q(Dw)139.336 117 Q(arf_Printf_Callback_Info_s)-.11 E 8.25(.............\
........................................................ 23)289.586 117
R(6.3.3)104.336 130 Q(dw)139.336 130 Q
(arf_printf_callback_function_type)-.11 E 8.25
(........................................................... 24)317.086
130 R(6.3.4)104.336 143 Q
(Example of printf callback use in a C++ application using libdw)139.336
143 Q(arf)-.11 E 8.25(............ 24)446.336 143 R(6.4)81.836 156 Q
(Deb)104.336 156 Q(ugging Information Entry Deli)-.22 E -.165(ve)-.275 G
(ry Operations).165 E 8.25
(................................................... 24)339.086 156 R
(6.4.1)104.336 169 Q(dw)139.336 169 Q(arf_get_die_section_name\(\))-.11
E 8.25(................................................................\
..... 24)289.586 169 R(6.4.2)104.336 182 Q(dw)139.336 182 Q(arf_ne)-.11
E(xt_cu_header_d\(\))-.165 E 8.25(.....................................\
....................................... 25)270.336 182 R(6.4.3)104.336
195 Q(dw)139.336 195 Q(arf_ne)-.11 E(xt_cu_header_c\(\))-.165 E 8.25(..\
.......................................................................\
... 26)270.336 195 R(6.4.4)104.336 208 Q(dw)139.336 208 Q(arf_ne)-.11 E
(xt_cu_header_b\(\))-.165 E 8.25(......................................\
...................................... 26)270.336 208 R(6.4.5)104.336
221 Q(dw)139.336 221 Q(arf_ne)-.11 E(xt_cu_header\(\))-.165 E 8.25(....\
.......................................................................\
..... 27)259.336 221 R(6.4.6)104.336 234 Q(dw)139.336 234 Q
(arf_siblingof_b\(\))-.11 E 8.25(......................................\
................................................. 27)240.086 234 R
(6.4.7)104.336 247 Q(dw)139.336 247 Q(arf_siblingof\(\))-.11 E 8.25(...\
.......................................................................\
................. 28)229.086 247 R(6.4.8)104.336 260 Q(dw)139.336 260 Q
(arf_child\(\))-.11 E 8.25(............................................\
..................................................... 28)212.586 260 R
(6.4.9)104.336 273 Q(dw)139.336 273 Q(arf_of)-.11 E(fdie_b\(\))-.275 E
8.25(..................................................................\
.......................... 29)226.336 273 R(6.4.10)104.336 286 Q(dw)
139.336 286 Q(arf_of)-.11 E(fdie\(\))-.275 E 8.25(.....................\
.......................................................................\
.... 30)215.336 286 R(6.4.11)104.336 299 Q(dw)139.336 299 Q(arf_v)-.11 E
(alidate_die_sibling\(\))-.275 E 8.25(.................................\
........................................ 30)278.586 299 R(6.5)81.836 312
Q(Deb)104.336 312 Q(ugging Information Entry Query Operations)-.22 E
8.25(....................................................... 30)328.086
312 R(6.5.1)104.336 325 Q(dw)139.336 325 Q
(arf_get_die_infotypes_flag\(\))-.11 E 8.25(...........................\
......................................... 31)292.336 325 R(6.5.2)104.336
338 Q(dw)139.336 338 Q(arf_tag\(\))-.11 E 8.25(........................\
.......................................................................\
..... 31)204.336 338 R(6.5.3)104.336 351 Q(dw)139.336 351 Q(arf_dieof)
-.11 E(fset\(\))-.275 E 8.25(..........................................\
................................................. 31)229.086 351 R
(6.5.4)104.336 364 Q(dw)139.336 364 Q(arf_die_CU_of)-.11 E(fset\(\))
-.275 E 8.25(..........................................................\
........................ 31)253.836 364 R(6.5.5)104.336 377 Q(dw)139.336
377 Q(arf_die_of)-.11 E(fsets\(\))-.275 E 8.25(........................\
................................................................ 32)
237.336 377 R(6.5.6)104.336 390 Q(dw)139.336 390 Q(arf_ptr_CU_of)-.11 E
(fset\(\))-.275 E 8.25(................................................\
.................................. 32)253.836 390 R(6.5.7)104.336 403 Q
(dw)139.336 403 Q(arf_CU_dieof)-.11 E(fset_gi)-.275 E -.165(ve)-.275 G
(n_die\(\)).165 E 8.25
(.................................................................. 32)
297.836 403 R(6.5.8)104.336 416 Q(dw)139.336 416 Q(arf_die_CU_of)-.11 E
(fset_range\(\))-.275 E 8.25(..........................................\
............................. 33)284.086 416 R(6.5.9)104.336 429 Q(dw)
139.336 429 Q(arf_diename\(\))-.11 E 8.25(.............................\
............................................................... 33)
226.336 429 R(6.5.10)104.336 442 Q(dw)139.336 442 Q(arf_die_abbre)-.11 E
(v_code\(\))-.275 E 8.25(..............................................\
................................ 34)264.836 442 R(6.5.11)104.336 455 Q
(dw)139.336 455 Q(arf_die_abbre)-.11 E(v_children_flag\(\))-.275 E 8.25
(................................................................ 34)
303.336 455 R(6.5.12)104.336 468 Q(dw)139.336 468 Q(arf_get_v)-.11 E
(ersion_of_die\(\))-.165 E 8.25(.......................................\
................................... 34)275.836 468 R(6.5.13)104.336 481
Q(dw)139.336 481 Q(arf_attrlist\(\))-.11 E 8.25(.......................\
.......................................................................\
. 34)218.086 481 R(6.5.14)104.336 494 Q(dw)139.336 494 Q
(arf_hasattr\(\))-.11 E 8.25(..........................................\
..................................................... 35)218.086 494 R
(6.5.15)104.336 507 Q(dw)139.336 507 Q(arf_attr\(\))-.11 E 8.25(.......\
.......................................................................\
...................... 35)204.336 507 R(6.5.16)104.336 520 Q(dw)139.336
520 Q(arf_lo)-.11 E(wpc\(\))-.275 E 8.25(..............................\
.................................................................. 35)
215.336 520 R(6.5.17)104.336 533 Q(dw)139.336 533 Q(arf_highpc_b\(\))
-.11 E 8.25(...........................................................\
............................... 36)231.836 533 R(6.5.18)104.336 546 Q
(dw)139.336 546 Q(arf_highpc\(\))-.11 E 8.25(..........................\
.................................................................... 36)
220.836 546 R(6.5.19)104.336 559 Q(dw)139.336 559 Q(arf_bytesize\(\))
-.11 E 8.25(...........................................................\
................................. 36)226.336 559 R(6.5.20)104.336 572 Q
(dw)139.336 572 Q(arf_bitsize\(\))-.11 E 8.25(.........................\
...................................................................... \
37)218.086 572 R(6.5.21)104.336 585 Q(dw)139.336 585 Q(arf_bitof)-.11 E
(fset\(\))-.275 E 8.25(................................................\
............................................ 37)226.336 585 R(6.5.22)
104.336 598 Q(dw)139.336 598 Q(arf_srclang\(\))-.11 E 8.25(............\
.......................................................................\
........... 37)220.836 598 R(6.5.23)104.336 611 Q(dw)139.336 611 Q
(arf_arrayorder\(\))-.11 E 8.25(.......................................\
.................................................. 37)234.586 611 R(6.6)
81.836 624 Q(Attrib)104.336 624 Q(ute Queries)-.22 E 8.25(.............\
.......................................................................\
.................... 37)193.336 624 R(6.6.1)104.336 637 Q(dw)139.336 637
Q(arf_hasform\(\))-.11 E 8.25(.........................................\
................................................... 38)226.336 637 R
(6.6.2)104.336 650 Q(dw)139.336 650 Q(arf_whatform\(\))-.11 E 8.25(....\
.......................................................................\
............... 38)231.836 650 R(6.6.3)104.336 663 Q(dw)139.336 663 Q
(arf_whatform_direct\(\))-.11 E 8.25(..................................\
............................................. 38)262.086 663 R(6.6.4)
104.336 676 Q(dw)139.336 676 Q(arf_whatattr\(\))-.11 E 8.25(...........\
.......................................................................\
.......... 38)226.336 676 R(6.6.5)104.336 689 Q(dw)139.336 689 Q
(arf_formref\(\))-.11 E 8.25(..........................................\
................................................... 39)223.586 689 R
(6.6.6)104.336 702 Q(dw)139.336 702 Q(arf_global_formref\(\))-.11 E 8.25
(......................................................................\
........... 39)256.586 702 R(6.6.7)104.336 715 Q(dw)139.336 715 Q
(arf_con)-.11 E -.165(ve)-.44 G(rt_to_global_of).165 E(fset\(\))-.275 E
8.25
(................................................................. 39)
300.586 715 R(ii)282.278 771 Q 0 Cg EP
%%Page: 128 128
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(6.6.8)104.336 104 Q(dw)139.336 104 Q
(arf_formaddr\(\))-.11 E 8.25(.........................................\
................................................. 40)231.836 104 R
(6.6.9)104.336 117 Q(dw)139.336 117 Q(arf_get_deb)-.11 E(ug_str_inde)
-.22 E(x\(\))-.165 E 8.25(.............................................\
........................... 40)281.336 117 R(6.6.10)104.336 130 Q(dw)
139.336 130 Q(arf_formflag\(\))-.11 E 8.25(............................\
............................................................... 41)
229.086 130 R(6.6.11)104.336 143 Q(dw)139.336 143 Q(arf_formudata\(\))
-.11 E 8.25(...........................................................\
.............................. 41)234.586 143 R(6.6.12)104.336 156 Q(dw)
139.336 156 Q(arf_formsdata\(\))-.11 E 8.25(...........................\
.............................................................. 41)
234.586 156 R(6.6.13)104.336 169 Q(dw)139.336 169 Q(arf_formblock\(\))
-.11 E 8.25(...........................................................\
.............................. 42)234.586 169 R(6.6.14)104.336 182 Q(dw)
139.336 182 Q(arf_formstring\(\))-.11 E 8.25(..........................\
.............................................................. 42)
237.336 182 R(6.6.15)104.336 195 Q(dw)139.336 195 Q(arf_formsig8\(\))
-.11 E 8.25(...........................................................\
................................ 42)229.086 195 R(6.6.16)104.336 208 Q
(dw)139.336 208 Q(arf_formsig8\(\))-.11 E 8.25(........................\
................................................................... 42)
229.086 208 R(6.6.17)104.336 221 Q(dw)139.336 221 Q
(arf_get_form_class\(\))-.11 E 8.25(...................................\
.............................................. 43)256.586 221 R(6.6.18)
104.336 234 Q(dw)139.336 234 Q(arf_loclist_n\(\))-.11 E 8.25(..........\
.......................................................................\
.......... 43)229.086 234 R(6.6.19)104.336 247 Q(dw)139.336 247 Q
(arf_loclist\(\))-.11 E 8.25(..........................................\
..................................................... 44)218.086 247 R
(6.6.20)104.336 260 Q(dw)139.336 260 Q(arf_loclist_from_e)-.11 E
(xpr\(\))-.165 E 8.25(.................................................\
............................ 45)267.586 260 R(6.6.21)104.336 273 Q(dw)
139.336 273 Q(arf_loclist_from_e)-.11 E(xpr_b\(\))-.165 E 8.25(........\
................................................................. 46)
278.586 273 R(6.6.22)104.336 286 Q(dw)139.336 286 Q(arf_loclist_from_e)
-.11 E(xpr_a\(\))-.165 E 8.25(.........................................\
................................ 46)278.586 286 R(6.7)81.836 299 Q
(Line Number Operations)104.336 299 Q 8.25(............................\
................................................................ 47)
226.336 299 R(6.7.1)104.336 312 Q(Get A Set of Lines \(including sk)
139.336 312 Q(eleton line tables\))-.11 E 8.25
(....................................... 47)372.086 312 R(6.7.2)104.336
325 Q(dw)139.336 325 Q(arf_srclines_b\(\))-.11 E 8.25(.................\
.......................................................................\
. 47)234.586 325 R(6.7.3)104.336 338 Q(dw)139.336 338 Q
(arf_srclines_from_lineconte)-.11 E(xt\(\))-.165 E 8.25
(............................................................... 48)
306.086 338 R(6.7.4)104.336 351 Q(dw)139.336 351 Q(arf_srclines_tw)-.11
E(o_le)-.11 E -.165(ve)-.275 G(lfrom_lineconte).165 E(xt\(\))-.165 E
8.25(................................................ 48)347.336 351 R
(6.7.5)104.336 364 Q(dw)139.336 364 Q(arf_srclines_dealloc_b\(\))-.11 E
8.25(..................................................................\
......... 49)273.086 364 R(6.8)81.836 377 Q(Line Conte)104.336 377 Q
(xt Details \(D)-.165 E -1.32(WA)-.33 G(RF5 style\))1.32 E 8.25(.......\
................................................................ 52)
284.086 377 R(6.8.1)104.336 390 Q(dw)139.336 390 Q
(arf_srclines_table_of)-.11 E(fset\(\))-.275 E 8.25(...................\
..................................................... 52)281.336 390 R
(6.8.2)104.336 403 Q(dw)139.336 403 Q(arf_srclines_v)-.11 E(ersion\(\))
-.165 E 8.25(..........................................................\
..................... 52)262.086 403 R(6.8.3)104.336 416 Q(dw)139.336
416 Q(arf_srclines_comp_dir\(\))-.11 E 8.25(...........................\
................................................. 52)270.336 416 R
(6.8.4)104.336 429 Q(dw)139.336 429 Q(arf_srclines_f)-.11 E
(iles_count\(\))-.22 E 8.25(...........................................\
.............................. 52)278.586 429 R(6.8.5)104.336 442 Q(dw)
139.336 442 Q(arf_srclines_f)-.11 E(iles_data\(\))-.22 E 8.25(.........\
.................................................................. 53)
273.086 442 R(6.8.6)104.336 455 Q(dw)139.336 455 Q
(arf_srclines_include_dir_count\(\))-.11 E 8.25
(.............................................................. 53)
308.836 455 R(6.8.7)104.336 468 Q(dw)139.336 468 Q
(arf_srclines_include_dir_data\(\))-.11 E 8.25
(................................................................ 53)
303.336 468 R(6.8.8)104.336 481 Q(dw)139.336 481 Q
(arf_srclines_subprog_count\(\))-.11 E 8.25
(................................................................... 53)
295.086 481 R(6.8.9)104.336 494 Q(dw)139.336 494 Q
(arf_srclines_subprog_data\(\))-.11 E 8.25(............................\
......................................... 53)289.586 494 R(6.9)81.836
507 Q(Get A Set of Lines \(D)104.336 507 Q -1.32(WA)-.33 G
(RF2,3,4 style\))1.32 E 8.25(..........................................\
.......................... 54)292.336 507 R(6.9.1)104.336 520 Q(dw)
139.336 520 Q(arf_srclines\(\))-.11 E 8.25(............................\
................................................................. 54)
223.586 520 R(6.10)81.836 533 Q(Get the set of Source File Names)104.336
533 Q 8.25(............................................................\
................... 54)262.086 533 R(6.10.1)104.336 546 Q(dw)139.336 546
Q(arf_srcf)-.11 E(iles\(\))-.22 E 8.25(................................\
.............................................................. 55)
220.836 546 R(6.11)81.836 559 Q(Get Information About a Single Line T)
104.336 559 Q(able Line)-.88 E 8.25
(....................................................... 55)328.086 559
R(6.11.1)104.336 572 Q(dw)139.336 572 Q(arf_linebe)-.11 E
(ginstatement\(\))-.165 E 8.25(........................................\
................................... 55)273.086 572 R(6.11.2)104.336 585
Q(dw)139.336 585 Q(arf_lineendsequence\(\))-.11 E 8.25(................\
............................................................... 56)
262.086 585 R(6.11.3)104.336 598 Q(dw)139.336 598 Q(arf_lineno\(\))-.11
E 8.25(................................................................\
............................... 56)218.086 598 R(6.11.4)104.336 611 Q
(dw)139.336 611 Q(arf_line_srcf)-.11 E(ileno\(\))-.22 E 8.25(..........\
.......................................................................\
.. 56)251.086 611 R(6.11.5)104.336 624 Q(dw)139.336 624 Q
(arf_lineaddr\(\))-.11 E 8.25(.........................................\
................................................... 56)226.336 624 R
(6.11.6)104.336 637 Q(dw)139.336 637 Q(arf_lineof)-.11 E(f\(\))-.275 E
8.25(..................................................................\
............................. 57)218.086 637 R(6.11.7)104.336 650 Q(dw)
139.336 650 Q(arf_linesrc\(\))-.11 E 8.25(.............................\
.................................................................. 57)
218.086 650 R(6.11.8)104.336 663 Q(dw)139.336 663 Q(arf_lineblock\(\))
-.11 E 8.25(...........................................................\
............................... 57)231.836 663 R(6.11.9)104.336 676 Q
(dw)139.336 676 Q(arf_is_addr_set\(\))-.11 E 8.25(.....................\
.................................................................. 57)
240.086 676 R(6.11.10)104.336 689 Q(dw)139.336 689 Q
(arf_prologue_end_etc\(\))-.11 E 8.25(.................................\
............................................ 58)267.586 689 R(6.12)
81.836 702 Q(Global Name Space Operations)104.336 702 Q 8.25(..........\
.......................................................................\
 58)256.586 702 R(6.12.1)104.336 715 Q(Deb)139.336 715 Q(ugger Interf)
-.22 E(ace Operations)-.11 E 8.25(.....................................\
................................. 58)286.836 715 R(iii)280.749 771 Q 0
Cg EP
%%Page: 129 129
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(6.12.1.1)139.336 104 Q(dw)181.836 104 Q
(arf_get_globals\(\))-.11 E 8.25(......................................\
................................. 58)284.086 104 R(6.12.1.2)139.336 117
Q(dw)181.836 117 Q(arf_globname\(\))-.11 E 8.25(.......................\
................................................... 59)275.836 117 R
(6.12.1.3)139.336 130 Q(dw)181.836 130 Q(arf_global_die_of)-.11 E
(fset\(\))-.275 E 8.25
(.............................................................. 60)
308.836 130 R(6.12.1.4)139.336 143 Q(dw)181.836 143 Q(arf_global_cu_of)
-.11 E(fset\(\))-.275 E 8.25
(............................................................... 60)
306.086 143 R(6.12.1.5)139.336 156 Q(dw)181.836 156 Q(arf_get_cu_die_of)
-.11 E(fset_gi)-.275 E -.165(ve)-.275 G(n_cu_header_of).165 E(fset\(\))
-.275 E 8.25(..................... 60)421.586 156 R(6.12.1.6)139.336 169
Q(dw)181.836 169 Q(arf_get_cu_die_of)-.11 E(fset_gi)-.275 E -.165(ve)
-.275 G(n_cu_header_of).165 E(fset\(\))-.275 E 8.25
(..................... 60)421.586 169 R(6.12.1.7)139.336 182 Q(dw)
181.836 182 Q(arf_global_name_of)-.11 E(fsets\(\))-.275 E 8.25
(......................................................... 61)322.586
182 R(6.13)81.836 195 Q -.33(DW)104.336 195 S(ARF3 T)-.99 E
(ype Names Operations)-.88 E 8.25(.....................................\
....................................... 61)270.336 195 R(6.13.1)104.336
208 Q(Deb)139.336 208 Q(ugger Interf)-.22 E(ace Operations)-.11 E 8.25(\
...................................................................... \
61)286.836 208 R(6.13.1.1)139.336 221 Q(dw)181.836 221 Q
(arf_get_pubtypes\(\))-.11 E 8.25(.....................................\
............................... 61)292.336 221 R(6.13.1.2)139.336 234 Q
(dw)181.836 234 Q(arf_pubtypename\(\))-.11 E 8.25(.....................\
............................................... 62)292.336 234 R
(6.13.1.3)139.336 247 Q(dw)181.836 247 Q(arf_pubtype_die_of)-.11 E
(fset\(\))-.275 E 8.25
(........................................................... 62)317.086
247 R(6.13.1.4)139.336 260 Q(dw)181.836 260 Q(arf_pubtype_cu_of)-.11 E
(fset\(\))-.275 E 8.25
(............................................................ 62)314.336
260 R(6.13.1.5)139.336 273 Q(dw)181.836 273 Q(arf_pubtype_name_of)-.11 E
(fsets\(\))-.275 E 8.25
(...................................................... 63)330.836 273 R
(6.14)81.836 286 Q(User Def)104.336 286 Q(ined Static V)-.22 E
(ariable Names Operations)-1.221 E 8.25
(....................................................... 63)328.086 286
R(6.15)81.836 299 Q -.88(We)104.336 299 S(ak Name Space Operations).88 E
8.25(..................................................................\
................. 63)251.086 299 R(6.15.1)104.336 312 Q(Deb)139.336 312
Q(ugger Interf)-.22 E(ace Operations)-.11 E 8.25(......................\
................................................ 63)286.836 312 R
(6.15.1.1)139.336 325 Q(dw)181.836 325 Q(arf_get_weaks\(\))-.11 E 8.25(\
.......................................................................\
.. 63)278.586 325 R(6.15.1.2)139.336 338 Q(dw)181.836 338 Q
(arf_weakname\(\))-.11 E 8.25(.........................................\
................................ 65)278.586 338 R(6.15.1.3)139.336 351 Q
(dw)181.836 351 Q(arf_weak_cu_of)-.11 E(fset\(\))-.275 E 8.25
(................................................................. 65)
300.586 351 R(6.15.1.4)139.336 364 Q(dw)181.836 364 Q(arf_weak_name_of)
-.11 E(fsets\(\))-.275 E 8.25
(.......................................................... 65)319.836
364 R(6.16)81.836 377 Q(Static Function Names Operations)104.336 377 Q
8.25(..................................................................\
........... 65)267.586 377 R(6.16.1)104.336 390 Q(Deb)139.336 390 Q
(ugger Interf)-.22 E(ace Operations)-.11 E 8.25(.......................\
............................................... 66)286.836 390 R
(6.16.1.1)139.336 403 Q(dw)181.836 403 Q(arf_get_funcs\(\))-.11 E 8.25(\
.......................................................................\
... 66)275.836 403 R(6.16.1.2)139.336 416 Q(dw)181.836 416 Q
(arf_funcname\(\))-.11 E 8.25(.........................................\
................................. 67)275.836 416 R(6.16.1.3)139.336 429
Q(dw)181.836 429 Q(arf_func_die_of)-.11 E(fset\(\))-.275 E 8.25
(................................................................. 67)
300.586 429 R(6.16.1.4)139.336 442 Q(dw)181.836 442 Q(arf_func_cu_of)
-.11 E(fset\(\))-.275 E 8.25
(.................................................................. 67)
297.836 442 R(6.16.1.5)139.336 455 Q(dw)181.836 455 Q(arf_func_name_of)
-.11 E(fsets\(\))-.275 E 8.25
(........................................................... 68)317.086
455 R(6.17)81.836 468 Q(User Def)104.336 468 Q(ined T)-.22 E
(ype Names Operations)-.88 E 8.25(.....................................\
.................................. 68)284.086 468 R(6.17.1)104.336 481 Q
(Deb)139.336 481 Q(ugger Interf)-.22 E(ace Operations)-.11 E 8.25(.....\
................................................................. 68)
286.836 481 R(6.17.1.1)139.336 494 Q(dw)181.836 494 Q(arf_get_types\(\))
-.11 E 8.25(...........................................................\
............... 68)275.836 494 R(6.17.1.2)139.336 507 Q(dw)181.836 507 Q
(arf_typename\(\))-.11 E 8.25(.........................................\
................................. 69)275.836 507 R(6.17.1.3)139.336 520
Q(dw)181.836 520 Q(arf_type_die_of)-.11 E(fset\(\))-.275 E 8.25
(................................................................. 70)
300.586 520 R(6.17.1.4)139.336 533 Q(dw)181.836 533 Q(arf_type_cu_of)
-.11 E(fset\(\))-.275 E 8.25
(.................................................................. 70)
297.836 533 R(6.17.1.5)139.336 546 Q(dw)181.836 546 Q(arf_type_name_of)
-.11 E(fsets\(\))-.275 E 8.25
(............................................................ 70)314.336
546 R(6.18)81.836 559 Q(User Def)104.336 559 Q(ined Static V)-.22 E
(ariable Names Operations)-1.221 E 8.25
(....................................................... 70)328.086 559
R(6.18.1)104.336 572 Q(Deb)139.336 572 Q(ugger Interf)-.22 E
(ace Operations)-.11 E 8.25(...........................................\
........................... 71)286.836 572 R(6.18.1.1)139.336 585 Q(dw)
181.836 585 Q(arf_get_v)-.11 E(ars\(\))-.275 E 8.25(...................\
......................................................... 71)270.336 585
R(6.18.1.2)139.336 598 Q(dw)181.836 598 Q(arf_v)-.11 E(arname\(\))-.275
E 8.25(................................................................\
............ 72)270.336 598 R(6.18.1.3)139.336 611 Q(dw)181.836 611 Q
(arf_v)-.11 E(ar_die_of)-.275 E(fset\(\))-.275 E 8.25
(................................................................... 72)
295.086 611 R(6.18.1.4)139.336 624 Q(dw)181.836 624 Q(arf_v)-.11 E
(ar_cu_of)-.275 E(fset\(\))-.275 E 8.25(...............................\
..................................... 72)292.336 624 R(6.18.1.5)139.336
637 Q(dw)181.836 637 Q(arf_v)-.11 E(ar_name_of)-.275 E(fsets\(\))-.275 E
8.25(............................................................. 73)
311.586 637 R(6.19)81.836 650 Q(Macro Information Operations)104.336 650
Q 8.25(................................................................\
................... 73)251.086 650 R(6.19.1)104.336 663 Q
(General Macro Operations)139.336 663 Q 8.25(..........................\
.................................................. 73)270.336 663 R
(6.19.1.1)139.336 676 Q(dw)181.836 676 Q(arf_f)-.11 E(ind_macro_v)-.22 E
(alue_start\(\))-.275 E 8.25
(.................................................... 73)336.336 676 R
(6.19.2)104.336 689 Q(Deb)139.336 689 Q(ugger Interf)-.22 E
(ace Macro Operations)-.11 E 8.25
(.......................................................... 73)319.836
689 R(6.19.3)104.336 702 Q(Lo)139.336 702 Q 2.75(wL)-.275 G -2.365 -.275
(ev e)-2.75 H 2.75(lM).275 G(acro Information Operations)-2.75 E 8.25
(.................................................... 73)336.336 702 R
(6.19.3.1)139.336 715 Q(dw)181.836 715 Q(arf_get_macro_details\(\))-.11
E 8.25(............................................................ 73)
314.336 715 R -.275(iv)281.195 771 S 0 Cg EP
%%Page: 130 130
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(6.20)81.836 104 Q(Lo)104.336 104 Q 2.75(wL)-.275
G -2.365 -.275(ev e)-2.75 H 2.75(lF).275 G(rame Operations)-2.75 E 8.25
(......................................................................\
............... 74)245.586 104 R(6.20.0.1)139.336 117 Q(dw)181.836 117 Q
(arf_get_fde_list\(\))-.11 E 8.25(.....................................\
.................................. 77)284.086 117 R(6.20.0.2)139.336 130
Q(dw)181.836 130 Q(arf_get_fde_list_eh\(\))-.11 E 8.25
(................................................................. 78)
300.586 130 R(6.20.0.3)139.336 143 Q(dw)181.836 143 Q
(arf_get_cie_of_fde\(\))-.11 E 8.25
(.................................................................. 79)
297.836 143 R(6.20.0.4)139.336 156 Q(dw)181.836 156 Q
(arf_get_fde_for_die\(\))-.11 E 8.25
(................................................................ 79)
303.336 156 R(6.20.0.5)139.336 169 Q(dw)181.836 169 Q
(arf_get_fde_range\(\))-.11 E 8.25
(................................................................... 80)
295.086 169 R(6.20.0.6)139.336 182 Q(dw)181.836 182 Q
(arf_get_cie_info\(\))-.11 E 8.25(.....................................\
................................. 80)286.836 182 R(6.20.0.7)139.336 195
Q(dw)181.836 195 Q(arf_get_cie_inde)-.11 E(x\(\))-.165 E 8.25
(................................................................... 81)
295.086 195 R(6.20.0.8)139.336 208 Q(dw)181.836 208 Q
(arf_get_fde_instr_bytes\(\))-.11 E 8.25
(.......................................................... 81)319.836
208 R(6.20.0.9)139.336 221 Q(dw)181.836 221 Q(arf_get_fde_info_for_re)
-.11 E(g\(\))-.165 E 8.25
(........................................................ 81)325.336 221
R(6.20.0.10)139.336 234 Q(dw)181.836 234 Q(arf_get_fde_info_for_all_re)
-.11 E(gs\(\))-.165 E 8.25
(................................................ 82)347.336 234 R
(6.20.0.11)139.336 247 Q(dw)181.836 247 Q
(arf_set_frame_rule_table_size\(\))-.11 E 8.25
(................................................ 83)347.336 247 R
(6.20.0.12)139.336 260 Q(dw)181.836 260 Q(arf_set_frame_rule_initial_v)
-.11 E(alue\(\))-.275 E 8.25
(............................................ 83)358.336 260 R
(6.20.0.13)139.336 273 Q(dw)181.836 273 Q(arf_set_frame_cf)-.11 E(a_v)
-.11 E(alue\(\))-.275 E 8.25
(......................................................... 83)322.586
273 R(6.20.0.14)139.336 286 Q(dw)181.836 286 Q(arf_set_frame_same_v)-.11
E(alue\(\))-.275 E 8.25
(..................................................... 84)333.586 286 R
(6.20.0.15)139.336 299 Q(dw)181.836 299 Q(arf_set_frame_undef)-.11 E
(ined_v)-.22 E(alue\(\))-.275 E 8.25
(............................................. 84)355.586 299 R
(6.20.0.16)139.336 312 Q(dw)181.836 312 Q(arf_set_def)-.11 E
(ault_address_size\(\))-.11 E 8.25
(.................................................. 84)341.836 312 R
(6.20.0.17)139.336 325 Q(dw)181.836 325 Q(arf_get_fde_info_for_re)-.11 E
(g3\(\))-.165 E 8.25
(...................................................... 84)330.836 325 R
(6.20.0.18)139.336 338 Q(dw)181.836 338 Q(arf_get_fde_info_for_cf)-.11 E
(a_re)-.11 E(g3\(\))-.165 E 8.25
(............................................... 86)350.086 338 R
(6.20.0.19)139.336 351 Q(dw)181.836 351 Q(arf_get_fde_info_for_all_re)
-.11 E(gs3\(\))-.165 E 8.25
(.............................................. 86)352.836 351 R
(6.20.0.20)139.336 364 Q(dw)181.836 364 Q(arf_get_fde_n\(\))-.11 E 8.25
(......................................................................\
.... 87)275.836 364 R(6.20.0.21)139.336 377 Q(dw)181.836 377 Q
(arf_get_fde_at_pc\(\))-.11 E 8.25
(................................................................... 87)
295.086 377 R(6.20.0.22)139.336 390 Q(dw)181.836 390 Q(arf_e)-.11 E
(xpand_frame_instructions\(\))-.165 E 8.25
(.............................................. 87)352.836 390 R
(6.20.0.23)139.336 403 Q(dw)181.836 403 Q(arf_get_fde_e)-.11 E
(xception_info\(\))-.165 E 8.25
(.................................................... 88)336.336 403 R
(6.21)81.836 416 Q(Location Expression Ev)104.336 416 Q(aluation)-.275 E
8.25(..................................................................\
............... 88)256.586 416 R(6.21.1)104.336 429 Q
(Location List Internal-le)139.336 429 Q -.165(ve)-.275 G 2.75(lI).165 G
(nterf)-2.75 E(ace)-.11 E 8.25
(............................................................ 88)314.336
429 R(6.21.1.1)139.336 442 Q(dw)181.836 442 Q(arf_get_loclist_entry\(\))
-.11 E 8.25
(............................................................... 88)
306.086 442 R(6.22)81.836 455 Q(Abbre)104.336 455 Q(viations access)
-.275 E 8.25(..........................................................\
........................................ 90)209.836 455 R(6.22.1)104.336
468 Q(dw)139.336 468 Q(arf_get_abbre)-.11 E(v\(\))-.275 E 8.25(........\
.......................................................................\
......... 90)237.336 468 R(6.22.2)104.336 481 Q(dw)139.336 481 Q
(arf_get_abbre)-.11 E(v_tag\(\))-.275 E 8.25(..........................\
....................................................... 90)256.586 481 R
(6.22.3)104.336 494 Q(dw)139.336 494 Q(arf_get_abbre)-.11 E(v_code\(\))
-.275 E 8.25(..........................................................\
.................... 90)264.836 494 R(6.22.4)104.336 507 Q(dw)139.336
507 Q(arf_get_abbre)-.11 E(v_children_flag\(\))-.275 E 8.25
(................................................................ 90)
303.336 507 R(6.22.5)104.336 520 Q(dw)139.336 520 Q(arf_get_abbre)-.11 E
(v_entry\(\))-.275 E 8.25(.............................................\
................................ 91)267.586 520 R(6.23)81.836 533 Q
(String Section Operations)104.336 533 Q 8.25(.........................\
.................................................................. 91)
229.086 533 R(6.23.1)104.336 546 Q(dw)139.336 546 Q(arf_get_str\(\))-.11
E 8.25(................................................................\
.............................. 91)220.836 546 R(6.24)81.836 559 Q
(Address Range Operations)104.336 559 Q 8.25(..........................\
............................................................... 91)
234.586 559 R(6.24.1)104.336 572 Q(dw)139.336 572 Q(arf_get_aranges\(\))
-.11 E 8.25(...........................................................\
........................... 91)242.836 572 R(6.24.2)104.336 585 Q(dw)
139.336 585 Q(arf_get_arange\(\))-.11 E 8.25(..........................\
.............................................................. 92)
237.336 585 R(6.24.3)104.336 598 Q(dw)139.336 598 Q(arf_get_cu_die_of)
-.11 E(fset\(\))-.275 E 8.25(..........................................\
................................... 92)267.586 598 R(6.24.4)104.336 611
Q(dw)139.336 611 Q(arf_get_arange_cu_header_of)-.11 E(fset\(\))-.275 E
8.25(.......................................................... 93)
319.836 611 R(6.24.5)104.336 624 Q(dw)139.336 624 Q
(arf_get_arange_info\(\))-.11 E 8.25(..................................\
............................................. 93)262.086 624 R(6.25)
81.836 637 Q(General Lo)104.336 637 Q 2.75(wL)-.275 G -2.365 -.275(ev e)
-2.75 H 2.75(lO).275 G(perations)-2.75 E 8.25(.........................\
......................................................... 93)253.836 637
R(6.25.1)104.336 650 Q(dw)139.336 650 Q(arf_get_address_size\(\))-.11 E
8.25(..................................................................\
............ 93)264.836 650 R(6.25.2)104.336 663 Q(dw)139.336 663 Q
(arf_get_die_address_size\(\))-.11 E 8.25(.............................\
.......................................... 94)284.086 663 R(6.26)81.836
676 Q(Ranges Operations \(.deb)104.336 676 Q(ug_ranges\))-.22 E 8.25(..\
.......................................................................\
.. 94)273.086 676 R(6.26.1)104.336 689 Q(dw)139.336 689 Q
(arf_get_ranges\(\))-.11 E 8.25(.......................................\
................................................. 94)237.336 689 R
(6.26.2)104.336 702 Q(dw)139.336 702 Q(arf_get_ranges_a\(\))-.11 E 8.25
(......................................................................\
.............. 94)248.336 702 R(6.26.3)104.336 715 Q(dw)139.336 715 Q
(arf_ranges_dealloc\(\))-.11 E 8.25(...................................\
.............................................. 95)256.586 715 R(v)
282.586 771 Q 0 Cg EP
%%Page: 131 131
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(6.27)81.836 104 Q(Gdb Inde)104.336 104 Q 2.75
(xo)-.165 G(perations)-2.75 E 8.25(....................................\
............................................................. 95)212.586
104 R(6.27.1)104.336 117 Q(dw)139.336 117 Q(arf_gdbinde)-.11 E
(x_header\(\))-.165 E 8.25(............................................\
.................................. 96)264.836 117 R(6.27.2)104.336 130 Q
(dw)139.336 130 Q(arf_gdbinde)-.11 E(x_culist_array\(\))-.165 E 8.25(..\
................................................................... 99)
289.586 130 R(6.27.3)104.336 143 Q(dw)139.336 143 Q(arf_gdbinde)-.11 E
(x_culist_entry\(\))-.165 E 8.25(......................................\
............................... 99)289.586 143 R(6.27.4)104.336 156 Q
(dw)139.336 156 Q(arf_gdbinde)-.11 E(x_types_culist_array\(\))-.165 E
8.25(........................................................... 99)
317.086 156 R(6.27.5)104.336 169 Q(dw)139.336 169 Q(arf_gdbinde)-.11 E
(x_types_culist_entry\(\))-.165 E 8.25
(......................................................... 100)317.086
169 R(6.27.6)104.336 182 Q(dw)139.336 182 Q(arf_gdbinde)-.11 E
(x_addressarea\(\))-.165 E 8.25(.......................................\
............................. 100)286.836 182 R(6.27.7)104.336 195 Q(dw)
139.336 195 Q(arf_gdbinde)-.11 E(x_addressarea_entry\(\))-.165 E 8.25
(......................................................... 100)317.086
195 R(6.27.8)104.336 208 Q(dw)139.336 208 Q(arf_gdbinde)-.11 E
(x_symboltable_array\(\))-.165 E 8.25
(......................................................... 101)317.086
208 R(6.27.9)104.336 221 Q(dw)139.336 221 Q(arf_gdbinde)-.11 E
(x_symboltable_entry\(\))-.165 E 8.25
(......................................................... 103)317.086
221 R(6.27.10)104.336 234 Q(dw)139.336 234 Q(arf_gdbinde)-.11 E(x_cuv)
-.165 E(ector_length\(\))-.165 E 8.25
(............................................................. 103)
306.086 234 R(6.27.11)104.336 247 Q(dw)139.336 247 Q(arf_gdbinde)-.11 E
(x_cuv)-.165 E(ector_inner_attrib)-.165 E(utes\(\))-.22 E 8.25
(.............................................. 103)347.336 247 R
(6.27.12)104.336 260 Q(dw)139.336 260 Q(arf_gdbinde)-.11 E(x_cuv)-.165 E
(ector_instance_e)-.165 E(xpand_v)-.165 E(alue\(\))-.275 E 8.25
(................................. 104)383.086 260 R(6.27.13)104.336 273
Q(dw)139.336 273 Q(arf_gdbinde)-.11 E(x_string_by_of)-.165 E(fset\(\))
-.275 E 8.25
(............................................................ 104)
308.836 273 R(6.28)81.836 286 Q(Deb)104.336 286 Q(ug Fission \(.deb)-.22
E(ug_tu_inde)-.22 E(x, .deb)-.165 E(ug_cu_inde)-.22 E(x\) operations)
-.165 E 8.25(............................. 105)394.086 286 R(6.28.1)
104.336 299 Q(Dw)139.336 299 Q(arf_Deb)-.11 E(ug_Fission_Per_CU)-.22 E
8.25
(.................................................................. 105)
292.336 299 R(6.28.2)104.336 312 Q(dw)139.336 312 Q
(arf_die_from_hash_signature\(\))-.11 E 8.25
(............................................................... 106)
300.586 312 R(6.28.3)104.336 325 Q(dw)139.336 325 Q(arf_get_deb)-.11 E
(ugf)-.22 E(ission_for_die\(\))-.22 E 8.25
(.............................................................. 107)
303.336 325 R(6.28.4)104.336 338 Q(dw)139.336 338 Q(arf_get_deb)-.11 E
(ugf)-.22 E(ission_for_k)-.22 E -.165(ey)-.11 G(\(\)).165 E 8.25
(.............................................................. 107)
303.336 338 R(6.28.5)104.336 351 Q(dw)139.336 351 Q(arf_get_xu_inde)-.11
E(x_header\(\))-.165 E 8.25(...........................................\
.......................... 107)284.086 351 R(6.28.6)104.336 364 Q(dw)
139.336 364 Q(arf_get_xu_inde)-.11 E(x_section_type\(\))-.165 E 8.25
(........................................................... 109)311.586
364 R(6.28.7)104.336 377 Q(dw)139.336 377 Q(arf_get_xu_header_free\(\))
-.11 E 8.25(...........................................................\
............ 110)278.586 377 R(6.28.8)104.336 390 Q(dw)139.336 390 Q
(arf_get_xu_hash_entry\(\))-.11 E 8.25(................................\
......................................... 110)273.086 390 R(6.28.9)
104.336 403 Q(dw)139.336 403 Q(arf_get_xu_section_names\(\))-.11 E 8.25
(................................................................... 11\
1)289.586 403 R(6.28.10)104.336 416 Q(dw)139.336 416 Q
(arf_get_xu_section_of)-.11 E(fset\(\))-.275 E 8.25(...................\
................................................. 112)286.836 416 R
(6.29)81.836 429 Q -1.144 -1.023(TA G)104.336 429 T -1.221(AT)3.773 G
(TR etc names as strings)1.221 E 8.25(.................................\
............................................. 113)259.336 429 R(6.29.1)
104.336 442 Q(dw)139.336 442 Q(arf_get_A)-.11 E(CCESS_name\(\))-.44 E
8.25(..................................................................\
..... 114)278.586 442 R(6.29.2)104.336 455 Q(dw)139.336 455 Q(arf_get_A)
-.11 E(T_name\(\))-1.221 E 8.25(.......................................\
.......................................... 114)251.086 455 R(6.29.3)
104.336 468 Q(dw)139.336 468 Q(arf_get_A)-.11 E(TE_name\(\))-1.221 E
8.25(..................................................................\
............ 114)259.336 468 R(6.29.4)104.336 481 Q(dw)139.336 481 Q
(arf_get_ADDR_name\(\))-.11 E 8.25(....................................\
...................................... 114)270.336 481 R(6.29.5)104.336
494 Q(dw)139.336 494 Q(arf_get_A)-.11 E(TCF_name\(\))-1.221 E 8.25(....\
.......................................................................\
. 114)264.836 494 R(6.29.6)104.336 507 Q(dw)139.336 507 Q
(arf_get_CHILDREN_name\(\))-.11 E 8.25
(................................................................. 115)
295.086 507 R(6.29.7)104.336 520 Q(dw)139.336 520 Q
(arf_get_children_name\(\))-.11 E 8.25(................................\
......................................... 115)273.086 520 R(6.29.8)
104.336 533 Q(dw)139.336 533 Q(arf_get_CC_name\(\))-.11 E 8.25(........\
.......................................................................\
. 115)253.836 533 R(6.29.9)104.336 546 Q(dw)139.336 546 Q(arf_get_CF)
-.11 E(A_name\(\))-.814 E 8.25(........................................\
...................................... 115)259.336 546 R(6.29.10)104.336
559 Q(dw)139.336 559 Q(arf_get_DS_name\(\))-.11 E 8.25(................\
................................................................. 115)
251.086 559 R(6.29.11)104.336 572 Q(dw)139.336 572 Q
(arf_get_DSC_name\(\))-.11 E 8.25(.....................................\
......................................... 115)259.336 572 R(6.29.12)
104.336 585 Q(dw)139.336 585 Q(arf_get_EH_name\(\))-.11 E 8.25(........\
.......................................................................\
. 115)253.836 585 R(6.29.13)104.336 598 Q(dw)139.336 598 Q
(arf_get_END_name\(\))-.11 E 8.25(.....................................\
........................................ 115)262.086 598 R(6.29.14)
104.336 611 Q(dw)139.336 611 Q(arf_get_FORM_name\(\))-.11 E 8.25(......\
.................................................................... 11\
5)270.336 611 R(6.29.15)104.336 624 Q(dw)139.336 624 Q
(arf_get_FRAME_name\(\))-.11 E 8.25(...................................\
..................................... 115)275.836 624 R(6.29.16)104.336
637 Q(dw)139.336 637 Q(arf_get_ID_name\(\))-.11 E 8.25(................\
................................................................. 115)
251.086 637 R(6.29.17)104.336 650 Q(dw)139.336 650 Q
(arf_get_INL_name\(\))-.11 E 8.25(.....................................\
.......................................... 115)256.586 650 R(6.29.18)
104.336 663 Q(dw)139.336 663 Q(arf_get_LANG_name\(\))-.11 E 8.25(......\
..................................................................... 1\
15)267.586 663 R(6.29.19)104.336 676 Q(dw)139.336 676 Q
(arf_get_LNE_name\(\))-.11 E 8.25(.....................................\
......................................... 115)259.336 676 R(6.29.20)
104.336 689 Q(dw)139.336 689 Q(arf_get_LNS_name\(\))-.11 E 8.25(.......\
.......................................................................\
 116)259.336 689 R(6.29.21)104.336 702 Q(dw)139.336 702 Q(arf_get_MA)
-.11 E(CINFO_name\(\))-.44 E 8.25(.....................................\
.............................. 116)289.586 702 R(6.29.22)104.336 715 Q
(dw)139.336 715 Q(arf_get_OP_name\(\))-.11 E 8.25(.....................\
............................................................ 116)251.086
715 R(vi)281.057 771 Q 0 Cg EP
%%Page: 132 132
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(6.29.23)104.336 104 Q(dw)139.336 104 Q
(arf_get_ORD_name\(\))-.11 E 8.25(.....................................\
........................................ 116)262.086 104 R(6.29.24)
104.336 117 Q(dw)139.336 117 Q(arf_get_T)-.11 E -.44(AG)-1.023 G
(_name\(\)).44 E 8.25(.................................................\
............................. 116)259.336 117 R(6.29.25)104.336 130 Q
(dw)139.336 130 Q(arf_get_VIR)-.11 E(TU)-.66 E(ALITY_name\(\))-.44 E
8.25(.............................................................. 116)
303.336 130 R(6.29.26)104.336 143 Q(dw)139.336 143 Q
(arf_get_VIS_name\(\))-.11 E 8.25(.....................................\
.......................................... 116)256.586 143 R(6.30)81.836
156 Q(Section Operations)104.336 156 Q 8.25(...........................\
.......................................................................\
. 116)201.586 156 R(6.30.1)104.336 169 Q(dw)139.336 169 Q
(arf_get_section_count\(\))-.11 E 8.25(................................\
.......................................... 116)270.336 169 R(6.30.2)
104.336 182 Q(dw)139.336 182 Q(arf_get_section_info_by_name\(\))-.11 E
8.25(............................................................ 116)
308.836 182 R(6.30.3)104.336 195 Q(dw)139.336 195 Q
(arf_get_section_info_by_inde)-.11 E(x\(\))-.165 E 8.25
(............................................................ 117)
308.836 195 R(6.31)81.836 208 Q(Utility Operations)104.336 208 Q 8.25(.\
.......................................................................\
............................. 117)196.086 208 R(6.31.1)104.336 221 Q(dw)
139.336 221 Q(arf_errno\(\))-.11 E 8.25(...............................\
................................................................ 117)
212.586 221 R(6.31.2)104.336 234 Q(dw)139.336 234 Q(arf_errmsg\(\))-.11
E 8.25(................................................................\
............................ 117)220.836 234 R(6.31.3)104.336 247 Q(dw)
139.336 247 Q(arf_get_harmless_error_list\(\))-.11 E 8.25
(................................................................. 117)
295.086 247 R(6.31.4)104.336 260 Q(dw)139.336 260 Q
(arf_insert_harmless_error\(\))-.11 E 8.25(............................\
........................................ 118)286.836 260 R(6.31.5)
104.336 273 Q(dw)139.336 273 Q(arf_set_harmless_error_list_size\(\))-.11
E 8.25(.......................................................... 118)
314.336 273 R(6.31.6)104.336 286 Q(dw)139.336 286 Q(arf_dealloc\(\))-.11
E 8.25(................................................................\
............................ 123)220.836 286 R(6.31.7)104.336 299 Q(dw)
139.336 299 Q(arf_encode_leb128\(\))-.11 E 8.25(.......................\
........................................................ 123)256.586 299
R(6.31.8)104.336 312 Q(dw)139.336 312 Q(arf_encode_signed_leb128\(\))
-.11 E 8.25(...........................................................\
........ 123)289.586 312 R(vii)279.528 771 Q 0 Cg EP
%%Page: 133 133
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(LIST OF FIGURES)276.028 104 Q(Figure 1.)69.336
156 Q(Scalar T)115.446 156 Q(ypes)-.88 E 8.25(.........................\
.......................................................................\
............. 5)185.086 156 R(Figure 2.)69.336 175 Q(Error Indications)
115.446 175 Q 8.25(....................................................\
................................................. 15)201.586 175 R
(Figure 3.)69.336 194 Q(Allocation/Deallocation Identif)115.446 194 Q
(iers)-.22 E 8.25(.....................................................\
................... 18)281.336 194 R(Figure 4.)69.336 213 Q
(Frame Information Rule Assignments MIPS)115.446 213 Q 8.25
(......................................................... 76)322.586
213 R(Figure 5.)69.336 232 Q(Frame Information Special V)115.446 232 Q
(alues an)-1.221 E 2.75(ya)-.165 G(rchitecture)-2.75 E 8.25
(.............................................. 76)352.836 232 R
(Figure 6.)69.336 251 Q(Dw)115.446 251 Q(arf Error Codes)-.11 E 8.25(..\
.......................................................................\
...................... 119)212.586 251 R(Figure 7.)69.336 270 Q(Dw)
115.446 270 Q(arf 2 Error Codes \(continued belo)-.11 E(w\))-.275 E 8.25
(.............................................................. 120)
303.336 270 R(Figure 8.)69.336 289 Q(Dw)115.446 289 Q
(arf 2 Error Codes \(continued belo)-.11 E(w\))-.275 E 8.25
(.............................................................. 121)
303.336 289 R(Figure 9.)69.336 308 Q(Dw)115.446 308 Q
(arf 2 Error Codes \(continued belo)-.11 E(w\))-.275 E 8.25
(.............................................................. 122)
303.336 308 R(Figure 10.)69.336 327 Q(Dw)115.446 327 Q
(arf 2 Error Codes)-.11 E 8.25(........................................\
.................................................... 123)220.836 327 R
(viii)277.999 771 Q 0 Cg EP
%%Page: 134 134
%%BeginPageSetup
BP
%%EndPageSetup
/F0 13/Times-Bold@0 SF 3.25(AC)190.468 94.37 S
(onsumer Library Interface to D)-3.25 E -1.56(WA)-.52 G(RF)1.56 E/F1 12
/Times-Italic@0 SF(David Ander)269.289 114.87 Q(son)-.12 E/F2 11
/Times-Italic@0 SF(ABSTRA)259.524 153.87 Q(CT)-.33 E/F3 11/Times-Roman@0
SF 2.292(This document describes an interf)69.336 192.87 R 2.293
(ace to a library of functions to access D)-.11 F -1.32(WA)-.33 G 2.293
(RF deb)1.32 F(ugging)-.22 E 6.51(information entries and D)69.336
205.87 R -1.32(WA)-.33 G 6.509(RF line number information \(and other D)
1.32 F -1.32(WA)-.33 G(RF2/3/4/5)1.32 E 5.434(information\). It)69.336
218.87 R 2.684(does not mak)5.434 F 5.434(er)-.11 G 2.685
(ecommendations as to ho)-5.434 F 5.435(wt)-.275 G 2.685
(he functions described in this)-5.435 F(document should be implemented\
 nor does it suggest possible optimizations.)69.336 231.87 Q 1.965
(The document is oriented to reading D)69.336 250.87 R -1.32(WA)-.33 G
1.965(RF v)1.32 F 1.965(ersion 2 and later)-.165 F 7.465(.T)-.605 G
1.964(here are certain sections)-7.465 F(which are SGI-specif)69.336
263.87 Q(ic \(those are clearly identif)-.22 E(ied in the document\).)
-.22 E(re)69.336 282.87 Q 2.75(v2)-.275 G(.31, Oct 5, 2015)-2.75 E .36
LW 73.836 727 69.336 727 DL 78.336 727 73.836 727 DL 82.836 727 78.336
727 DL 87.336 727 82.836 727 DL 91.836 727 87.336 727 DL 96.336 727
91.836 727 DL 100.836 727 96.336 727 DL 105.336 727 100.836 727 DL
109.836 727 105.336 727 DL 114.336 727 109.836 727 DL 118.836 727
114.336 727 DL 123.336 727 118.836 727 DL 127.836 727 123.336 727 DL
132.336 727 127.836 727 DL 136.836 727 132.336 727 DL 141.336 727
136.836 727 DL 145.836 727 141.336 727 DL 150.336 727 145.836 727 DL
154.836 727 150.336 727 DL 159.336 727 154.836 727 DL/F4 9/Times-Roman@0
SF(0.)69.336 745 Q(UNIX is a re)90.595 745 Q
(gistered trademark of UNIX System Laboratories, Inc.)-.135 E
(in the United States and other countries.)4.5 E F3(ix)281.057 771 Q 0
Cg EP
%%Trailer
end
%%EOF
