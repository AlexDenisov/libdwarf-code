2020-03-24: David Anderson
    * dwarf_alloc.c: Now with #ifdef DEBUG of debug messages in
      various places as thise get needed over and over.
    * dwarf_die_deliv.c: Working toward complete dealloc
      of resources to eliminate the  dependence on de_alloc_tree.
    * dwarf_error.c: #if 0 a debug message.
    * dwarf_form.c: Remove superflous ().
    * dwarf_global.c(_dwarf_internal_globals_dealloc):
      Recreated and documented critical dealloc code
      so Dwarf_Global_Context gets dealloc-c.
    * dwarf_line.c: Add a return DW_DLV_ERROR after
      an error Dwarf_Error is created..
2020-03-23: David Anderson
    * dwarf_die_deliv.c,dwarf_frame2.c: Some error messages
      are now far more precise (showing values).
    * dwarf_global.c: Correcting leakage and making
      some error messages more precise.
    * dwarf_print_lines.c: Correcting leakages.
    * dwarf_pubtypes.c: Minor readability change.
2020-03-21: David Anderson
    * dwarf_abbrev.c Move leb wrapper functions to dwarf_util.[ch]:
      and rename as _dwarf.....
      Make certain error conditions more explicit (better
      text in the error string).
    * dwarf_die_deliv.c: Move leb wrapper functions to dwarf_util.[ch]
      and rename as _dwarf.....
    * dwarf_frame2.c: Add {} for the few 'if' missing same.
    * dwarf_line.c: In case of form error make the error
      text more useful.
    * dwarf_query.c: Move leb wrapper functions to dwarf_util.[ch]
      and rename as _dwarf.....
    * dwarf_util.c, dwarf_util.h: Add the renamed
      _dwarf_leb128_uword_wrapper() and
      _dwarf_leb128_sword_wrapper() for general use
      where better error messages are advisable.
    * dwarf_init_finish.c: Removed a single trailing blank.
    * libdwarf.h.in: Removed trailing spaces.
    * generated_libdwarf.h.in: Regenerated.
2020-03-20: David Anderson
    * dwarf_arange.c: In case of error, was failing
      to clean up all allocations.
    * dwarf_macro5.c: Was preventing some dwarf_dealloc().
      Fixed.
2020-03-19: David Anderson
    * dwarf_abbrev.c: Generates a more useful and specific
      message in case a TAG is corrupt.
    * dwarf_line.c: After dealloc assign 0 to the pointer.
    * dwarf_die_deliv.c: Improved insert_into_context_list()
      for clarity and correctness. 
    * dwarf_error.c: Removed a couple "!= NULL" in if
      conditions.
    * dwarf_query.c: Uses local variable now to
      satisfy the usual libdwarf convention that in case
      of DW_DLV_NO_ENTRY or DW_DLV_ERROR only the
      Dwarf_Error argument is altered, not other
      pointer args.
    * dwarf_util.h: Declaration for _dwarf_format_TAG_err_msg()
    * dwarf_util.c: Generates a more useful and specific
      message in in _dwarf_format_TAG_err_msg()
      in case a TAG is corrupt.
2020-03-18: David Anderson
    * dwarf_die_deliv.c: Rewrote the function that
      keeps the cu_context list in the proper order.
      For clarity and correctness.
2020-03-16: David Anderson
    * dwarf_alloc.c: A recent change had the wrong
      test during initial Dwarf_Debug
      struct setup meaning dwarf_finish() was not cleaning
      up allocations. This made the runtimes better
      than they should be. Important correction here.
    * dwarf_die_deliv.c: Drop use of the dwarf_dieoff()
      context list, that was never appropriate. Now
      again with one list.
    * dwarf_opaque.h: Removed a list of Dwarf_CU_Contexts,
      that was never correct to have dwarf_offdie maintain
      a list separate from iterating through CUs.
    * dwarf_query.c (dwarf_attrlist): Add a 
      dwarf_dealloc on abbrev_list
      in an error case.
    * dwarf_util.c: Make the lines look a tiny bit
      better avoiding too-long lines.
2020-03-15: David Anderson
    * dwarf_frame2.c: On an internal error (bad dwarf)
      the necessary cleanup function was not being called
      in two places.
2020-03-15: David Anderson
    * dwarf_alloc.c: Now with configure-time options
      for tracking the alloc/dealloc actions in detail.
2020-03-15: David Anderson
    * dwarf_alloc.c: Now with the de_alloc_tree tests
      in final form. Respecting dwarf_set_de_alloc_flag().
2020-03-14: David Anderson
    * dwarf_alloc.c: Now adds an optional DEBUG
      macro that libdwarf developers may find useful.
      Revised the dwarf_dealloc code to not require de_alloc_tree.
    * dwarf_line.c: Now dwarf_srcfiles() and dwarf_filename()
      always allocate DW_DLA_STRINGS. Whereas earlier some
      of the strings were actually in a .debug section,
      not allocated. 
    * libdwarf2.1.mm: Now dwarf_diename()  and
      dwarf_die_text are documented
      as returning static strings that are not be be
      freed or dwarf_dealloc'd.  This was always true
      but the documentation said dwarf_dealloc() was
      required. Don't use dwarf_dealloc on these returned
      strings.
    * libdwarf2.1.pdf: Regenerated, version 2.88
    * dwarf_loc.c: Was incorrectly passing NULL instead
      of dbg to _dwarf_get_alloc in a few places.
    * dwarf_util.c, dwarf_global.c: Now checks more for incomplete setup
      of an internal structure to avoid calling dwarf_dealloc
      with NULL as the space to be freed.
2020-03-13: David Anderson
    * dwarf_abbrev.c: Remove erroneous dwarf_dealloc
      introduced yesterday. Caused a coredump
      in FreeBSD 64bit dwarfdump testing.
    * dwarfstring.c: Introduced an extra zero initializer in
      the dwarfstring_destructor() as safe and harmless.
2020-03-12: David Anderson
    * dwarf_abbrev.c: Use a wrapper on macro
      DECODE_LEB128_UWORD_CK
      so we can dwarf_dealloc in case of a problem.
      And be more thorough in various places
      for those dwarf_dealloc.
2020-03-12: David Anderson
    * dwarf_die_deliv.c:  A local function now explicitly
      static (_dwarf_siblingof_internal). 
      Following dwarf_dealloc of cudie  we assign 0 to it.`
      New function local_dealloc_cu_context() enables
      accurate and full dealloc of a cu context
      (which means there was some error fount) in
      an easy and complete way.
      local_attrlist_dealloc() does similarly for attrlists.
      A DECODE_LEB128_UWORD_CK now in a wrapper so on error
      we can dwarf_dealloc a DIE.
    * dwarf_macro5.c: Now dwarf_dealloc_macro_context() is safe
      if called with a null argument (and in that case there
      is nothing to do).
    * dwarf_opaque.h: Removed _dwarf_siblingof_internal()
      from the declared functions.
2020-03-12: David Anderson
    * dwarf_alloc.h, dwarf_opaque.h: Removed trailing whitespace.
      Shortened the lines of the LGPL text (the text
      is unchanged).
2020-03-12: David Anderson
    * dwarf_str_offsets.c,dwarf_util.c: Removed trailing whitespace
      and fixed indent mistakes.
2020-03-12: David Anderson
    * dwarf_query.c: Adds wrapper code around some
      dwarf_util.h macros
      so in case of a serious DWARF error we can
      free locally allocated things.
2020-03-12: David Anderson
    * dwarf_errmsg_list.h: Corrected DW_DLE_STR_OFFSETS_EXTRA_BYTES
      text. The error messages have more detail due to 
      the dwarf_str_offsets.c changes below, so fixed
      the string here.
2020-03-12: David Anderson
    * dwarf_macro5.c: Do proper dwarf_dealloc, avoiding
      a pointless dependency on de_alloc_tree freeing 
      things.
2020-03-12: David Anderson
    * dwarf_alloc.c: Minor cleanup that assigns
      zero after dwarf_dealloc so dead pointers
      not left around.
2020-03-12: David Anderson
    * dwarf_str_offsets.c: Improve messages in case of
      a serious DWARF error, reporting what is wrong
      more precisely and allowing a few bytes of all-zero-bits
      to be allowed at end of section (no error needed).
2020-03-12: David Anderson
    * dwarf_util.c: Revise too-long lines and checks for NULL
      pointers for moderm readability.
      Improve _dwarf_free_abbrev_hash_table_contents() so
      it can safely free an incompletely set up hash table.
2020-03-09: David Anderson
    * dwarf_alloc.c: Implements optional (at run time)
      reduced use of the de_alloc_tree search tree
      as a performance enhancement (see libdwarf2.1.mm/pdf).
    * dwarf_alloc.h: Declares _dwarf_alloc_tree_counts(),
      a new hidden function.
    * libdwarf_version.h: New date string
    * dwarf_names.c,dwarf_names.h,dwarf_names_enum.h,
      dwarf_names_new.h: New date string so regenerated
      these.
    * libdwarf.h.in: New function dwarf_set_de_alloc_flag()
      declared.
    * generated_libdwarf.h.in: Regenerated
2020-03-02: David Anderson
    * dwarf_print_lines.c: Removed one-line #if 0
      code that serves no purpose.
2020-02-25: David Anderson
    * dwarf_print_lines.c: Removed space character just before newline
      as it  has no useful prupose. 3 places.
2020-02-25: David Anderson
    * dwarf_names.c,dwarf_names.h, dwarf_names_enum.h,dwarf_names_new.h:
      libdwarf_version.h: updated version string.
2020-02-25: David Anderson
    * dwarf_line_table_reader_common.h: Now with dwarfstring
      containers in local scopes and easily evaluated
      as to lifetime and correctness.
2020-02-25: David Anderson
    * dwarf_elfread.c: Deleted a #if 0 ...#endif few lines.
    * dwarf_line.c: Fixed trailing whitespace.
    * dwarf_line_table_reader_common.h: Removed all use of the
      old dwarf_printf varargs code.  Instead using dwarfstring
      and dwarfstring_append_printf_i() etc.
      And a far simpler _dwarf_printf().
      No longer any sprintf/snprintf/vsnprintf here.
    * dwarf_opaque.h: Remove trailing whitespace.
    * dwarf_print_lines.c: Removed all use of the
      old dwarf_printf varargs code.
      No longer any sprintf/snprintf/vsnprintf here.
    * dwarf_util.c: Delete unused buffersetsize function.
      Delete now-unuised dwarf_printf()
    * dwarfstring.c: Now using TRUE FALSE, not DW_DLV anything.
      No one will be testing the integer return value anyway.
      Fixed the code where %-4s was truncating if the string
      to be processed was longer than 4 characters.
    * dwarfstring.h: Added commentary.
    * test_dwarfstring.c: New testcase for dwarfstring
2020-02-21: David Anderson
    * dwarf_arange.c,dwarf_debuglink.c,dwarf_frame2.c:
      removed the last sprintf/snprintf, changed to 
      use dwarfstring.h functions.
2020-02-18: David Anderson
    * dwarf_line.c: Added free() calls to delete_line_context_itself
      to avoid a leak that was created in last commit..
    * dwarf_line.h: Deleted a now-spurious comment.
    * dwarf_line_table_reader_common.h: Removed an == NULL
      comparison in favor of a !filename_entry_pairs.
2020-02-16: David Anderson
    * libdwarf2.1.mm: Now explains how dwarf_srcfiles()
      name arrays differ in DWARF5 from earlier
      debug_info versions. So callers can use
      the srcfiles array properly.
    * libdwarf2.1.pdf: Now version 2.87, dated 16 February 2020.
    * dwarf_line.c, dwarf_line.h,dwarf_print_lines.c,
      dwarf_line_table_reader_common.h: Recording DW5 line table
      header data more fully so lines print verbose
      prints more of the actual line table header.
2020-02-15: David Anderson
    * dwarf_elf_access.c,dwarf_init_finish.c: With libelf
      in use there was a mistake that broke dumping some objects that
      needed relocations.
    * dwarf_opaque.h: Corrected a is_rela to r_is_rela
2020-02-13: David Anderson
    * dwarf_elfread.c,dwarf_errmsg_list.h: Removed
      trailing whitespace.
2020-02-13: David Anderson
    *  libdwarf_version.h: New version string 
    *  dwarf_names.c,dwarf_names.h,dwarf_names_enum.h,
       dwarf_names_new.h: Regenerated with new
       version string.
2020-02-13: David Anderson
     * libdwarf/libdwarf.h.in: Added a new error code to
       properly distinguish between distinct elf section
       header issues related to relocations versus
       other section header issues.
     * libdwarf/generated_libdwarf.h.in: regenerated

    * dwarf_elf_access.c: Adding local READ_UNALIGNED_SAFE
      so we can do libelf relocations properly; .rel and .rela.
    * dwarf_elf_defines.h: Adding R_386_PC32 to the 
      applicable relocation sets.
    * dwarf_elf_load_headers.c: Now we deal with .rel.
      and .rela. relocations for better completeness.
      Removed some code duplication and complexity
      too.
    * dwarf_elf_rel_detector.c: Deals with R_386_PC32 now.
    * dwarf_elfread.c: Add READ_UNALIGNED_SAFE so we can
      do no-libelf relocations properly; .rel and .rela
    * dwarf_elfread.h: Added gr_is_rela field and
      two enums RelocRela and RelocOffsetSize so we have
      type-safety in the argument lists.
    * dwarf_init_finish.c: A new function ensures we
      skip various sections we know we do not want to
      look at.
    * dwarf_opaque.h: Declare _dwarf_ignorethissection()
      so libelf and non-libelf can ignore the unwanted
      sections.
    *  dwarf_errmsg_list.h: Entry added for the new
       DW_DLE error code.
2020-02-11: David Anderson
    * dwarf_elf_access.c,dwarf_line_table_reader_common.h,
      dwarf_tied_decls.h:
      removed trailing whitespace and final blank line.
2020-02-11: David Anderson
    * dwarf_init_finish.c: Removed code that was #if 0 #endif
2020-02-10: David Anderson
    * dwarf_elf_access.c: Now allows for .rel and .rela.
    * dwarf_elf_defines.h: Now allows for .rel and .rela.
    * dwarf_init_finish.c: Now allows for .rel and .rela.
    * dwarf_opaque.h: Adding dss_is_rela so we can
      process .rel. sections too.
2020-01-25: David Anderson
    * dwarf_form.c: DW_FORM_rnglistx was ommitted from a switch statement.
      Adding it in fixed the resulting errors in a DWARF5 object file
      built by clang 9.0.0.0
2020-01-16: David Anderson
    * dwarf_alloc.c,dwarf_die_deliv.c,dwarf_form.a,
      dwarf_query.c,dwarfstring.c,
      pro_reloc.c,pro_reloc_stream.c,pro_reloc_symbolic.c,
      pro_section.c,pro_types.c,pro_vars.c,pro_weaks.c,
      test_dwarfstring.c: Fixed indentations and
      removed trailing whitespace.
    * dwarf_xu_index.c: Ensure local Dwarf_Sig8 variables
      are always initialized. Does not fix any bug but
      does make it easier to read the code.
      Fixes indentation and removes trailing whitespace too.
2020-01-14: David Anderson
    * dwarf_names.c,dwarf_names.h,dwarf_names_enum.h,
      dwarf_names_new.h,libdwarf_version.h: Updated version string.
2020-01-05: David Anderson
    * dwarf_query.c(dwarf_offset_list): Coverity Scan CID 206598.
      Now checks for DW_DLV_ERROR where it failed to do so before,
      and returns an error instead of letting it slip through.
2020-01-03: David Anderson
    * dwarf_load_elf_headers.c(dwarf_elf_load_rela_32):
      Coverity Scan uncovered a memory leak in one
      case. CID 206524
